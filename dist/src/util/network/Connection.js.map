{"version":3,"file":"Connection.js","sourceRoot":"","sources":["../../../../src/util/network/Connection.ts"],"names":[],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid';\nimport {\n  ConnectionStatus,\n  ParsedData,\n  WS_EVENTS,\n} from '../../types/network.types';\nimport type { ShapeType } from '../../types/typeGuards.types';\nimport { CallbackFunction, ChatEntry } from '../../types/types';\nimport { ChatLogType } from './Connection.types';\nimport { ConnectionMonitor } from './ConnectionMonitor';\n\nexport class Connection {\n  #userName: string = 'user_' + nanoid(5);\n  #chatLog: ChatLogType[] = [];\n  #userId: string;\n  #url: string;\n  #port: string;\n  #roomId: string = '';\n  ws: WebSocket | null = null;\n  #keeper?: ConnectionMonitor;\n  #status?: ConnectionStatus = 'disconnected';\n  #onConnected: CallbackFunction<[Connection]>;\n  onDeleteShapes: CallbackFunction<[string[]]>;\n  onUpdateShapes: CallbackFunction<[Record<string, any>[]]>;\n  onGetAllShapes: CallbackFunction<[], ShapeType[]>;\n  onResetEditor: CallbackFunction<[]>;\n  onUpdateConnectionStatus: CallbackFunction<[ConnectionStatus]>;\n  onNewMessage: CallbackFunction<[ChatEntry[]]>;\n\n  constructor(\n    onDeleteShapes: CallbackFunction<[string[]]>,\n    onUpdateShapes: CallbackFunction<[Record<string, any>[]]>,\n    onGetAllShapes: CallbackFunction<[], ShapeType[]>,\n    onResetEditor: CallbackFunction<[]>,\n    onUpdateConnectionStatus: CallbackFunction<[ConnectionStatus]>,\n    onNewMessage: CallbackFunction<[ChatEntry[]]>,\n    onConnected: CallbackFunction<[Connection]>,\n    url: string,\n    port: string\n  ) {\n    this.#url = url;\n    this.#port = port;\n    this.#userId = nanoid();\n    this.onDeleteShapes = onDeleteShapes;\n    this.onUpdateShapes = onUpdateShapes;\n    this.onGetAllShapes = onGetAllShapes;\n    this.onResetEditor = onResetEditor;\n    this.onNewMessage = onNewMessage;\n    this.#onConnected = onConnected;\n    this.onUpdateConnectionStatus = onUpdateConnectionStatus;\n    this.updateStatus('disconnected');\n  }\n\n  disconnect = () => {\n    this.ws?.close();\n    this.#keeper?.destroy();\n    this.updateStatus('disconnected');\n    this.onResetEditor();\n  };\n\n  getRoom = () => {\n    return this.#roomId;\n  };\n\n  getChatLog = () => {\n    return this.#chatLog;\n  };\n\n  getUserName = () => {\n    return this.#userName;\n  };\n\n  #parseResponse = (response: any): ParsedData => {\n    const allParsedData = JSON.parse(response.data);\n    if (\n      allParsedData.event === WS_EVENTS.PING ||\n      allParsedData.event === WS_EVENTS.PONG\n    ) {\n      return allParsedData;\n    }\n    const { value, ...parsedData } = allParsedData;\n    const parsedValue =\n      typeof value === 'string'\n        ? value\n        : (JSON.parse(value) as string[] | undefined)?.map(\n            (innerValue): Record<string, any> => JSON.parse(innerValue)\n          );\n    return { ...parsedData, value: parsedValue };\n  };\n\n  #startKeepingConnectionAlive = (ws: WebSocket) => {\n    if (this.#keeper) {\n      this.#keeper.destroy();\n    }\n    this.#keeper = new ConnectionMonitor(ws);\n    return this.#keeper;\n  };\n\n  #createNewWebSocket = () => {\n    const self = this;\n    const ws = new WebSocket(`ws://${this.#url}:${this.#port}`);\n    this.ws = ws;\n    ws.addEventListener('open', () => {\n      const payload = {\n        event: WS_EVENTS.JOIN_ROOM,\n        roomId: self.#roomId,\n        value: JSON.stringify(\n          self.onGetAllShapes().map(shape => shape.getDeconstructedShapeData())\n        ),\n        user: self.#userName,\n      };\n      self.#onConnected(self);\n      self.updateStatus('connected');\n      ws.send(JSON.stringify(payload));\n      self.sendChatMessage('Connected to session.');\n    });\n\n    ws.addEventListener('close', () => {\n      this.disconnect();\n    });\n\n    ws.addEventListener('message', msg => {\n      const data: ParsedData = this.#parseResponse(msg);\n      const { value, event, user } = data;\n      switch (event) {\n        case WS_EVENTS.MESSAGE:\n          {\n            if (user && value) {\n              self.#chatLog?.push({ userName: user, message: value as string });\n              self.onNewMessage(self.#chatLog);\n            }\n          }\n          break;\n        case WS_EVENTS.GET_SHAPES: {\n          self.onUpdateShapes(JSON.parse(value as string) ?? []);\n          break;\n        }\n      }\n    });\n    this.#startKeepingConnectionAlive(ws);\n    this.#keeper = this.#startKeepingConnectionAlive(this.ws);\n  };\n\n  sendChatMessage = (message?: string) => {\n    if (!message) return;\n    const payload = JSON.stringify({\n      event: WS_EVENTS.MESSAGE,\n      roomId: this.#roomId,\n      user: this.#userName,\n      userId: this.#userId,\n      value: message,\n    });\n    this.ws?.send(payload);\n  };\n\n  #sendShapeWithLock = (\n    shapes: ShapeType | ShapeType[],\n    isLocked: boolean = true\n  ) => {\n    let _shapes: ShapeType[] = [];\n    if (!Array.isArray(shapes)) {\n      shapes.isLocked = isLocked;\n      _shapes = [shapes];\n    } else {\n      shapes.forEach(shape => (shape.isLocked = isLocked));\n      _shapes = shapes;\n    }\n    const payload = JSON.stringify({\n      event: isLocked ? WS_EVENTS.LOCK_SHAPES : WS_EVENTS.UNLOCK_SHAPES,\n      roomId: this.#roomId,\n      user: this.#userName,\n      userId: this.#userId,\n      value: _shapes.map(shape =>\n        JSON.stringify(shape.getDeconstructedShapeData())\n      ),\n    });\n    this.ws?.send(payload);\n  };\n\n  lockShapes = (shape: ShapeType | ShapeType[]) => {\n    this.#sendShapeWithLock(shape, true);\n  };\n\n  unlockShapes = (shape: ShapeType | ShapeType[]) => {\n    this.#sendShapeWithLock(shape, false);\n  };\n\n  updateStatus = (status: ConnectionStatus) => {\n    this.#status = status;\n    this.onUpdateConnectionStatus(this.#status);\n  };\n\n  getStatus = (): ConnectionStatus | undefined => this.#status;\n\n  deleteShapes = (ids: string[]) => {\n    const payload = JSON.stringify({\n      event: WS_EVENTS.DELETE_SHAPES,\n      roomId: this.#roomId,\n      user: this.#userName,\n      userId: this.#userId,\n      value: ids,\n    });\n    this.ws?.send(payload);\n  };\n\n  updateShapes = (shapes: ShapeType | ShapeType[]) => {\n    let _shapes: ShapeType[] = [];\n    if (!Array.isArray(shapes)) {\n      _shapes = [shapes];\n    } else {\n      _shapes = shapes;\n    }\n    const payload = JSON.stringify({\n      event: WS_EVENTS.UPDATE_SHAPES,\n      roomId: this.#roomId,\n      user: this.#userName,\n      userId: this.#userId,\n      value: _shapes.map(shape =>\n        JSON.stringify(shape.getDeconstructedShapeData())\n      ),\n    });\n    this.ws?.send(payload);\n  };\n\n  connect = (\n    roomId: string,\n    userName: string = this.#userName,\n    url: string = this.#url,\n    port: string = this.#port\n  ) => {\n    this.updateStatus('connecting');\n    this.disconnect();\n    this.#createNewWebSocket();\n    this.#userName = userName;\n    this.#roomId = roomId;\n    this.#url = url;\n    this.#port = port;\n  };\n}\n"]}