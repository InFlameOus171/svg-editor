{"version":3,"file":"Tool.js","sourceRoot":"","sources":["../../../../src/util/Tools/Tool.ts"],"names":[],"mappings":"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","sourcesContent":["import { SVGEditor } from '../../components/organisms/SVGEditor';\r\nimport type { ShapeType } from '../../types/shapes.types';\r\nimport type { Coordinates, SVGParamsBase } from '../../types/types';\r\nimport {\r\n  highlightStyle,\r\n  textPlaceHolder,\r\n  Tools_List,\r\n} from '../helper/constants';\r\nimport { Pen } from '../Pen';\r\n\r\nexport abstract class Tool<T extends ShapeType, V extends ShapeType = T> {\r\n  drawLayer: HTMLCanvasElement;\r\n  previewLayer?: HTMLCanvasElement;\r\n  self: SVGEditor;\r\n  currentShape?: V;\r\n  allShapes: T[] = [];\r\n  shallWait: boolean = false;\r\n  drawContext: CanvasRenderingContext2D | null;\r\n  previewContext: CanvasRenderingContext2D | null;\r\n  previewPenConfig?: SVGParamsBase;\r\n  drawPenConfig: SVGParamsBase;\r\n  toolName?: Tools_List;\r\n  offset: Coordinates;\r\n  isDrawing: boolean = false;\r\n  previousCoordinates: [number, number] = [0, 0];\r\n  currentCoordinates: [number, number] = [0, 0];\r\n  onUpdateEditor: (shape: ShapeType | ShapeType[] | null) => void;\r\n  constructor(\r\n    drawLayer: HTMLCanvasElement,\r\n    self: SVGEditor,\r\n    onUpdateEditor: (shape: ShapeType | ShapeType[] | null) => void,\r\n    offset: Coordinates = [0, 0],\r\n    previewLayer?: HTMLCanvasElement,\r\n    drawPenConfig: SVGParamsBase = { text: textPlaceHolder },\r\n    previewPenConfig?: SVGParamsBase\r\n  ) {\r\n    this.drawLayer = drawLayer;\r\n    this.onUpdateEditor = onUpdateEditor;\r\n    this.self = self;\r\n    this.offset = offset ?? [drawLayer.offsetLeft, drawLayer.offsetTop];\r\n    this.previewLayer = previewLayer;\r\n    this.previewPenConfig = previewPenConfig ?? highlightStyle;\r\n    this.drawPenConfig = drawPenConfig;\r\n    this.previewContext = this.previewLayer?.getContext('2d') ?? null;\r\n    this.drawContext = this.drawLayer.getContext('2d');\r\n  }\r\n\r\n  setSVGParam = (field: keyof SVGParamsBase, value: any) => {\r\n    this.drawPenConfig[field] = value;\r\n  };\r\n\r\n  setSVGParams = (drawPenConfig: SVGParamsBase) => {\r\n    this.drawPenConfig = drawPenConfig;\r\n  };\r\n\r\n  resetPreview = () => {\r\n    if (this.previewLayer && this.previewContext) {\r\n      Pen.clearCanvas(this.previewLayer, this.previewContext);\r\n    }\r\n  };\r\n\r\n  resetView = () => {\r\n    if (this.drawLayer && this.drawContext) {\r\n      Pen.clearCanvas(this.drawLayer, this.drawContext);\r\n    }\r\n  };\r\n\r\n  resetCoordinates = () => {\r\n    this.previousCoordinates = [0, 0];\r\n    this.currentCoordinates = [0, 0];\r\n  };\r\n\r\n  highlightPreview = () => {\r\n    if (this.previewContext) {\r\n      this.previewContext.strokeStyle = 'red';\r\n      this.previewContext.setLineDash([10, 10]);\r\n      this.previewContext.lineWidth = 3;\r\n    }\r\n  };\r\n\r\n  unHighlightpreview = () => {\r\n    if (this.previewContext) {\r\n      this.previewContext.clearRect(0, 0, this.self.width, this.self.height);\r\n    }\r\n  };\r\n\r\n  updateShapeData = (newCoordinates: Coordinates): void => {\r\n    throw new Error('not implemented');\r\n  };\r\n\r\n  getCoords = (e: MouseEvent): [number, number] => {\r\n    return [e.offsetX - this.offset[0], e.offsetY - this.offset[1]];\r\n  };\r\n\r\n  #draw = (): void => {\r\n    throw new Error('not implemented');\r\n  };\r\n\r\n  executeAction = (): void => {\r\n    throw new Error('not implemented');\r\n  };\r\n  destroy = (): void => {\r\n    throw new Error('not implemented');\r\n  };\r\n}\r\n"]}