{"version":3,"file":"Tool.js","sourceRoot":"","sources":["../../../../src/util/tools/Tool.ts"],"names":[],"mappings":"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","sourcesContent":["import { SVGEditor } from '../../components/organisms/SVGEditor';\nimport type { ShapeType } from '../../types/shapes.types';\nimport type { Coordinates, SVGParamsBase } from '../../types/types';\nimport {\n  highlightStyle,\n  textPlaceHolder,\n  Tools_List,\n} from '../helper/constants';\nimport { Pen } from '../Pen';\n\nexport abstract class Tool<T extends ShapeType, V extends ShapeType = T> {\n  drawLayer: HTMLCanvasElement;\n  previewLayer?: HTMLCanvasElement;\n  self: SVGEditor;\n  currentShape?: V;\n  allShapes: T[] = [];\n  shallWait: boolean = false;\n  drawContext: CanvasRenderingContext2D | null;\n  previewContext: CanvasRenderingContext2D | null;\n  previewPenConfig?: SVGParamsBase;\n  drawPenConfig: SVGParamsBase;\n  toolName?: Tools_List;\n  offset: Coordinates;\n  isDrawing: boolean = false;\n  previousCoordinates: Coordinates = [0, 0];\n  currentCoordinates: Coordinates = [0, 0];\n  onUpdateEditor: (shape: ShapeType | ShapeType[] | null) => void;\n  constructor(\n    drawLayer: HTMLCanvasElement,\n    self: SVGEditor,\n    onUpdateEditor: (shape: ShapeType | ShapeType[] | null) => void,\n    offset: Coordinates = [0, 0],\n    previewLayer?: HTMLCanvasElement,\n    drawPenConfig: SVGParamsBase = { text: textPlaceHolder },\n    previewPenConfig?: SVGParamsBase\n  ) {\n    this.drawLayer = drawLayer;\n    this.onUpdateEditor = onUpdateEditor;\n    this.self = self;\n    this.offset = offset ?? [drawLayer.offsetLeft, drawLayer.offsetTop];\n    this.previewLayer = previewLayer;\n    this.previewPenConfig = previewPenConfig ?? highlightStyle;\n    this.drawPenConfig = drawPenConfig;\n    this.previewContext = this.previewLayer?.getContext('2d') ?? null;\n    this.drawContext = this.drawLayer.getContext('2d');\n  }\n\n  setSVGParam = (field: keyof SVGParamsBase, value: any) => {\n    this.drawPenConfig[field] = value;\n  };\n\n  setSVGParams = (drawPenConfig: SVGParamsBase) => {\n    this.drawPenConfig = drawPenConfig;\n  };\n\n  resetPreview = () => {\n    if (this.previewLayer && this.previewContext) {\n      Pen.clearCanvas(this.previewLayer, this.previewContext);\n    }\n  };\n\n  resetView = () => {\n    if (this.drawLayer && this.drawContext) {\n      Pen.clearCanvas(this.drawLayer, this.drawContext);\n    }\n  };\n\n  resetCoordinates = () => {\n    this.previousCoordinates = [0, 0];\n    this.currentCoordinates = [0, 0];\n  };\n\n  highlightPreview = () => {\n    if (this.previewContext) {\n      this.previewContext.strokeStyle = 'red';\n      this.previewContext.setLineDash([10, 10]);\n      this.previewContext.lineWidth = 3;\n    }\n  };\n\n  unHighlightpreview = () => {\n    if (this.previewContext) {\n      this.previewContext.clearRect(0, 0, this.self.width, this.self.height);\n    }\n  };\n\n  updateShapeData = (newCoordinates: Coordinates): void => {\n    throw new Error('not implemented');\n  };\n\n  getCoords = (e: MouseEvent): Coordinates => {\n    return [e.offsetX - this.offset[0], e.offsetY - this.offset[1]];\n  };\n\n  #draw = (): void => {\n    throw new Error('not implemented');\n  };\n\n  executeAction = (): void => {\n    throw new Error('not implemented');\n  };\n  destroy = (): void => {\n    throw new Error('not implemented');\n  };\n}\n"]}