import { FooterFields } from '../../components/molecules/FooterFields';
import { EditorTemplate } from '../../components/templates/EditorTemplate';
import type { ShapeType } from '../../types/typeGuards.types';
import type { Coordinates, SVGParamsBase } from '../../types/types';
import { Tools_List } from '../helper/constants';
export declare abstract class Tool<T extends ShapeType, V extends ShapeType = T> {
    drawLayer: HTMLCanvasElement;
    previewLayer?: HTMLCanvasElement;
    self: EditorTemplate;
    footerFields?: FooterFields;
    currentShape?: V;
    allShapes: T[];
    shallWait: boolean;
    drawContext: CanvasRenderingContext2D | null;
    previewContext: CanvasRenderingContext2D | null;
    previewPenConfig?: SVGParamsBase;
    drawPenConfig: SVGParamsBase;
    toolName?: Tools_List;
    offset: Coordinates;
    isDrawing: boolean;
    previousCoordinates: Coordinates;
    currentCoordinates: Coordinates;
    onUpdateEditor: (shape: ShapeType | ShapeType[] | null) => void;
    constructor(drawLayer: HTMLCanvasElement, self: EditorTemplate, onUpdateEditor: (shape: ShapeType | ShapeType[] | null) => void, offset: Coordinates | undefined, previewLayer: HTMLCanvasElement, drawPenConfig?: SVGParamsBase, previewPenConfig?: SVGParamsBase, footerFields?: FooterFields);
    setSVGParam: (field: keyof SVGParamsBase, value: any) => void;
    setSVGParams: (drawPenConfig: SVGParamsBase) => void;
    resetPreview: () => void;
    resetView: () => void;
    resetCoordinates: () => void;
    highlightPreview: () => void;
    unHighlightpreview: () => void;
    getCoords: (e: MouseEvent) => Coordinates;
    updateShapeData: (newCoordinates: Coordinates) => void;
    executeAction: () => void;
    destroy: () => void;
}
