{"version":3,"file":"EllipseTool.js","sourceRoot":"","sources":["../../../../src/util/Tools/EllipseTool.ts"],"names":[],"mappings":"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","sourcesContent":["import { SVGEditor } from '../../components/organisms/SVGEditor';\r\nimport type { ShapeType } from '../../types/shapes.types';\r\nimport { Coordinates, SVGParamsBase } from '../../types/types';\r\nimport { highlightStyle, Tools_List } from '../helper/constants';\r\nimport { Pen } from '../Pen';\r\nimport { Ellipse } from '../Shapes/Ellipse';\r\nimport { generateCircle, generateEllipse } from './EllipseTool.util';\r\nimport { Tool } from './Tool';\r\n\r\nexport class EllipseTool extends Tool<Ellipse> {\r\n  isCircle: boolean = false;\r\n\r\n  constructor(\r\n    drawLayer: HTMLCanvasElement,\r\n    previewLayer: HTMLCanvasElement,\r\n    self: SVGEditor,\r\n    onCreate: (shape: ShapeType | ShapeType[] | null) => void,\r\n    drawPenConfig: SVGParamsBase,\r\n    offset: Coordinates\r\n  ) {\r\n    super(\r\n      drawLayer,\r\n      self,\r\n      onCreate,\r\n      offset,\r\n      previewLayer,\r\n      drawPenConfig,\r\n      highlightStyle\r\n    );\r\n    this.resetPreview();\r\n    const renderingContext = this.drawLayer.getContext('2d');\r\n    if (renderingContext) {\r\n      this.drawContext = renderingContext;\r\n    }\r\n    this.toolName = Tools_List.ELLIPSE;\r\n  }\r\n\r\n  #draw = () => {\r\n    this.currentShape &&\r\n      Pen.drawEllipse(this.currentShape, this.drawContext, this.drawPenConfig);\r\n    this.resetPreview();\r\n  };\r\n\r\n  #onKeyDown = (event: KeyboardEvent) => {\r\n    if (event.ctrlKey) {\r\n      this.isCircle = true;\r\n    }\r\n  };\r\n\r\n  #onKeyUp = () => {\r\n    this.isCircle = false;\r\n  };\r\n\r\n  #onDown = (event: MouseEvent) => {\r\n    if (event.button !== 0) return;\r\n    this.isDrawing = true;\r\n    this.previousCoordinates = this.getCoords(event);\r\n  };\r\n\r\n  #onUp = (event: MouseEvent) => {\r\n    this.isDrawing = false;\r\n    this.currentCoordinates = this.getCoords(event);\r\n    if (this.isCircle) {\r\n      this.currentShape = generateCircle(\r\n        this.previousCoordinates,\r\n        this.currentCoordinates,\r\n        this.drawPenConfig\r\n      );\r\n    } else {\r\n      this.currentShape = generateEllipse(\r\n        this.previousCoordinates,\r\n        this.currentCoordinates,\r\n        this.drawPenConfig\r\n      );\r\n    }\r\n    this.onUpdateEditor(this.currentShape);\r\n    this.#draw();\r\n  };\r\n\r\n  #onMove = (event: MouseEvent) => {\r\n    this.currentCoordinates = this.getCoords(event);\r\n    this.resetPreview();\r\n\r\n    if (this.isDrawing && this.previewLayer) {\r\n      if (this.isCircle) {\r\n        const previewShape = generateCircle(\r\n          this.previousCoordinates,\r\n          this.currentCoordinates,\r\n          this.previewPenConfig,\r\n          false\r\n        );\r\n        this.currentShape = previewShape;\r\n        Pen.drawEllipse(previewShape, this.previewContext);\r\n      } else {\r\n        const previewShape = generateEllipse(\r\n          this.previousCoordinates,\r\n          this.currentCoordinates,\r\n          this.previewPenConfig,\r\n          false\r\n        );\r\n        this.currentShape = previewShape;\r\n        Pen.drawEllipse(previewShape, this.previewContext);\r\n      }\r\n    }\r\n  };\r\n\r\n  executeAction = () => {\r\n    this.drawLayer.addEventListener('mousemove', this.#onMove);\r\n    this.drawLayer.addEventListener('mousedown', this.#onDown);\r\n    this.drawLayer.addEventListener('mouseup', this.#onUp);\r\n    window.addEventListener('keydown', this.#onKeyDown);\r\n    window.addEventListener('keyup', this.#onKeyUp);\r\n  };\r\n\r\n  destroy = () => {\r\n    this.drawLayer.removeEventListener('mousemove', this.#onMove);\r\n    this.drawLayer.removeEventListener('mousedown', this.#onDown);\r\n    this.drawLayer.removeEventListener('mouseup', this.#onUp);\r\n    window.removeEventListener('keydown', this.#onKeyDown);\r\n    window.removeEventListener('keyup', this.#onKeyUp);\r\n  };\r\n}\r\n"]}