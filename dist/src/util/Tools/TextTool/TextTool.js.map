{"version":3,"file":"TextTool.js","sourceRoot":"","sources":["../../../../../src/util/tools/TextTool/TextTool.ts"],"names":[],"mappings":";;AAGA,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AACrE,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAClD,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAE,6BAA6B,EAAE,MAAM,iBAAiB,CAAC;AAChE,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAG/B,MAAM,OAAO,QAAS,SAAQ,IAAe;IAC3C,YACE,SAA4B,EAC5B,YAA+B,EAC/B,IAAoB,EACpB,QAAyD,EACzD,aAA4B,EAC5B,MAAoB,EACpB,YAA2B;QAE3B,KAAK,CACH,SAAS,EACT,IAAI,EACJ,QAAQ,EACR,MAAM,EACN,YAAY,EACZ,aAAa,EACb,SAAS,EACT,YAAY,CACb,CAAC;QAQJ,4BAAW,CAAC,KAAiB,EAAE,EAAE;;YAC/B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO;YAC/B,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACvC,IAAI,IAAI,CAAC,cAAc,KAAI,MAAA,IAAI,CAAC,aAAa,0CAAE,IAAI,CAAA,EAAE;gBACnD,MAAM,IAAI,GAAG,WAAW,CACtB,IAAI,CAAC,aAAa,CAAC,IAAI,EACvB;oBACE,IAAI,EAAE,eAAe;oBACrB,MAAM,EAAE,eAAe;oBACvB,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ;oBACrC,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,UAAU;iBAC1C,EACD,SAAS,EACT,IAAI,CAAC,WAAW,CACjB,CAAC;gBACF,IAAI,CAAC,YAAY,EAAE,CAAC;gBACpB,IAAI,IAAI,EAAE;oBACR,MAAM,KAAK,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,QAAQ,kBAC3D,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,UAAU,EACzC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,EACrC,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,IAC1B,IAAI,CAAC,aAAa,EACrB,CAAC;oBACH,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;iBAC5B;aACF;QACH,CAAC,EAAC;QAEF,eAAU,GAAG,CAAC,IAAY,EAAE,EAAE;YAC5B,IAAI,CAAC,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC;QACjC,CAAC,CAAC;QAEF,kBAAa,GAAG,GAAG,EAAE;YACnB,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,uBAAA,IAAI,yBAAS,CAAC,CAAC;QAC1D,CAAC,CAAC;QAEF,YAAO,GAAG,GAAG,EAAE;YACb,6BAA6B,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YACxD,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,OAAO,EAAE,uBAAA,IAAI,yBAAS,CAAC,CAAC;QAC7D,CAAC,CAAC;QA9CA,6BAA6B,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE;YAC5B,IAAI,CAAC,aAAa,CAAC,IAAI,GAAG,eAAe,CAAC;SAC3C;QACD,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC;IAClC,CAAC;CA0CF","sourcesContent":["import { EditorTemplate } from '../../../components/templates/EditorTemplate';\nimport type { ShapeType } from '../../../types/typeGuards.types';\nimport type { Coordinates, SVGParamsBase } from '../../../types/types';\nimport { textPlaceHolder, Tools_List } from '../../helper/constants';\nimport { measureText } from '../../helper/shapes';\nimport { TextShape } from '../../shapes/Text/Text';\nimport { setTextParamsSourceVisibility } from './TextTool.util';\nimport { Tool } from '../Tool';\nimport { FooterFields } from '../../../components/molecules/FooterFields';\n\nexport class TextTool extends Tool<TextShape> {\n  constructor(\n    drawLayer: HTMLCanvasElement,\n    previewLayer: HTMLCanvasElement,\n    self: EditorTemplate,\n    onCreate: (shape: ShapeType | ShapeType[] | null) => void,\n    currentStyles: SVGParamsBase,\n    offset?: Coordinates,\n    footerFields?: FooterFields\n  ) {\n    super(\n      drawLayer,\n      self,\n      onCreate,\n      offset,\n      previewLayer,\n      currentStyles,\n      undefined,\n      footerFields\n    );\n    setTextParamsSourceVisibility(footerFields, true);\n    if (!this.drawPenConfig.text) {\n      this.drawPenConfig.text = textPlaceHolder;\n    }\n    this.toolName = Tools_List.TEXT;\n  }\n\n  #onClick = (event: MouseEvent) => {\n    if (event.button !== 0) return;\n    const position = this.getCoords(event);\n    if (this.previewContext && this.drawPenConfig?.text) {\n      const size = measureText(\n        this.drawPenConfig.text,\n        {\n          fill: 'rgba(0,0,0,0)',\n          stroke: 'rgba(0,0,0,0)',\n          fontSize: this.drawPenConfig.fontSize,\n          fontFamily: this.drawPenConfig.fontFamily,\n        },\n        undefined,\n        this.drawContext\n      );\n      this.resetPreview();\n      if (size) {\n        const shape = new TextShape(size.width, size.height, position, {\n          fontFamily: this.drawPenConfig.fontFamily,\n          fontSize: this.drawPenConfig.fontSize,\n          text: this.drawPenConfig.text,\n          ...this.drawPenConfig,\n        });\n        this.onUpdateEditor(shape);\n      }\n    }\n  };\n\n  updateText = (text: string) => {\n    this.drawPenConfig.text = text;\n  };\n\n  executeAction = () => {\n    this.drawLayer.addEventListener('click', this.#onClick);\n  };\n\n  destroy = () => {\n    setTextParamsSourceVisibility(this.footerFields, false);\n    this.drawLayer.removeEventListener('click', this.#onClick);\n  };\n}\n"]}