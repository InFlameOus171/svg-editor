{"version":3,"file":"LineTool.js","sourceRoot":"","sources":["../../../../src/util/Tools/LineTool.ts"],"names":[],"mappings":"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","sourcesContent":["import { SVGEditor } from '../../components/organisms/SVGEditor';\r\nimport type { ShapeType } from '../../types/shapes.types';\r\nimport type { Coordinates, SVGParamsBase } from '../../types/types';\r\nimport { Tools_List } from '../helper/constants';\r\nimport { Pen } from '../Pen';\r\nimport { Line } from '../Shapes/Line';\r\nimport { Tool } from './Tool';\r\n\r\nexport class LineTool extends Tool<Line> {\r\n  constructor(\r\n    drawLayer: HTMLCanvasElement,\r\n    previewLayer: HTMLCanvasElement,\r\n    self: SVGEditor,\r\n    onCreate: (shape: ShapeType | ShapeType[] | null) => void,\r\n    drawPenConfig?: SVGParamsBase,\r\n    offset?: Coordinates\r\n  ) {\r\n    super(drawLayer, self, onCreate, offset, previewLayer, drawPenConfig);\r\n    this.resetPreview();\r\n    const renderingContext = this.drawLayer.getContext('2d');\r\n    if (renderingContext) {\r\n      this.drawContext = renderingContext;\r\n    }\r\n    this.toolName = Tools_List.LINE;\r\n  }\r\n\r\n  #draw = () => {\r\n    this.currentShape && Pen.drawLine(this.currentShape, this.drawContext);\r\n  };\r\n\r\n  #onDown = (event: MouseEvent) => {\r\n    if (event.button !== 0) return;\r\n    this.isDrawing = true;\r\n    this.highlightPreview();\r\n    this.previousCoordinates = this.getCoords(event);\r\n  };\r\n\r\n  #onUp = (event: MouseEvent) => {\r\n    this.isDrawing = false;\r\n    this.currentCoordinates = this.getCoords(event);\r\n    this.currentShape = new Line(\r\n      [this.previousCoordinates[0], this.previousCoordinates[1]],\r\n      [this.currentCoordinates[0], this.currentCoordinates[1]],\r\n      this.drawPenConfig\r\n    );\r\n    this.resetPreview();\r\n    this.unHighlightpreview();\r\n    this.#draw();\r\n    this.onUpdateEditor(this.currentShape);\r\n  };\r\n\r\n  #onMove = (event: MouseEvent) => {\r\n    if (this.isDrawing && this.previewLayer) {\r\n      this.resetPreview();\r\n      this.currentCoordinates = this.getCoords(event);\r\n      this.currentShape = new Line(\r\n        this.previousCoordinates,\r\n        this.currentCoordinates,\r\n        this.previewPenConfig,\r\n        false\r\n      );\r\n      Pen.drawLine(this.currentShape, this.previewContext);\r\n    }\r\n  };\r\n\r\n  executeAction = () => {\r\n    this.drawLayer.addEventListener('mousemove', this.#onMove);\r\n    this.drawLayer.addEventListener('mousedown', this.#onDown);\r\n    this.drawLayer.addEventListener('mouseup', this.#onUp);\r\n  };\r\n\r\n  destroy = () => {\r\n    this.drawLayer.removeEventListener('mousemove', this.#onMove);\r\n    this.drawLayer.removeEventListener('mousedown', this.#onDown);\r\n    this.drawLayer.removeEventListener('mouseup', this.#onUp);\r\n  };\r\n}\r\n"]}