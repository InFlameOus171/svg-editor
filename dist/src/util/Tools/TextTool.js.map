{"version":3,"file":"TextTool.js","sourceRoot":"","sources":["../../../../src/util/Tools/TextTool.ts"],"names":[],"mappings":";;AAGA,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AAClE,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,6BAA6B,EAAE,MAAM,iBAAiB,CAAC;AAChE,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B,MAAM,OAAO,QAAS,SAAQ,IAAe;IAC3C,YACE,SAA4B,EAC5B,YAA+B,EAC/B,IAAe,EACf,QAAyD,EACzD,aAA4B,EAC5B,MAAoB;QAEpB,KAAK,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;QAQxE,4BAAW,CAAC,KAAiB,EAAE,EAAE;;YAC/B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO;YAC/B,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACvC,IAAI,IAAI,CAAC,cAAc,KAAI,MAAA,IAAI,CAAC,aAAa,0CAAE,IAAI,CAAA,EAAE;gBACnD,MAAM,IAAI,GAAG,WAAW,CACtB,IAAI,CAAC,aAAa,CAAC,IAAI,EACvB;oBACE,IAAI,EAAE,eAAe;oBACrB,MAAM,EAAE,eAAe;oBACvB,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ;oBACrC,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,UAAU;iBAC1C,EACD,SAAS,EACT,IAAI,CAAC,WAAW,CACjB,CAAC;gBACF,IAAI,CAAC,YAAY,EAAE,CAAC;gBACpB,IAAI,IAAI,EAAE;oBACR,MAAM,KAAK,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,QAAQ,kBAC3D,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,UAAU,EACzC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,EACrC,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,IAC1B,IAAI,CAAC,aAAa,EACrB,CAAC;oBACH,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;iBAC5B;aACF;QACH,CAAC,EAAC;QAEF,eAAU,GAAG,CAAC,IAAY,EAAE,EAAE;YAC5B,IAAI,CAAC,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC;QACjC,CAAC,CAAC;QAEF,kBAAa,GAAG,GAAG,EAAE;YACnB,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,uBAAA,IAAI,yBAAS,CAAC,CAAC;QAC1D,CAAC,CAAC;QAEF,YAAO,GAAG,GAAG,EAAE;YACb,6BAA6B,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAChD,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,OAAO,EAAE,uBAAA,IAAI,yBAAS,CAAC,CAAC;QAC7D,CAAC,CAAC;QA9CA,6BAA6B,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE;YAC5B,IAAI,CAAC,aAAa,CAAC,IAAI,GAAG,eAAe,CAAC;SAC3C;QACD,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC;IAClC,CAAC;CA0CF","sourcesContent":["import { SVGEditor } from '../../components/organisms/SVGEditor';\r\nimport type { ShapeType } from '../../types/shapes.types';\r\nimport type { Coordinates, SVGParamsBase } from '../../types/types';\r\nimport { textPlaceHolder, Tools_List } from '../helper/constants';\r\nimport { measureText } from '../helper/domUtil';\r\nimport { TextShape } from '../Shapes/Text';\r\nimport { setTextParamsSourceVisibility } from './TextTool.util';\r\nimport { Tool } from './Tool';\r\n\r\nexport class TextTool extends Tool<TextShape> {\r\n  constructor(\r\n    drawLayer: HTMLCanvasElement,\r\n    previewLayer: HTMLCanvasElement,\r\n    self: SVGEditor,\r\n    onCreate: (shape: ShapeType | ShapeType[] | null) => void,\r\n    currentStyles: SVGParamsBase,\r\n    offset?: Coordinates\r\n  ) {\r\n    super(drawLayer, self, onCreate, offset, previewLayer, currentStyles);\r\n    setTextParamsSourceVisibility(self, true);\r\n    if (!this.drawPenConfig.text) {\r\n      this.drawPenConfig.text = textPlaceHolder;\r\n    }\r\n    this.toolName = Tools_List.TEXT;\r\n  }\r\n\r\n  #onClick = (event: MouseEvent) => {\r\n    if (event.button !== 0) return;\r\n    const position = this.getCoords(event);\r\n    if (this.previewContext && this.drawPenConfig?.text) {\r\n      const size = measureText(\r\n        this.drawPenConfig.text,\r\n        {\r\n          fill: 'rgba(0,0,0,0)',\r\n          stroke: 'rgba(0,0,0,0)',\r\n          fontSize: this.drawPenConfig.fontSize,\r\n          fontFamily: this.drawPenConfig.fontFamily,\r\n        },\r\n        undefined,\r\n        this.drawContext\r\n      );\r\n      this.resetPreview();\r\n      if (size) {\r\n        const shape = new TextShape(size.width, size.height, position, {\r\n          fontFamily: this.drawPenConfig.fontFamily,\r\n          fontSize: this.drawPenConfig.fontSize,\r\n          text: this.drawPenConfig.text,\r\n          ...this.drawPenConfig,\r\n        });\r\n        this.onUpdateEditor(shape);\r\n      }\r\n    }\r\n  };\r\n\r\n  updateText = (text: string) => {\r\n    this.drawPenConfig.text = text;\r\n  };\r\n\r\n  executeAction = () => {\r\n    this.drawLayer.addEventListener('click', this.#onClick);\r\n  };\r\n\r\n  destroy = () => {\r\n    setTextParamsSourceVisibility(this.self, false);\r\n    this.drawLayer.removeEventListener('click', this.#onClick);\r\n  };\r\n}\r\n"]}