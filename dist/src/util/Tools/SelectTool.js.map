{"version":3,"file":"SelectTool.js","sourceRoot":"","sources":["../../../../src/util/Tools/SelectTool.ts"],"names":[],"mappings":"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","sourcesContent":["import { SVGEditor } from '../../components/organisms/SVGEditor';\r\nimport type { ShapeType } from '../../types/shapes.types';\r\nimport type { Coordinates, SVGParamsBase } from '../../types/types';\r\nimport { highlightStyle, Tools_List } from '../helper/constants';\r\nimport {\r\n  getCanvasRectangleValuesFromPoints,\r\n  isPointInsideAnotherShape,\r\n  isShapeInsideAnotherShape,\r\n  rectangleParamsFromBoundaries,\r\n} from '../helper/coordinates';\r\nimport { isText, typeOfShape } from '../helper/typeguards';\r\nimport { Pen } from '../Pen';\r\nimport { Rectangle } from '../Shapes/Rectangle';\r\nimport { setTextParamsSourceVisibility } from './TextTool.util';\r\nimport { Tool } from './Tool';\r\n\r\nexport class SelectTool extends Tool<ShapeType> {\r\n  constructor(\r\n    drawLayer: HTMLCanvasElement,\r\n    previewLayer: HTMLCanvasElement,\r\n    self: SVGEditor,\r\n    onSelect: (shape: ShapeType | ShapeType[] | null) => void,\r\n    shapes: ShapeType[],\r\n    offset?: Coordinates\r\n  ) {\r\n    super(drawLayer, self, onSelect, offset, previewLayer);\r\n    this.allShapes = shapes;\r\n    this.previewContext && this.previewContext.setLineDash([10, 10]);\r\n    this.#drawOnPreview = Pen.generatePen(this.previewContext).draw;\r\n    this.toolName = Tools_List.SELECT;\r\n  }\r\n  #drawOnPreview: (shape: ShapeType, svgParams?: SVGParamsBase) => void;\r\n\r\n  updateAllShapes = (shapes: ShapeType[] = []) => {\r\n    this.allShapes = shapes;\r\n  };\r\n\r\n  #onClick = (event: MouseEvent) => {\r\n    this.currentCoordinates = this.getCoords(event);\r\n    const pointPositionCompareFunction = isPointInsideAnotherShape(\r\n      this.currentCoordinates\r\n    );\r\n    const selectableShapes: ShapeType[] = this.allShapes.filter(shape => {\r\n      return pointPositionCompareFunction(shape) && !shape.isLocked;\r\n    });\r\n    if (!selectableShapes.length) {\r\n      this.currentShape = undefined;\r\n      this.updatePreview();\r\n      return;\r\n    }\r\n\r\n    const selectedShape = selectableShapes?.reduce((acc, shape) =>\r\n      shape.index > acc?.index ? acc : shape\r\n    );\r\n    this.currentShape = selectedShape;\r\n    this.updatePreview();\r\n  };\r\n\r\n  #onDown = (event: MouseEvent) => {\r\n    if (event.button !== 0) return;\r\n    this.unHighlightpreview();\r\n    this.currentShape = undefined;\r\n    this.currentCoordinates = this.getCoords(event);\r\n    this.previousCoordinates = this.currentCoordinates;\r\n    this.isDrawing = true;\r\n  };\r\n\r\n  updatePreview = () => {\r\n    if (this.currentShape) {\r\n      this.resetPreview();\r\n      const { startingCorner, width, height } = rectangleParamsFromBoundaries(\r\n        this.currentShape.boundaries\r\n      );\r\n\r\n      if (isText(this.currentShape)) {\r\n        setTextParamsSourceVisibility(this.self, true);\r\n        this.#drawOnPreview(this.currentShape, {\r\n          ...this.currentShape.getSvgParams(),\r\n          ...highlightStyle,\r\n          lineDash: [0],\r\n        });\r\n      } else {\r\n        this.#drawOnPreview(this.currentShape, highlightStyle);\r\n        this.#drawOnPreview(\r\n          new Rectangle(startingCorner, width, height, highlightStyle, false)\r\n        );\r\n      }\r\n    } else {\r\n      this.resetPreview();\r\n    }\r\n  };\r\n  #onZoneSelection = (selectedZone?: Rectangle) => {\r\n    const compareFunction = isShapeInsideAnotherShape(selectedZone);\r\n    const selectableShapes: ShapeType[] = this.allShapes.filter(shape => {\r\n      return !shape.isLocked;\r\n    });\r\n    const shapesInsideSelectedZone = selectableShapes.filter(compareFunction);\r\n    const highestIndex = Math.max(\r\n      ...shapesInsideSelectedZone.map(shape => shape.index)\r\n    );\r\n    const highestShape = shapesInsideSelectedZone.find(\r\n      shape => shape.index === highestIndex\r\n    );\r\n    const shapeType = highestShape && typeOfShape(highestShape);\r\n    if (shapeType && this.previewContext) {\r\n      this.currentShape = highestShape;\r\n      this.updatePreview();\r\n    } else {\r\n      this.currentShape = undefined;\r\n    }\r\n  };\r\n\r\n  #onUp = (event: MouseEvent) => {\r\n    this.resetPreview();\r\n    this.isDrawing = false;\r\n    if (this.currentShape) {\r\n      this.#onZoneSelection(this.currentShape as Rectangle);\r\n    } else {\r\n      this.#onClick(event);\r\n    }\r\n    this.onUpdateEditor(this.currentShape ?? null);\r\n  };\r\n\r\n  #onMove = (event: MouseEvent) => {\r\n    if (this.isDrawing && this.previewLayer) {\r\n      this.currentCoordinates = this.getCoords(event);\r\n      const { startingCorner, width, height } =\r\n        getCanvasRectangleValuesFromPoints(\r\n          this.previousCoordinates,\r\n          this.currentCoordinates\r\n        );\r\n      this.currentShape = new Rectangle(\r\n        startingCorner,\r\n        width,\r\n        height,\r\n        highlightStyle,\r\n        false\r\n      );\r\n      if (this.currentShape) {\r\n        this.resetPreview();\r\n        Pen.drawRectangle(this.currentShape as Rectangle, this.previewContext);\r\n      }\r\n    }\r\n  };\r\n\r\n  changeStyle = (config: SVGParamsBase) => {\r\n    if (this.currentShape) {\r\n      this.currentShape.updateSVGParams(config);\r\n      this.resetPreview();\r\n      this.updatePreview();\r\n    }\r\n  };\r\n\r\n  executeAction = () => {\r\n    this.drawLayer.addEventListener('mousemove', this.#onMove);\r\n    this.drawLayer.addEventListener('mousedown', this.#onDown);\r\n    this.drawLayer.addEventListener('mouseup', this.#onUp);\r\n  };\r\n\r\n  destroy = () => {\r\n    this.drawLayer.removeEventListener('mousemove', this.#onMove);\r\n    this.drawLayer.removeEventListener('mousedown', this.#onDown);\r\n    this.drawLayer.removeEventListener('mouseup', this.#onUp);\r\n  };\r\n}\r\n"]}