{"version":3,"file":"RectangleTool.js","sourceRoot":"","sources":["../../../../../src/util/tools/RectangleTool/RectangleTool.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AACpD,OAAO,EAAE,kCAAkC,EAAE,MAAM,0BAA0B,CAAC;AAC9E,OAAO,EAAE,GAAG,EAAE,MAAM,WAAW,CAAC;AAChC,OAAO,EAAE,SAAS,EAAE,MAAM,kCAAkC,CAAC;AAC7D,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAC/B,OAAO,EAAE,qCAAqC,EAAE,MAAM,sBAAsB,CAAC;AAE7E,MAAM,OAAO,aAAc,SAAQ,IAAe;IAChD,YACE,SAA4B,EAC5B,YAA+B,EAC/B,IAAe,EACf,QAAyD,EACzD,MAAqB,EACrB,MAAmB;QAEnB,KAAK,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;QASjE,kBAAa,GAAG,GAAG,EAAE;YACnB,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1D,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1D,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC;QAEF,YAAO,GAAG,GAAG,EAAE;YACb,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC7D,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC7D,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC;QAEF,WAAM,GAAG,CAAC,KAAiB,EAAE,EAAE;YAC7B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO;YAC/B,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAChD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,kBAAkB,CAAC;YACnD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACxB,CAAC,CAAC;QAEF,SAAI,GAAG,GAAG,EAAE;YACV,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,IAAI,CAAC,YAAY,EAAE;gBACrB,IAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aACxC;YACD,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC,CAAC;QAEF,mDAAmD;QACnD,oBAAe,GAAG,GAAG,EAAE;YACrB,MAAM,EAAE,cAAc,EAAE,KAAK,EAAE,MAAM,EAAE,GACrC,qCAAqC,CACnC,IAAI,CAAC,mBAAmB,EACxB,IAAI,CAAC,kBAAkB,CACxB,CAAC;YACJ,IAAI,CAAC,YAAY,GAAG,IAAI,SAAS,CAC/B,cAAc,EACd,KAAK,EACL,MAAM,EACN,IAAI,CAAC,aAAa,CACnB,CAAC;QACJ,CAAC,CAAC;QAEF,2BAAsB,GAAG,GAAG,EAAE;YAC5B,MAAM,EAAE,cAAc,EAAE,KAAK,EAAE,MAAM,EAAE,GACrC,kCAAkC,CAChC,IAAI,CAAC,mBAAmB,EACxB,IAAI,CAAC,kBAAkB,CACxB,CAAC;YACJ,IAAI,CAAC,YAAY,GAAG,IAAI,SAAS,CAC/B,cAAc,EACd,KAAK,EACL,MAAM,EACN,IAAI,CAAC,gBAAgB,EACrB,KAAK,CACN,CAAC;QACJ,CAAC,CAAC;QAEF,WAAM,GAAG,CAAC,KAAiB,EAAE,EAAE;YAC7B,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBAChD,IAAI,CAAC,sBAAsB,EAAE,CAAC;gBAC9B,IAAI,IAAI,CAAC,YAAY,EAAE;oBACrB,IAAI,CAAC,YAAY,EAAE,CAAC;oBACpB,GAAG,CAAC,aAAa,CACf,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,gBAAgB,CACtB,CAAC;iBACH;aACF;QACH,CAAC,CAAC;QAlFA,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,MAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACzD,IAAI,gBAAgB,EAAE;YACpB,IAAI,CAAC,WAAW,GAAG,gBAAgB,CAAC;SACrC;QACD,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC;IAClC,CAAC;CA6EF","sourcesContent":["import { SVGEditor } from '../../../components/organisms/SVGEditor';\nimport type { ShapeType } from '../../../types/shapes.types';\nimport type { Coordinates, SVGParamsBase } from '../../../types/types';\nimport { Tools_List } from '../../helper/constants';\nimport { getCanvasRectangleValuesFromPoints } from '../../helper/coordinates';\nimport { Pen } from '../../Pen';\nimport { Rectangle } from '../../shapes/Rectangle/Rectangle';\nimport { Tool } from '../Tool';\nimport { getFormattedRectangleValuesFromPoints } from './RectangleTool.util';\n\nexport class RectangleTool extends Tool<Rectangle> {\n  constructor(\n    drawLayer: HTMLCanvasElement,\n    previewLayer: HTMLCanvasElement,\n    self: SVGEditor,\n    onCreate: (shape: ShapeType | ShapeType[] | null) => void,\n    styles: SVGParamsBase,\n    offset: Coordinates\n  ) {\n    super(drawLayer, self, onCreate, offset, previewLayer, styles);\n    this.resetPreview();\n    const renderingContext = this.drawLayer.getContext('2d');\n    if (renderingContext) {\n      this.drawContext = renderingContext;\n    }\n    this.toolName = Tools_List.RECT;\n  }\n\n  executeAction = () => {\n    this.drawLayer.addEventListener('mousemove', this.onMove);\n    this.drawLayer.addEventListener('mousedown', this.onDown);\n    this.drawLayer.addEventListener('mouseup', this.onUp);\n  };\n\n  destroy = () => {\n    this.drawLayer.removeEventListener('mousemove', this.onMove);\n    this.drawLayer.removeEventListener('mousedown', this.onDown);\n    this.drawLayer.removeEventListener('mouseup', this.onUp);\n  };\n\n  onDown = (event: MouseEvent) => {\n    if (event.button !== 0) return;\n    this.highlightPreview();\n    this.currentCoordinates = this.getCoords(event);\n    this.previousCoordinates = this.currentCoordinates;\n    this.isDrawing = true;\n  };\n\n  onUp = () => {\n    this.resetPreview();\n    this.resetView();\n    this.isDrawing = false;\n    if (this.currentShape) {\n      this.createRectangle();\n      this.onUpdateEditor(this.currentShape);\n    }\n    this.resetCoordinates();\n  };\n\n  // TODO - Doppelte funktionen zusammenführen/kürzen\n  createRectangle = () => {\n    const { startingCorner, width, height } =\n      getFormattedRectangleValuesFromPoints(\n        this.previousCoordinates,\n        this.currentCoordinates\n      );\n    this.currentShape = new Rectangle(\n      startingCorner,\n      width,\n      height,\n      this.drawPenConfig\n    );\n  };\n\n  createRectanglePreview = () => {\n    const { startingCorner, width, height } =\n      getCanvasRectangleValuesFromPoints(\n        this.previousCoordinates,\n        this.currentCoordinates\n      );\n    this.currentShape = new Rectangle(\n      startingCorner,\n      width,\n      height,\n      this.previewPenConfig,\n      false\n    );\n  };\n\n  onMove = (event: MouseEvent) => {\n    if (this.isDrawing) {\n      this.currentCoordinates = this.getCoords(event);\n      this.createRectanglePreview();\n      if (this.currentShape) {\n        this.resetPreview();\n        Pen.drawRectangle(\n          this.currentShape,\n          this.previewContext,\n          this.previewPenConfig\n        );\n      }\n    }\n  };\n}\n"]}