{"version":3,"file":"LineTool.js","sourceRoot":"","sources":["../../../../../src/util/tools/LineTool/LineTool.ts"],"names":[],"mappings":";;AAGA,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AACpD,OAAO,EAAE,GAAG,EAAE,MAAM,WAAW,CAAC;AAChC,OAAO,EAAE,IAAI,EAAE,MAAM,wBAAwB,CAAC;AAC9C,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAE/B,MAAM,OAAO,QAAS,SAAQ,IAAU;IACtC,YACE,SAA4B,EAC5B,YAA+B,EAC/B,IAAoB,EACpB,QAAyD,EACzD,aAA6B,EAC7B,MAAoB;QAEpB,KAAK,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;QASxE,yBAAQ,GAAG,EAAE;YACX,IAAI,CAAC,YAAY,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACzE,CAAC,EAAC;QAEF,2BAAU,CAAC,KAAiB,EAAE,EAAE;YAC9B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO;YAC/B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACnD,CAAC,EAAC;QAEF,yBAAQ,CAAC,KAAiB,EAAE,EAAE;YAC5B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAChD,IAAI,CAAC,YAAY,GAAG,IAAI,IAAI,CAC1B,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,EAC1D,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,EACxD,IAAI,CAAC,aAAa,CACnB,CAAC;YACF,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,uBAAA,IAAI,sBAAM,MAAV,IAAI,CAAQ,CAAC;YACb,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACzC,CAAC,EAAC;QAEF,2BAAU,CAAC,KAAiB,EAAE,EAAE;YAC9B,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,YAAY,EAAE;gBACvC,IAAI,CAAC,YAAY,EAAE,CAAC;gBACpB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBAChD,IAAI,CAAC,YAAY,GAAG,IAAI,IAAI,CAC1B,IAAI,CAAC,mBAAmB,EACxB,IAAI,CAAC,kBAAkB,EACvB,IAAI,CAAC,gBAAgB,EACrB,KAAK,CACN,CAAC;gBACF,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;aACtD;QACH,CAAC,EAAC;QACF,0BAAS,GAAG,EAAE;YACZ,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACzB,CAAC,EAAC;QAEF,kBAAa,GAAG,GAAG,EAAE;YACnB,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,WAAW,EAAE,uBAAA,IAAI,wBAAQ,CAAC,CAAC;YAC3D,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,WAAW,EAAE,uBAAA,IAAI,wBAAQ,CAAC,CAAC;YAC3D,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,UAAU,EAAE,uBAAA,IAAI,uBAAO,CAAC,CAAC;YACzD,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,uBAAA,IAAI,sBAAM,CAAC,CAAC;QACzD,CAAC,CAAC;QAEF,YAAO,GAAG,GAAG,EAAE;YACb,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,WAAW,EAAE,uBAAA,IAAI,wBAAQ,CAAC,CAAC;YAC9D,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,WAAW,EAAE,uBAAA,IAAI,wBAAQ,CAAC,CAAC;YAC9D,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,UAAU,EAAE,uBAAA,IAAI,uBAAO,CAAC,CAAC;YAC5D,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,SAAS,EAAE,uBAAA,IAAI,sBAAM,CAAC,CAAC;QAC5D,CAAC,CAAC;QA9DA,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,MAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACzD,IAAI,gBAAgB,EAAE;YACpB,IAAI,CAAC,WAAW,GAAG,gBAAgB,CAAC;SACrC;QACD,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC;IAClC,CAAC;CAyDF","sourcesContent":["import { EditorTemplate } from '../../../components/templates/EditorTemplate';\nimport type { ShapeType } from '../../../types/typeGuards.types';\nimport type { Coordinates, SVGParamsBase } from '../../../types/types';\nimport { Tools_List } from '../../helper/constants';\nimport { Pen } from '../../Pen';\nimport { Line } from '../../shapes/Line/Line';\nimport { Tool } from '../Tool';\n\nexport class LineTool extends Tool<Line> {\n  constructor(\n    drawLayer: HTMLCanvasElement,\n    previewLayer: HTMLCanvasElement,\n    self: EditorTemplate,\n    onCreate: (shape: ShapeType | ShapeType[] | null) => void,\n    drawPenConfig?: SVGParamsBase,\n    offset?: Coordinates\n  ) {\n    super(drawLayer, self, onCreate, offset, previewLayer, drawPenConfig);\n    this.resetPreview();\n    const renderingContext = this.drawLayer.getContext('2d');\n    if (renderingContext) {\n      this.drawContext = renderingContext;\n    }\n    this.toolName = Tools_List.LINE;\n  }\n\n  #draw = () => {\n    this.currentShape && Pen.drawLine(this.currentShape, this.drawContext);\n  };\n\n  #onDown = (event: MouseEvent) => {\n    if (event.button !== 0) return;\n    this.isDrawing = true;\n    this.highlightPreview();\n    this.previousCoordinates = this.getCoords(event);\n  };\n\n  #onUp = (event: MouseEvent) => {\n    this.isDrawing = false;\n    this.currentCoordinates = this.getCoords(event);\n    this.currentShape = new Line(\n      [this.previousCoordinates[0], this.previousCoordinates[1]],\n      [this.currentCoordinates[0], this.currentCoordinates[1]],\n      this.drawPenConfig\n    );\n    this.resetPreview();\n    this.unHighlightpreview();\n    this.#draw();\n    this.onUpdateEditor(this.currentShape);\n  };\n\n  #onMove = (event: MouseEvent) => {\n    if (this.isDrawing && this.previewLayer) {\n      this.resetPreview();\n      this.currentCoordinates = this.getCoords(event);\n      this.currentShape = new Line(\n        this.previousCoordinates,\n        this.currentCoordinates,\n        this.previewPenConfig,\n        false\n      );\n      Pen.drawLine(this.currentShape, this.previewContext);\n    }\n  };\n  #onOut = () => {\n    this.isDrawing = false;\n  };\n\n  executeAction = () => {\n    this.drawLayer.addEventListener('mousemove', this.#onMove);\n    this.drawLayer.addEventListener('mousedown', this.#onDown);\n    this.drawLayer.addEventListener('mouseout', this.#onOut);\n    this.drawLayer.addEventListener('mouseup', this.#onUp);\n  };\n\n  destroy = () => {\n    this.drawLayer.removeEventListener('mousemove', this.#onMove);\n    this.drawLayer.removeEventListener('mousedown', this.#onDown);\n    this.drawLayer.removeEventListener('mouseout', this.#onOut);\n    this.drawLayer.removeEventListener('mouseup', this.#onUp);\n  };\n}\n"]}