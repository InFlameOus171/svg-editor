{"version":3,"file":"EllipseTool.util.js","sourceRoot":"","sources":["../../../../src/util/Tools/EllipseTool.util.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,8BAA8B,EAAE,MAAM,uBAAuB,CAAC;AACvE,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAE5C,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,gBAA6B,EAC7B,cAA2B,EAC3B,SAAkC,EAClC,iBAA2B,EAC3B,EAAE;IACF,MAAM,MAAM,GAAgB;QAC1B,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;QAC7C,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;KAC9C,CAAC;IACF,MAAM,OAAO,GAAG,8BAA8B,CAAC,MAAM,EAAE;QACrD,cAAc,CAAC,CAAC,CAAC;QACjB,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;KAC9C,CAAC,CAAC;IACH,MAAM,OAAO,GAAG,8BAA8B,CAAC,MAAM,EAAE;QACrD,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;QAC7C,cAAc,CAAC,CAAC,CAAC;KAClB,CAAC,CAAC;IACH,OAAO,IAAI,OAAO,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,iBAAiB,CAAC,CAAC;AAC7E,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,gBAA6B,EAC7B,cAA2B,EAC3B,SAAkC,EAClC,iBAA2B,EAC3B,EAAE;IACF,MAAM,MAAM,GAAgB,gBAAgB,CAAC;IAC7C,MAAM,MAAM,GAAG,8BAA8B,CAC3C,gBAAgB,EAChB,cAAc,CACf,CAAC;IACF,OAAO,IAAI,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,iBAAiB,CAAC,CAAC;AAC3E,CAAC,CAAC","sourcesContent":["import type { SVGParamsBase, Coordinates } from '../../types/types';\nimport { calculateDistanceBetweenPoints } from '../helper/coordinates';\nimport { Ellipse } from '../Shapes/Ellipse';\n\nexport const generateEllipse = (\n  startCoordinates: Coordinates,\n  endCoordinates: Coordinates,\n  svgParams?: Partial<SVGParamsBase>,\n  countShapecountUp?: boolean\n) => {\n  const center: Coordinates = [\n    (startCoordinates[0] + endCoordinates[0]) / 2,\n    (startCoordinates[1] + endCoordinates[1]) / 2,\n  ];\n  const radiusX = calculateDistanceBetweenPoints(center, [\n    endCoordinates[0],\n    (startCoordinates[1] + endCoordinates[1]) / 2,\n  ]);\n  const radiusY = calculateDistanceBetweenPoints(center, [\n    (startCoordinates[0] + endCoordinates[0]) / 2,\n    endCoordinates[1],\n  ]);\n  return new Ellipse(center, radiusX, radiusY, svgParams, countShapecountUp);\n};\n\nexport const generateCircle = (\n  startCoordinates: Coordinates,\n  endCoordinates: Coordinates,\n  svgParams?: Partial<SVGParamsBase>,\n  countShapecountUp?: boolean\n) => {\n  const center: Coordinates = startCoordinates;\n  const radius = calculateDistanceBetweenPoints(\n    startCoordinates,\n    endCoordinates\n  );\n  return new Ellipse(center, radius, radius, svgParams, countShapecountUp);\n};\n"]}