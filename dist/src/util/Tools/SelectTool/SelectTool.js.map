{"version":3,"file":"SelectTool.js","sourceRoot":"","sources":["../../../../../src/util/tools/SelectTool/SelectTool.ts"],"names":[],"mappings":"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","sourcesContent":["import { SVGEditor } from '../../../components/organisms/SVGEditor';\nimport type { ShapeType } from '../../../types/shapes.types';\nimport type { Coordinates, SVGParamsBase } from '../../../types/types';\nimport { highlightStyle, Tools_List } from '../../helper/constants';\nimport {\n  getCanvasRectangleValuesFromPoints,\n  isPointInsideAnotherShape,\n  isShapeInsideAnotherShape,\n  rectangleParamsFromBoundaries,\n} from '../../helper/coordinates';\nimport { isText, typeOfShape } from '../../helper/typeguards';\nimport { Pen } from '../../Pen';\nimport { Rectangle } from '../../shapes/Rectangle/Rectangle';\nimport { setTextParamsSourceVisibility } from '../TextTool/TextTool.util';\nimport { Tool } from '../Tool';\n\nexport class SelectTool extends Tool<ShapeType> {\n  constructor(\n    drawLayer: HTMLCanvasElement,\n    previewLayer: HTMLCanvasElement,\n    self: SVGEditor,\n    onSelect: (shape: ShapeType | ShapeType[] | null) => void,\n    shapes: ShapeType[],\n    offset?: Coordinates\n  ) {\n    super(drawLayer, self, onSelect, offset, previewLayer);\n    this.allShapes = shapes;\n    this.previewContext && this.previewContext.setLineDash([10, 10]);\n    this.#drawOnPreview = Pen.generatePen(this.previewContext).draw;\n    this.toolName = Tools_List.SELECT;\n  }\n  #drawOnPreview: (shape: ShapeType, svgParams?: SVGParamsBase) => void;\n\n  updateAllShapes = (shapes: ShapeType[] = []) => {\n    this.allShapes = shapes;\n  };\n\n  #onClick = (event: MouseEvent) => {\n    this.currentCoordinates = this.getCoords(event);\n    const pointPositionCompareFunction = isPointInsideAnotherShape(\n      this.currentCoordinates\n    );\n    const selectableShapes: ShapeType[] = this.allShapes.filter(shape => {\n      return pointPositionCompareFunction(shape) && !shape.isLocked;\n    });\n    if (!selectableShapes.length) {\n      this.currentShape = undefined;\n      this.updatePreview();\n      return;\n    }\n\n    const selectedShape = selectableShapes?.reduce((acc, shape) =>\n      shape.index > acc?.index ? acc : shape\n    );\n    this.currentShape = selectedShape;\n    this.updatePreview();\n  };\n\n  #onDown = (event: MouseEvent) => {\n    if (event.button !== 0) return;\n    this.unHighlightpreview();\n    this.currentShape = undefined;\n    this.currentCoordinates = this.getCoords(event);\n    this.previousCoordinates = this.currentCoordinates;\n    this.isDrawing = true;\n  };\n\n  updatePreview = () => {\n    if (this.currentShape) {\n      this.resetPreview();\n      const { startingCorner, width, height } = rectangleParamsFromBoundaries(\n        this.currentShape.boundaries\n      );\n\n      if (isText(this.currentShape)) {\n        setTextParamsSourceVisibility(this.self, true);\n        this.#drawOnPreview(this.currentShape, {\n          ...this.currentShape.getSvgParams(),\n          ...highlightStyle,\n          lineDash: [0],\n        });\n      } else {\n        this.#drawOnPreview(this.currentShape, highlightStyle);\n        this.#drawOnPreview(\n          new Rectangle(startingCorner, width, height, highlightStyle, false)\n        );\n      }\n    } else {\n      this.resetPreview();\n    }\n  };\n  #onZoneSelection = (selectedZone?: Rectangle) => {\n    const compareFunction = isShapeInsideAnotherShape(selectedZone);\n    const selectableShapes: ShapeType[] = this.allShapes.filter(shape => {\n      return !shape.isLocked;\n    });\n    const shapesInsideSelectedZone = selectableShapes.filter(compareFunction);\n    const highestIndex = Math.max(\n      ...shapesInsideSelectedZone.map(shape => shape.index)\n    );\n    const highestShape = shapesInsideSelectedZone.find(\n      shape => shape.index === highestIndex\n    );\n    const shapeType = highestShape && typeOfShape(highestShape);\n    if (shapeType && this.previewContext) {\n      this.currentShape = highestShape;\n      this.updatePreview();\n    } else {\n      this.currentShape = undefined;\n    }\n  };\n\n  #onUp = (event: MouseEvent) => {\n    this.resetPreview();\n    this.isDrawing = false;\n    if (this.currentShape) {\n      this.#onZoneSelection(this.currentShape as Rectangle);\n    } else {\n      this.#onClick(event);\n    }\n    this.onUpdateEditor(this.currentShape ?? null);\n  };\n\n  #onMove = (event: MouseEvent) => {\n    if (this.isDrawing && this.previewLayer) {\n      this.currentCoordinates = this.getCoords(event);\n      const { startingCorner, width, height } =\n        getCanvasRectangleValuesFromPoints(\n          this.previousCoordinates,\n          this.currentCoordinates\n        );\n      this.currentShape = new Rectangle(\n        startingCorner,\n        width,\n        height,\n        highlightStyle,\n        false\n      );\n      if (this.currentShape) {\n        this.resetPreview();\n        Pen.drawRectangle(this.currentShape as Rectangle, this.previewContext);\n      }\n    }\n  };\n\n  changeStyle = (config: SVGParamsBase) => {\n    if (this.currentShape) {\n      this.currentShape.updateSVGParams(config);\n      this.resetPreview();\n      this.updatePreview();\n    }\n  };\n\n  executeAction = () => {\n    this.drawLayer.addEventListener('mousemove', this.#onMove);\n    this.drawLayer.addEventListener('mousedown', this.#onDown);\n    this.drawLayer.addEventListener('mouseup', this.#onUp);\n  };\n\n  destroy = () => {\n    this.drawLayer.removeEventListener('mousemove', this.#onMove);\n    this.drawLayer.removeEventListener('mousedown', this.#onDown);\n    this.drawLayer.removeEventListener('mouseup', this.#onUp);\n  };\n}\n"]}