{"version":3,"file":"EllipseTool.js","sourceRoot":"","sources":["../../../../../src/util/tools/EllipseTool/EllipseTool.ts"],"names":[],"mappings":"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","sourcesContent":["import { SVGEditor } from '../../../components/organisms/SVGEditor';\nimport type { ShapeType } from '../../../types/shapes.types';\nimport { Coordinates, SVGParamsBase } from '../../../types/types';\nimport { highlightStyle, Tools_List } from '../../helper/constants';\nimport { Pen } from '../../Pen';\nimport { generateCircle, generateEllipse } from './EllipseTool.util';\nimport { Tool } from '../Tool';\nimport type { Ellipse } from '../../shapes/Ellipse/Ellipse';\n\nexport class EllipseTool extends Tool<Ellipse> {\n  isCircle: boolean = false;\n\n  constructor(\n    drawLayer: HTMLCanvasElement,\n    previewLayer: HTMLCanvasElement,\n    self: SVGEditor,\n    onCreate: (shape: ShapeType | ShapeType[] | null) => void,\n    drawPenConfig: SVGParamsBase,\n    offset: Coordinates\n  ) {\n    super(\n      drawLayer,\n      self,\n      onCreate,\n      offset,\n      previewLayer,\n      drawPenConfig,\n      highlightStyle\n    );\n    this.resetPreview();\n    const renderingContext = this.drawLayer.getContext('2d');\n    if (renderingContext) {\n      this.drawContext = renderingContext;\n    }\n    this.toolName = Tools_List.ELLIPSE;\n  }\n\n  #draw = () => {\n    this.currentShape &&\n      Pen.drawEllipse(this.currentShape, this.drawContext, this.drawPenConfig);\n    this.resetPreview();\n  };\n\n  #onKeyDown = (event: KeyboardEvent) => {\n    if (event.ctrlKey) {\n      this.isCircle = true;\n    }\n  };\n\n  #onKeyUp = () => {\n    this.isCircle = false;\n  };\n\n  #onDown = (event: MouseEvent) => {\n    if (event.button !== 0) return;\n    this.isDrawing = true;\n    this.previousCoordinates = this.getCoords(event);\n  };\n\n  #onUp = (event: MouseEvent) => {\n    this.isDrawing = false;\n    this.currentCoordinates = this.getCoords(event);\n    if (this.isCircle) {\n      this.currentShape = generateCircle(\n        this.previousCoordinates,\n        this.currentCoordinates,\n        this.drawPenConfig\n      );\n    } else {\n      this.currentShape = generateEllipse(\n        this.previousCoordinates,\n        this.currentCoordinates,\n        this.drawPenConfig\n      );\n    }\n    this.onUpdateEditor(this.currentShape);\n    this.#draw();\n  };\n\n  #onMove = (event: MouseEvent) => {\n    this.currentCoordinates = this.getCoords(event);\n    this.resetPreview();\n\n    if (this.isDrawing && this.previewLayer) {\n      if (this.isCircle) {\n        const previewShape = generateCircle(\n          this.previousCoordinates,\n          this.currentCoordinates,\n          this.previewPenConfig,\n          false\n        );\n        this.currentShape = previewShape;\n        Pen.drawEllipse(previewShape, this.previewContext);\n      } else {\n        const previewShape = generateEllipse(\n          this.previousCoordinates,\n          this.currentCoordinates,\n          this.previewPenConfig,\n          false\n        );\n        this.currentShape = previewShape;\n        Pen.drawEllipse(previewShape, this.previewContext);\n      }\n    }\n  };\n\n  executeAction = () => {\n    this.drawLayer.addEventListener('mousemove', this.#onMove);\n    this.drawLayer.addEventListener('mousedown', this.#onDown);\n    this.drawLayer.addEventListener('mouseup', this.#onUp);\n    window.addEventListener('keydown', this.#onKeyDown);\n    window.addEventListener('keyup', this.#onKeyUp);\n  };\n\n  destroy = () => {\n    this.drawLayer.removeEventListener('mousemove', this.#onMove);\n    this.drawLayer.removeEventListener('mousedown', this.#onDown);\n    this.drawLayer.removeEventListener('mouseup', this.#onUp);\n    window.removeEventListener('keydown', this.#onKeyDown);\n    window.removeEventListener('keyup', this.#onKeyUp);\n  };\n}\n"]}