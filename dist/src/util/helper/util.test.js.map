{"version":3,"file":"util.test.js","sourceRoot":"","sources":["../../../../src/util/helper/util.test.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AAEnC,EAAE,CAAC;oDACiD,EAAE,GAAS,EAAE;IAC/D,MAAM,KAAK,GAAa,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9C,MAAM,WAAW,GAAsB;QACrC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACT,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KACb,CAAC;IACF,MAAM,iBAAiB,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,KAAK,IAAI,CAAC,CAAC;IACxD,MAAM,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;IACnD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;AACtC,CAAC,CAAA,CAAC,CAAC","sourcesContent":["import { Partition } from '../../types/util.types';\nimport { partition } from './util';\n\nit(`Splits an array into two arrays, where the first array contains the values that satisfy the requirements of the aggregate function, \n    and the second array contains those that do not`, async () => {\n  const given: number[] = [-1, -2, -3, 1, 2, 3];\n  const expectation: Partition<number> = [\n    [1, 2, 3],\n    [-1, -2, -3],\n  ];\n  const aggregateFunction = (value: number) => value >= 0;\n  const result = partition(given, aggregateFunction);\n  expect(result).toEqual(expectation);\n});\n"]}