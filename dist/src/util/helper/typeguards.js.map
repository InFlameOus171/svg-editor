{"version":3,"file":"typeguards.js","sourceRoot":"","sources":["../../../../src/util/helper/typeguards.ts"],"names":[],"mappings":"AAUA,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AAEzC,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,KAAgB,EAAoB,EAAE;IAC9D,OAAQ,KAAiB,CAAC,oBAAoB,CAAC,KAAK,SAAS,CAAC;AAChE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAgB,EAAsB,EAAE;IAClE,OAAQ,KAAmB,CAAC,iBAAiB,CAAC,KAAK,SAAS,CAAC;AAC/D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,KAAgB,EAAiB,EAAE;IACxD,OAAQ,KAAc,CAAC,iBAAiB,CAAC,KAAK,SAAS,CAAC;AAC1D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,KAAgB,EAAqB,EAAE;IAChE,OAAQ,KAAkB,CAAC,qBAAqB,CAAC,KAAK,SAAS,CAAC;AAClE,CAAC,CAAC;AACF,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,KAAgB,EAAiB,EAAE;IACxD,OAAQ,KAAc,CAAC,iBAAiB,CAAC,KAAK,SAAS,CAAC;AAC1D,CAAC,CAAC;AACF,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,KAAgB,EAAsB,EAAE;IAC7D,OAAQ,KAAmB,CAAC,iBAAiB,CAAC,KAAK,SAAS,CAAC;AAC/D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAc,EAAsB,EAAE;IAChE,OAAO,CACL,CAAC,CAAC,KAAK,IAAK,KAAmB,CAAC,2BAA2B,CAAC,KAAK,SAAS,CAC3E,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAgB,EAAU,EAAE;IACtD,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;QACtB,OAAO,WAAW,CAAC;KACpB;IACD,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE;QACpB,OAAO,SAAS,CAAC;KAClB;IACD,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;QACjB,OAAO,MAAM,CAAC;KACf;IACD,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;QACjB,OAAO,MAAM,CAAC;KACf;IACD,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;QACjB,OAAO,WAAW,CAAC;KACpB;IACD,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,IAAU,EAAoB,EAAE;IACzD,OAAO,CAAC,CAAC,IAAI,IAAK,IAAiB,CAAC,YAAY,CAAC,KAAK,SAAS,CAAC;AAClE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,IAAU,EAAsB,EAAE;IAC7D,OAAO,CACL,CAAC,CAAC,IAAI;QACL,IAAmB,CAAC,UAAU,CAAC,KAAK,SAAS;QAC7C,IAAmB,CAAC,QAAQ,KAAK,UAAU,CAAC,MAAM,CACpD,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,IAAU,EAAoB,EAAE;IACzD,OAAO,CACL,CAAC,CAAC,IAAI;QACL,IAAiB,CAAC,UAAU,CAAC,KAAK,SAAS;QAC3C,IAAiB,CAAC,QAAQ,KAAK,UAAU,CAAC,IAAI,CAChD,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { Shapes, ShapeType } from '../../types/shapes.types';\nimport type { Ellipse } from '../shapes/Ellipse/Ellipse';\nimport type { Freehand } from '../shapes/Freehand/Freehand';\nimport type { Line } from '../shapes/Line/Line';\nimport type { Path } from '../shapes/Path/Path';\nimport type { Rectangle } from '../shapes/Rectangle/Rectangle';\nimport type { TextShape } from '../shapes/Text/Text';\nimport type { MoveTool } from '../tools/MoveTool/MoveTool';\nimport type { SelectTool } from '../tools/SelectTool/SelectTool';\nimport type { TextTool } from '../tools/TextTool/TextTool';\nimport { Tools_List } from './constants';\n\nexport const isEllipse = (shape: ShapeType): shape is Ellipse => {\n  return (shape as Ellipse)['toSVGEllipseParams'] !== undefined;\n};\n\nexport const isRectangle = (shape: ShapeType): shape is Rectangle => {\n  return (shape as Rectangle)['toSvgRectParams'] !== undefined;\n};\n\nexport const isLine = (shape: ShapeType): shape is Line => {\n  return (shape as Line)['toSVGLineParams'] !== undefined;\n};\n\nexport const isFreehand = (shape: ShapeType): shape is Freehand => {\n  return (shape as Freehand)['toSVGFreehandParams'] !== undefined;\n};\nexport const isPath = (shape: ShapeType): shape is Path => {\n  return (shape as Path)['toSVGPathParams'] !== undefined;\n};\nexport const isText = (shape: ShapeType): shape is TextShape => {\n  return (shape as TextShape)['toSVGTextParams'] !== undefined;\n};\n\nexport const isShapeType = (shape: unknown): shape is ShapeType => {\n  return (\n    !!shape && (shape as ShapeType)['getDeconstructedShapeData'] !== undefined\n  );\n};\n\nexport const typeOfShape = (shape: ShapeType): Shapes => {\n  if (isRectangle(shape)) {\n    return 'Rectangle';\n  }\n  if (isEllipse(shape)) {\n    return 'Ellipse';\n  }\n  if (isLine(shape)) {\n    return 'Line';\n  }\n  if (isPath(shape)) {\n    return 'Path';\n  }\n  if (isText(shape)) {\n    return 'TextShape';\n  }\n  return 'Freehand';\n};\n\nexport const isTextTool = (tool?: any): tool is TextTool => {\n  return !!tool && (tool as TextTool)['updateText'] !== undefined;\n};\n\nexport const isSelectTool = (tool?: any): tool is SelectTool => {\n  return (\n    !!tool &&\n    (tool as SelectTool)['toolName'] !== undefined &&\n    (tool as SelectTool).toolName === Tools_List.SELECT\n  );\n};\n\nexport const isMoveTool = (tool?: any): tool is MoveTool => {\n  return (\n    !!tool &&\n    (tool as MoveTool)['toolName'] !== undefined &&\n    (tool as MoveTool).toolName === Tools_List.MOVE\n  );\n};\n"]}