{"version":3,"file":"typeguards.js","sourceRoot":"","sources":["../../../../src/util/helper/typeguards.ts"],"names":[],"mappings":"AAUA,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AAEzC,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,KAAgB,EAAoB,EAAE;IAC9D,OAAQ,KAAiB,CAAC,oBAAoB,CAAC,KAAK,SAAS,CAAC;AAChE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAgB,EAAsB,EAAE;IAClE,OAAQ,KAAmB,CAAC,iBAAiB,CAAC,KAAK,SAAS,CAAC;AAC/D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,KAAgB,EAAiB,EAAE;IACxD,OAAQ,KAAc,CAAC,iBAAiB,CAAC,KAAK,SAAS,CAAC;AAC1D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,KAAgB,EAAqB,EAAE;IAChE,OAAQ,KAAkB,CAAC,qBAAqB,CAAC,KAAK,SAAS,CAAC;AAClE,CAAC,CAAC;AACF,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,KAAgB,EAAiB,EAAE;IACxD,OAAQ,KAAc,CAAC,iBAAiB,CAAC,KAAK,SAAS,CAAC;AAC1D,CAAC,CAAC;AACF,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,KAAgB,EAAsB,EAAE;IAC7D,OAAQ,KAAmB,CAAC,iBAAiB,CAAC,KAAK,SAAS,CAAC;AAC/D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAc,EAAsB,EAAE;IAChE,OAAO,CACL,CAAC,CAAC,KAAK,IAAK,KAAmB,CAAC,2BAA2B,CAAC,KAAK,SAAS,CAC3E,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAgB,EAAU,EAAE;IACtD,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;QACtB,OAAO,WAAW,CAAC;KACpB;IACD,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE;QACpB,OAAO,SAAS,CAAC;KAClB;IACD,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;QACjB,OAAO,MAAM,CAAC;KACf;IACD,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;QACjB,OAAO,MAAM,CAAC;KACf;IACD,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;QACjB,OAAO,WAAW,CAAC;KACpB;IACD,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,IAAU,EAAoB,EAAE;IACzD,OAAO,CAAC,CAAC,IAAI,IAAK,IAAiB,CAAC,YAAY,CAAC,KAAK,SAAS,CAAC;AAClE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,IAAU,EAAsB,EAAE;IAC7D,OAAO,CACL,CAAC,CAAC,IAAI;QACL,IAAmB,CAAC,UAAU,CAAC,KAAK,SAAS;QAC7C,IAAmB,CAAC,QAAQ,KAAK,UAAU,CAAC,MAAM,CACpD,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,IAAU,EAAoB,EAAE;IACzD,OAAO,CACL,CAAC,CAAC,IAAI;QACL,IAAiB,CAAC,UAAU,CAAC,KAAK,SAAS;QAC3C,IAAiB,CAAC,QAAQ,KAAK,UAAU,CAAC,IAAI,CAChD,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { Shapes, ShapeType } from '../../types/shapes.types';\r\nimport { Ellipse } from '../Shapes/Ellipse';\r\nimport { Freehand } from '../Shapes/Freehand';\r\nimport { Line } from '../Shapes/Line';\r\nimport { Path } from '../Shapes/Path';\r\nimport { Rectangle } from '../Shapes/Rectangle';\r\nimport { TextShape } from '../Shapes/Text';\r\nimport { MoveTool } from '../Tools/MoveTool';\r\nimport { SelectTool } from '../Tools/SelectTool';\r\nimport { TextTool } from '../Tools/TextTool';\r\nimport { Tools_List } from './constants';\r\n\r\nexport const isEllipse = (shape: ShapeType): shape is Ellipse => {\r\n  return (shape as Ellipse)['toSVGEllipseParams'] !== undefined;\r\n};\r\n\r\nexport const isRectangle = (shape: ShapeType): shape is Rectangle => {\r\n  return (shape as Rectangle)['toSvgRectParams'] !== undefined;\r\n};\r\n\r\nexport const isLine = (shape: ShapeType): shape is Line => {\r\n  return (shape as Line)['toSVGLineParams'] !== undefined;\r\n};\r\n\r\nexport const isFreehand = (shape: ShapeType): shape is Freehand => {\r\n  return (shape as Freehand)['toSVGFreehandParams'] !== undefined;\r\n};\r\nexport const isPath = (shape: ShapeType): shape is Path => {\r\n  return (shape as Path)['toSVGPathParams'] !== undefined;\r\n};\r\nexport const isText = (shape: ShapeType): shape is TextShape => {\r\n  return (shape as TextShape)['toSVGTextParams'] !== undefined;\r\n};\r\n\r\nexport const isShapeType = (shape: unknown): shape is ShapeType => {\r\n  return (\r\n    !!shape && (shape as ShapeType)['getDeconstructedShapeData'] !== undefined\r\n  );\r\n};\r\n\r\nexport const typeOfShape = (shape: ShapeType): Shapes => {\r\n  if (isRectangle(shape)) {\r\n    return 'Rectangle';\r\n  }\r\n  if (isEllipse(shape)) {\r\n    return 'Ellipse';\r\n  }\r\n  if (isLine(shape)) {\r\n    return 'Line';\r\n  }\r\n  if (isPath(shape)) {\r\n    return 'Path';\r\n  }\r\n  if (isText(shape)) {\r\n    return 'TextShape';\r\n  }\r\n  return 'Freehand';\r\n};\r\n\r\nexport const isTextTool = (tool?: any): tool is TextTool => {\r\n  return !!tool && (tool as TextTool)['updateText'] !== undefined;\r\n};\r\n\r\nexport const isSelectTool = (tool?: any): tool is SelectTool => {\r\n  return (\r\n    !!tool &&\r\n    (tool as SelectTool)['toolName'] !== undefined &&\r\n    (tool as SelectTool).toolName === Tools_List.SELECT\r\n  );\r\n};\r\n\r\nexport const isMoveTool = (tool?: any): tool is MoveTool => {\r\n  return (\r\n    !!tool &&\r\n    (tool as MoveTool)['toolName'] !== undefined &&\r\n    (tool as MoveTool).toolName === Tools_List.MOVE\r\n  );\r\n};\r\n"]}