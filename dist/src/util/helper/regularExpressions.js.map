{"version":3,"file":"regularExpressions.js","sourceRoot":"","sources":["../../../../src/util/helper/regularExpressions.ts"],"names":[],"mappings":"AAAA,mEAAmE;AACnE,MAAM,CAAC,MAAM,mBAAmB,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,CAAC;AAC/D,MAAM,aAAa,GAAG,mBAAmB,CAAC,MAAM,CAAC;AAEjD,MAAM,CAAC,MAAM,yBAAyB,GAAG,IAAI,MAAM,CAAC,gBAAgB,CAAC,CAAC;AAEtE,MAAM,CAAC,MAAM,eAAe,GAAG,IAAI,MAAM,CAAC,gBAAgB,CAAC,CAAC;AAC5D,MAAM,SAAS,GAAG,eAAe,CAAC,MAAM,CAAC;AAEzC,wHAAwH;AACxH,MAAM,CAAC,MAAM,kBAAkB,GAAG,IAAI,MAAM,CAAC,GAAG,aAAa,WAAW,EAAE,GAAG,CAAC,CAAC;AAE/E,uCAAuC;AACvC,MAAM,CAAC,MAAM,YAAY,GAAG,IAAI,MAAM,CACpC,YAAY,aAAa,IAAI,SAAS,GAAG,aAAa,SAAS,CAChE,CAAC;AAEF,0CAA0C;AAC1C,MAAM,CAAC,MAAM,eAAe,GAAG,IAAI,MAAM,CACvC,eAAe,aAAa,IAAI,SAAS,GAAG,aAAa,OAAO,CACjE,CAAC;AACF,sCAAsC;AACtC,MAAM,CAAC,MAAM,WAAW,GAAG,IAAI,MAAM,CACnC,WAAW,aAAa,IAAI,SAAS,GAAG,aAAa,OAAO,CAC7D,CAAC;AAEF,uCAAuC;AACvC,MAAM,CAAC,MAAM,YAAY,GAAG,IAAI,MAAM,CACpC,YAAY,aAAa,KAAK,SAAS,GAAG,aAAa,WAAW,CACnE,CAAC;AAEF,gDAAgD;AAChD,MAAM,CAAC,MAAM,WAAW,GAAG,IAAI,MAAM,CAAC,WAAW,aAAa,KAAK,CAAC,CAAC;AACrE,MAAM,CAAC,MAAM,WAAW,GAAG,IAAI,MAAM,CAAC,WAAW,aAAa,KAAK,CAAC,CAAC;AAErE,oDAAoD;AACpD,wCAAwC;AACxC,MAAM,CAAC,MAAM,kBAAkB,GAAG,IAAI,MAAM,CAC1C,2CAA2C,CAC5C,CAAC","sourcesContent":["// Matches any decimal number with or without decimal separator \".\"\r\nexport const decimalNumberRegExp = new RegExp(/(-?\\d*\\.?\\d+)/);\r\nconst decimalNumber = decimalNumberRegExp.source;\r\n\r\nexport const decimalNumberRegExpGlobal = new RegExp(/(-?\\d*\\.?\\d+)/g);\r\n\r\nexport const separatorRegExp = new RegExp(/((\\s?,\\s?)|\\s)/);\r\nconst separator = separatorRegExp.source;\r\n\r\n// Reads path string and groups each match in three groups: 1st: path command, 2nd: x coordinate and y coordinates \"x,y\"\r\nexport const pathCommandsRegExp = new RegExp(`${decimalNumber}|[a-zA-Z]`, 'g');\r\n\r\n// Matches matrix string of a transform\r\nexport const matrixRegExp = new RegExp(\r\n  `matrix\\\\(${decimalNumber}(${separator}${decimalNumber}){5}\\\\)`\r\n);\r\n\r\n// Matches translate string of a transform\r\nexport const translateRegExp = new RegExp(\r\n  `translate\\\\(${decimalNumber}(${separator}${decimalNumber})?\\\\)`\r\n);\r\n// Matches scale string of a transform\r\nexport const scaleRegExp = new RegExp(\r\n  `scale\\\\(${decimalNumber}(${separator}${decimalNumber})?\\\\)`\r\n);\r\n\r\n// Matches rotate string of a transform\r\nexport const rotateRegExp = new RegExp(\r\n  `rotate\\\\(${decimalNumber}((${separator}${decimalNumber}){2})?\\\\)`\r\n);\r\n\r\n// Matches skewX and skewY string of a transform\r\nexport const skewXRegExp = new RegExp(`skewX\\\\(${decimalNumber}\\\\)`);\r\nexport const skewYRegExp = new RegExp(`skewY\\\\(${decimalNumber}\\\\)`);\r\n\r\n// Matches full hex string, r, g and b from a string\r\n// #ff00aa => [\"#ff00aa\",\"ff\",\"00\",\"aa\"]\r\nexport const hexColorCodeRegExp = new RegExp(\r\n  /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n);\r\n"]}