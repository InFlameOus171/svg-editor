{"version":3,"file":"coordinates.js","sourceRoot":"","sources":["../../../../src/util/helper/coordinates.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ShapeType } from '../../types/typeGuards.types';\nimport type {\n  BoundaryCoordinates,\n  Coordinates,\n  Partition,\n} from '../../types/types';\n\nexport const getCanvasRectangleValuesFromPoints = (\n  startPoint: Coordinates,\n  endPoint: Coordinates\n): { startingCorner: Coordinates; width: number; height: number } => {\n  const width = endPoint[0] - startPoint[0];\n  const height = endPoint[1] - startPoint[1];\n\n  return {\n    startingCorner: startPoint,\n    width,\n    height,\n  };\n};\n\nexport const calculateDistanceBetweenPoints = (\n  startPoint: Coordinates,\n  endPoint: Coordinates\n) => {\n  const cathete1 = startPoint[0] - endPoint[0];\n  const cathete2 = startPoint[1] - endPoint[1];\n  const result = cathete1 ** 2 + cathete2 ** 2;\n  return Math.sqrt(result);\n};\n\nexport const partitionCoordinates = (coordinates: Coordinates[]) => {\n  return coordinates.reduce(\n    (acc: Partition<number>, coordinate): Partition<number> => [\n      [...acc[0], coordinate[0]],\n      [...acc[1], coordinate[1]],\n    ],\n    [[], []]\n  );\n};\n\nconst betweenHelper = (coordinateToCheck: Coordinates) => {\n  return (smallerCoordinate: Coordinates, biggerCoordinate: Coordinates) => {\n    return (\n      coordinateToCheck[0] >= smallerCoordinate[0] &&\n      coordinateToCheck[1] >= smallerCoordinate[1] &&\n      coordinateToCheck[0] <= biggerCoordinate[0] &&\n      coordinateToCheck[1] <= biggerCoordinate[1]\n    );\n  };\n};\n\nconst isBetweenTwoCoordinates =\n  (firstCoord: Coordinates, secondCoord: Coordinates) =>\n  (coordinateToCheck: Coordinates) => {\n    const isCoordinateBetween = betweenHelper(coordinateToCheck);\n    if (firstCoord[0] <= secondCoord[0] && firstCoord[1] <= secondCoord[1]) {\n      return isCoordinateBetween(firstCoord, secondCoord);\n    } else {\n      isCoordinateBetween(firstCoord, firstCoord);\n    }\n  };\n\nexport const isPointInsideAnotherShape =\n  (point: Coordinates) => (shape: ShapeType) =>\n    isShapeInsideAnotherShape(shape)({\n      boundaries: [point, point, point, point],\n    } as ShapeType);\n\nexport const isShapeInsideAnotherShape =\n  (potentiallyBiggerShape?: ShapeType) =>\n  (potentiallySmallerShape: ShapeType) => {\n    if (!potentiallyBiggerShape) {\n      return false;\n    }\n    const { boundaries: potentiallyBiggerCoordinates } = potentiallyBiggerShape;\n    if (potentiallyBiggerCoordinates) {\n      const [bigX, bigY] = partitionCoordinates(potentiallyBiggerCoordinates);\n      const minCoordinates: Coordinates = [\n        Math.min(...bigX),\n        Math.min(...bigY),\n      ];\n      const maxCoordinates: Coordinates = [\n        Math.max(...bigX),\n        Math.max(...bigY),\n      ];\n      return potentiallySmallerShape.boundaries?.every(\n        isBetweenTwoCoordinates(minCoordinates, maxCoordinates)\n      );\n    }\n  };\n\nexport const getTextBoundaries = (\n  position: Coordinates,\n  width: number,\n  height: number\n): BoundaryCoordinates => {\n  const x = parseInt(position[0].toString());\n  const y = parseInt(position[0].toString());\n  const pos1: Coordinates = [x, position[1] + height / 4];\n  const pos2: Coordinates = [x, position[1] - height];\n  const pos3: Coordinates = [position[0] + width, position[1]];\n  const pos4: Coordinates = [position[0] + width, position[1] - height];\n  console.debug(pos1, pos2, pos3, pos4);\n  return [pos1, pos2, pos3, pos4];\n};\n\nexport const splitCoordinates = (\n  acc: [number[], number[]],\n  point: string | Coordinates\n) => {\n  return [\n    [...acc[0], point[0]],\n    [...acc[1], point[1]],\n  ] as [number[], number[]];\n};\n\nexport const splitAllCoordinates = (\n  coordinates: Array<string | Coordinates>\n) => {\n  return coordinates.reduce(splitCoordinates, [[], []]);\n};\n\nexport const getMinMaxValuesOfSplitCoordinates = (\n  xCoordinates: number[],\n  yCoordinates: number[]\n) => {\n  const xMin = Math.min(...xCoordinates);\n  const yMin = Math.min(...yCoordinates);\n  const xMax = Math.max(...xCoordinates);\n  const yMax = Math.max(...yCoordinates);\n  return { xMin, yMin, xMax, yMax };\n};\n\nexport const getMinMaxValuesOfCoordinates = (coordinates: Coordinates[]) => {\n  const [xCoords, yCoords] = splitAllCoordinates(coordinates);\n  return getMinMaxValuesOfSplitCoordinates(xCoords, yCoords);\n};\n\nexport const getBoundaryFromCoordinates = (\n  coordinates: Coordinates[]\n): BoundaryCoordinates => {\n  const { xMin, xMax, yMin, yMax } = getMinMaxValuesOfCoordinates(coordinates);\n  return [\n    [xMin, yMin],\n    [xMax, yMin],\n    [xMin, yMax],\n    [xMax, yMax],\n  ];\n};\n\nexport const sumOfCoordinates =\n  (coordinates1: Coordinates) =>\n  (coordinates2: Coordinates): Coordinates => {\n    return [\n      coordinates1[0] + coordinates2[0],\n      coordinates1[1] + coordinates2[1],\n    ];\n  };\n\nexport const rectangleParamsFromBoundaries = (\n  boundaries: BoundaryCoordinates\n) => {\n  const [xCoordinates, yCoordinates] = Array.from(\n    new Set(splitAllCoordinates(boundaries))\n  );\n  const { xMin, yMin, xMax, yMax } = getMinMaxValuesOfSplitCoordinates(\n    xCoordinates,\n    yCoordinates\n  );\n  const startingCorner: Coordinates = [xMin, yMin];\n  const width: number = xMax - xMin;\n  const height: number = yMax - yMin;\n  return { startingCorner, width, height };\n};\n"]}