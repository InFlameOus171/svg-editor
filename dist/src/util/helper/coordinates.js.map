{"version":3,"file":"coordinates.js","sourceRoot":"","sources":["../../../../src/util/helper/coordinates.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ShapeType } from '../../types/shapes.types';\r\nimport type {\r\n  BoundaryCoordinates,\r\n  Coordinates,\r\n  SVGDrawPath,\r\n  VectorCoordinates,\r\n} from '../../types/types';\r\nimport type { Partition } from '../../types/util.types';\r\nimport { relativeCommands, singleDirectionCommands } from './util';\r\n\r\nexport const getCanvasRectangleValuesFromPoints = (\r\n  startPoint: Coordinates,\r\n  endPoint: Coordinates\r\n): { startingCorner: Coordinates; width: number; height: number } => {\r\n  const width = endPoint[0] - startPoint[0];\r\n  const height = endPoint[1] - startPoint[1];\r\n\r\n  return {\r\n    startingCorner: startPoint,\r\n    width,\r\n    height,\r\n  };\r\n};\r\n\r\nexport const getFormattedRectangleValuesFromPoints = (\r\n  startPoint: Coordinates,\r\n  endPoint: Coordinates\r\n): { startingCorner: Coordinates; width: number; height: number } => {\r\n  const width = Math.abs(endPoint[0] - startPoint[0]);\r\n  const height = Math.abs(endPoint[1] - startPoint[1]);\r\n  const newStartingCorner: Coordinates = [\r\n    Math.min(startPoint[0], endPoint[0]),\r\n    Math.min(startPoint[1], endPoint[1]),\r\n  ];\r\n  return {\r\n    startingCorner: newStartingCorner,\r\n    width,\r\n    height,\r\n  };\r\n};\r\n\r\nexport const calculateDistanceBetweenPoints = (\r\n  startPoint: Coordinates,\r\n  endPoint: Coordinates\r\n) => {\r\n  const cathete1 = startPoint[0] - endPoint[0];\r\n  const cathete2 = startPoint[1] - endPoint[1];\r\n  const result = cathete1 ** 2 + cathete2 ** 2;\r\n  return Math.sqrt(result);\r\n};\r\n\r\nexport const calculateVectorFromCoordinates = (\r\n  vectorCoordinates: VectorCoordinates\r\n): Coordinates => {\r\n  const [point1, point2] = vectorCoordinates;\r\n  return [point1[0] - point2[0], point1[1] - point2[1]];\r\n};\r\n\r\nexport const sumOfVectors = (vectorCoordinates: VectorCoordinates[]) => {\r\n  const vectors = vectorCoordinates.map(calculateVectorFromCoordinates);\r\n  return vectors.reduce(\r\n    (newVector, currentVector) => {\r\n      return [newVector[0] + currentVector[0], newVector[1] + currentVector[1]];\r\n    },\r\n    [0, 0] as Coordinates\r\n  );\r\n};\r\n\r\nexport const partitionCoordinates = (coordinates: Coordinates[]) => {\r\n  return coordinates.reduce(\r\n    (acc: Partition<number>, coordinate): Partition<number> => [\r\n      [...acc[0], coordinate[0]],\r\n      [...acc[1], coordinate[1]],\r\n    ],\r\n    [[], []]\r\n  );\r\n};\r\n\r\nconst betweenHelper = (coordinateToCheck: Coordinates) => {\r\n  return (smallerCoordinate: Coordinates, biggerCoordinate: Coordinates) => {\r\n    return (\r\n      coordinateToCheck[0] >= smallerCoordinate[0] &&\r\n      coordinateToCheck[1] >= smallerCoordinate[1] &&\r\n      coordinateToCheck[0] <= biggerCoordinate[0] &&\r\n      coordinateToCheck[1] <= biggerCoordinate[1]\r\n    );\r\n  };\r\n};\r\n\r\nconst isBetweenTwoCoordinates =\r\n  (firstCoord: Coordinates, secondCoord: Coordinates) =>\r\n  (coordinateToCheck: Coordinates) => {\r\n    const isCoordinateBetween = betweenHelper(coordinateToCheck);\r\n    if (firstCoord[0] <= secondCoord[0] && firstCoord[1] <= secondCoord[1]) {\r\n      return isCoordinateBetween(firstCoord, secondCoord);\r\n    } else {\r\n      isCoordinateBetween(firstCoord, firstCoord);\r\n    }\r\n  };\r\n\r\nexport const isPointInsideAnotherShape =\r\n  (point: Coordinates) => (shape: ShapeType) =>\r\n    isShapeInsideAnotherShape(shape)({\r\n      boundaries: [point, point, point, point],\r\n    } as ShapeType);\r\n\r\nexport const isShapeInsideAnotherShape =\r\n  (potentiallyBiggerShape?: ShapeType) =>\r\n  (potentiallySmallerShape: ShapeType) => {\r\n    if (!potentiallyBiggerShape) {\r\n      return false;\r\n    }\r\n    const { boundaries: potentiallyBiggerCoordinates } = potentiallyBiggerShape;\r\n    if (potentiallyBiggerCoordinates) {\r\n      const [bigX, bigY] = partitionCoordinates(potentiallyBiggerCoordinates);\r\n      const minCoordinates: Coordinates = [\r\n        Math.min(...bigX),\r\n        Math.min(...bigY),\r\n      ];\r\n      const maxCoordinates: Coordinates = [\r\n        Math.max(...bigX),\r\n        Math.max(...bigY),\r\n      ];\r\n      return potentiallySmallerShape.boundaries?.every(\r\n        isBetweenTwoCoordinates(minCoordinates, maxCoordinates)\r\n      );\r\n    }\r\n  };\r\n\r\nconst isPointInside = (shape: ShapeType, point: Coordinates) => {\r\n  const boundaries = shape.boundaries;\r\n  let pointIsIside = false;\r\n  if (!boundaries) return false;\r\n  for (let i = 0; i < boundaries.length; i++) {\r\n    const j = (i + 1) % boundaries.length;\r\n    if (\r\n      (boundaries[i][1] < point[1] && boundaries[j][1] >= point[1]) ||\r\n      (boundaries[j][1] < point[1] && boundaries[i][1] >= point[1])\r\n    ) {\r\n      if (\r\n        (point[1] - boundaries[i][1]) * (boundaries[j][0] - boundaries[i][0]) <\r\n        (point[0] - boundaries[i][0]) * (boundaries[j][1] - boundaries[i][1])\r\n      ) {\r\n        pointIsIside = !pointIsIside;\r\n      }\r\n    }\r\n  }\r\n\r\n  return pointIsIside;\r\n};\r\n\r\nexport const getCircleBoundaries = (\r\n  center: Coordinates,\r\n  radiusX: number,\r\n  radiusY: number\r\n): BoundaryCoordinates => {\r\n  const topLeftCorner: Coordinates = [center[0] - radiusX, center[1] + radiusY];\r\n  const topRightCorner: Coordinates = [\r\n    center[0] + radiusX,\r\n    center[1] + radiusY,\r\n  ];\r\n  const bottomLeftCorner: Coordinates = [\r\n    center[0] - radiusX,\r\n    center[1] - radiusY,\r\n  ];\r\n  const bottomRightCorner: Coordinates = [\r\n    center[0] + radiusX,\r\n    center[1] - radiusY,\r\n  ];\r\n  return [topLeftCorner, topRightCorner, bottomLeftCorner, bottomRightCorner];\r\n};\r\n\r\nexport const getRectBoundaries = (\r\n  startingCorner: Coordinates,\r\n  width: number,\r\n  height: number\r\n): BoundaryCoordinates => {\r\n  const xMin = startingCorner[0];\r\n  const yMax = startingCorner[1];\r\n  const xMax = startingCorner[0] + width;\r\n  const yMin = startingCorner[1] + height;\r\n  return [\r\n    [xMin, yMin],\r\n    [xMin, yMax],\r\n    [xMax, yMin],\r\n    [xMax, yMax],\r\n  ];\r\n};\r\n\r\nexport const getLineBoundaries = (\r\n  startingPoint: Coordinates,\r\n  endPoint: Coordinates\r\n): BoundaryCoordinates => {\r\n  const x1 = startingPoint[0];\r\n  const x2 = endPoint[0];\r\n  const y1 = startingPoint[1];\r\n  const y2 = endPoint[1];\r\n  return [\r\n    [x1, y1],\r\n    [x1, y2],\r\n    [x2, y1],\r\n    [x2, y2],\r\n  ];\r\n};\r\n\r\nexport const getTextBoundaries = (\r\n  position: Coordinates,\r\n  width: number,\r\n  height: number\r\n): BoundaryCoordinates => {\r\n  const x = parseInt(position[0].toString());\r\n  const y = parseInt(position[0].toString());\r\n  const pos1: Coordinates = [x, position[1] + height / 4];\r\n  const pos2: Coordinates = [x, position[1] - height];\r\n  const pos3: Coordinates = [position[0] + width, position[1]];\r\n  const pos4: Coordinates = [position[0] + width, position[1] - height];\r\n  console.debug(pos1, pos2, pos3, pos4);\r\n  return [pos1, pos2, pos3, pos4];\r\n};\r\n\r\nexport const relativePathToAbsolutePath = (\r\n  drawPath: SVGDrawPath[],\r\n  offset?: Coordinates\r\n) => {\r\n  let lastAbsolutePoint: Coordinates = [0, 0];\r\n  const drawPathWithAbsolutePoints = drawPath.reduce(\r\n    (acc: SVGDrawPath[], innerDrawPath): SVGDrawPath[] => {\r\n      if (!Array.isArray(innerDrawPath.points)) {\r\n        return [\r\n          ...acc,\r\n          {\r\n            command: innerDrawPath.command.toUpperCase(),\r\n            points: innerDrawPath.points,\r\n          },\r\n        ];\r\n      }\r\n      if (relativeCommands.includes(innerDrawPath.command)) {\r\n        const newDrawPathPoints = innerDrawPath.points.reduce(\r\n          (allNewPoints: Coordinates[], point: Coordinates, index: number) => {\r\n            if (innerDrawPath.command === 'c') {\r\n              if (index % 3 === 2) {\r\n                lastAbsolutePoint = [\r\n                  lastAbsolutePoint[0] + 1.05 * point[0],\r\n                  lastAbsolutePoint[1] + 1.05 * point[1],\r\n                ];\r\n                return [...allNewPoints, lastAbsolutePoint];\r\n              }\r\n              return allNewPoints;\r\n            }\r\n            if (index === 0) {\r\n              lastAbsolutePoint = [\r\n                lastAbsolutePoint[0] + point[0],\r\n                lastAbsolutePoint[1] + point[1],\r\n              ];\r\n              return [lastAbsolutePoint];\r\n            } else {\r\n              lastAbsolutePoint = [\r\n                lastAbsolutePoint[0] + point[0],\r\n                lastAbsolutePoint[1] + point[1],\r\n              ];\r\n              return [...allNewPoints, lastAbsolutePoint] as Coordinates[];\r\n            }\r\n          },\r\n          []\r\n        );\r\n        return [\r\n          ...acc,\r\n          {\r\n            command: innerDrawPath.command.toUpperCase(),\r\n            points: newDrawPathPoints,\r\n          },\r\n        ];\r\n      } else {\r\n        return [\r\n          ...acc,\r\n          {\r\n            command: innerDrawPath.command,\r\n            points: offset\r\n              ? innerDrawPath.points.map(sumOfCoordinates(offset))\r\n              : innerDrawPath.points,\r\n          },\r\n        ];\r\n      }\r\n    },\r\n    []\r\n  );\r\n  return drawPathWithAbsolutePoints;\r\n};\r\n\r\nexport const getPointsOfDrawPath = (drawPath: SVGDrawPath[]) => {\r\n  return drawPath.reduce(\r\n    (acc: Array<Coordinates>, currentDrawPath: SVGDrawPath) => {\r\n      if (!currentDrawPath.points) {\r\n        return acc;\r\n      }\r\n      if (Array.isArray(currentDrawPath.points)) {\r\n        if (singleDirectionCommands.includes(currentDrawPath.command)) {\r\n          switch (currentDrawPath.command) {\r\n            case 'H':\r\n            case 'h': {\r\n              return [\r\n                ...acc,\r\n                [0, parseFloat(currentDrawPath.points[0] as unknown as string)],\r\n              ] as Coordinates[];\r\n            }\r\n            case 'V':\r\n            case 'v': {\r\n              return [\r\n                ...acc,\r\n                [parseFloat(currentDrawPath.points[0] as unknown as string), 0],\r\n              ] as Coordinates[];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return [...acc, ...(currentDrawPath.points as Coordinates[])];\r\n    },\r\n    []\r\n  );\r\n};\r\n\r\nexport const splitCoordinate = (\r\n  acc: [number[], number[]],\r\n  point: string | Coordinates\r\n) => {\r\n  return [\r\n    [...acc[0], point[0]],\r\n    [...acc[1], point[1]],\r\n  ] as [number[], number[]];\r\n};\r\n\r\nexport const splitAllCoordinates = (\r\n  coordinates: Array<string | Coordinates>\r\n) => {\r\n  return coordinates.reduce(splitCoordinate, [[], []]);\r\n};\r\n\r\nexport const getMinMaxValuesOfSplitCoordinates = (\r\n  xCoordinates: number[],\r\n  yCoordinates: number[]\r\n) => {\r\n  const xMin = Math.min(...xCoordinates);\r\n  const yMin = Math.min(...yCoordinates);\r\n  const xMax = Math.max(...xCoordinates);\r\n  const yMax = Math.max(...yCoordinates);\r\n  return { xMin, yMin, xMax, yMax };\r\n};\r\n\r\nexport const getMinMaxValuesOfCoordinates = (coordinates: Coordinates[]) => {\r\n  const [xCoords, yCoords] = splitAllCoordinates(coordinates);\r\n  return getMinMaxValuesOfSplitCoordinates(xCoords, yCoords);\r\n};\r\n\r\nexport const getBoundaryFromCoordinates = (\r\n  coordinates: Coordinates[]\r\n): BoundaryCoordinates => {\r\n  const { xMin, xMax, yMin, yMax } = getMinMaxValuesOfCoordinates(coordinates);\r\n  return [\r\n    [xMin, yMin],\r\n    [xMax, yMin],\r\n    [xMin, yMax],\r\n    [xMax, yMax],\r\n  ];\r\n};\r\n\r\nexport const getPathBoundaries = (\r\n  drawPath: SVGDrawPath[]\r\n): BoundaryCoordinates => {\r\n  const absoluteDrawPath = relativePathToAbsolutePath(drawPath);\r\n  const absolutePointsOfDrawPath = getPointsOfDrawPath(absoluteDrawPath);\r\n  return getBoundaryFromCoordinates(absolutePointsOfDrawPath);\r\n};\r\n\r\nexport const sumOfCoordinates =\r\n  (coordinates1: Coordinates) =>\r\n  (coordinates2: Coordinates): Coordinates => {\r\n    return [\r\n      coordinates1[0] + coordinates2[0],\r\n      coordinates1[1] + coordinates2[1],\r\n    ];\r\n  };\r\n\r\nexport const rectangleParamsFromBoundaries = (\r\n  boundaries: BoundaryCoordinates\r\n) => {\r\n  const [xCoordinates, yCoordinates] = Array.from(\r\n    new Set(splitAllCoordinates(boundaries))\r\n  );\r\n  const { xMin, yMin, xMax, yMax } = getMinMaxValuesOfSplitCoordinates(\r\n    xCoordinates,\r\n    yCoordinates\r\n  );\r\n  const startingCorner: Coordinates = [xMin, yMin];\r\n  const width: number = xMax - xMin;\r\n  const height: number = yMax - yMin;\r\n  return { startingCorner, width, height };\r\n};\r\n"]}