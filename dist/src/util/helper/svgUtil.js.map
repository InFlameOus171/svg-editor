{"version":3,"file":"svgUtil.js","sourceRoot":"","sources":["../../../../src/util/helper/svgUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { ShapeType } from '../../types/shapes.types';\nimport {\n  RectSVGParams,\n  EllipseSVGParams,\n  LineSVGParams,\n  FreehandSVGParams,\n  PathSVGParams,\n  Coordinates,\n  SVGDrawPath,\n  SVGParamsBase,\n} from '../../types/types';\nimport { Ellipse } from '../shapes/Ellipse/Ellipse';\nimport { Freehand } from '../shapes/Freehand/Freehand';\nimport { Line } from '../shapes/Line/Line';\nimport { Path } from '../shapes/Path/Path';\nimport { Rectangle } from '../shapes/Rectangle/Rectangle';\nimport { TextShape } from '../shapes/Text/Text';\nimport { acceptedTags } from './constants';\nimport { getMinMaxValuesOfCoordinates } from './coordinates';\nimport { pathCommandsRegExp } from './regularExpressions';\nimport { typeOfShape } from './typeguards';\nimport {\n  hexToRGBA,\n  normalizeColorCode,\n  pathCommandValues,\n  singleDirectionCommands,\n} from './util';\n\nexport const setSVGStyleParams = (\n  svgShape: Element,\n  lineDash?: number[],\n  lineCap?: string,\n  fill?: string,\n  stroke?: string,\n  strokeWidth?: string,\n  transformMatrix?: DOMMatrix\n) => {\n  const { a, b, c, d, e, f } = transformMatrix || {};\n  stroke && svgShape.setAttribute('stroke', stroke);\n  strokeWidth && svgShape.setAttribute('stroke-width', strokeWidth);\n  fill && svgShape.setAttribute('fill', fill);\n  lineDash && svgShape.setAttribute('stroke-dasharray', lineDash.join(' '));\n  lineCap && svgShape.setAttribute('stroke-linecap', lineCap);\n  transformMatrix &&\n    svgShape.setAttribute(\n      'transform',\n      `matrix(${[a, b, c, d, e, f].join(',')})`\n    );\n};\nexport const setRectSVGParams = (\n  svgShape: Element,\n  rectParams: RectSVGParams\n) => {\n  const { x, y, width, height, fill, stroke, strokeWidth, lineDash, lineCap } =\n    rectParams;\n  svgShape.setAttribute('x', x);\n  svgShape.setAttribute('y', y);\n  svgShape.setAttribute('width', width);\n  svgShape.setAttribute('height', height);\n  setSVGStyleParams(svgShape, lineDash, lineCap, fill, stroke, strokeWidth);\n};\n\nexport const setEllipseSVGParams = (\n  svgShape: Element,\n  ellipseParams: EllipseSVGParams\n) => {\n  const { cx, cy, rx, ry, fill, stroke, strokeWidth, lineDash, lineCap } =\n    ellipseParams;\n  svgShape.setAttribute('cx', cx);\n  svgShape.setAttribute('cy', cy);\n  svgShape.setAttribute('rx', rx);\n  svgShape.setAttribute('ry', ry);\n  setSVGStyleParams(svgShape, lineDash, lineCap, fill, stroke, strokeWidth);\n};\n\nexport const setCircleSVGParams = (\n  svgShape: Element,\n  circleParams: EllipseSVGParams\n) => {\n  const { cx, cy, rx, fill, stroke, strokeWidth, lineDash, lineCap } =\n    circleParams;\n  svgShape.setAttribute('cx', cx);\n  svgShape.setAttribute('cy', cy);\n  svgShape.setAttribute('r', rx);\n  setSVGStyleParams(svgShape, lineDash, lineCap, fill, stroke, strokeWidth);\n};\n\nexport const setLineSVGParams = (\n  svgShape: Element,\n  lineParams: LineSVGParams\n) => {\n  const { x1, y1, x2, y2, stroke, strokeWidth, lineDash, lineCap } = lineParams;\n  svgShape.setAttribute('x1', x1);\n  svgShape.setAttribute('y1', y1);\n  svgShape.setAttribute('x2', x2);\n  svgShape.setAttribute('y2', y2);\n  setSVGStyleParams(\n    svgShape,\n    lineDash,\n    lineCap,\n    undefined,\n    stroke,\n    strokeWidth\n  );\n};\n\nexport const setFreehandSVGParams = (\n  svgShape: Element,\n  freehandParams: FreehandSVGParams\n) => {\n  const { points, stroke, strokeWidth, lineDash, lineCap } = freehandParams;\n  svgShape.setAttribute('points', points);\n  setSVGStyleParams(\n    svgShape,\n    lineDash,\n    lineCap,\n    undefined,\n    stroke,\n    strokeWidth\n  );\n};\n\nexport const setPathSVGParams = (\n  svgShape: Element,\n  svgParams: PathSVGParams\n) => {\n  const { d, fill, stroke, strokeWidth, transformMatrix, lineDash, lineCap } =\n    svgParams;\n  svgShape.setAttribute('d', d);\n  setSVGStyleParams(\n    svgShape,\n    lineDash,\n    lineCap,\n    fill,\n    stroke,\n    strokeWidth,\n    transformMatrix\n  );\n};\n\nexport const setTextSVGParams = (svgShape: Element, textObject: TextShape) => {\n  const svgParams = textObject.toSVGTextParams();\n  const {\n    position,\n    lineDash,\n    lineCap,\n    fill,\n    stroke,\n    strokeWidth,\n    transformMatrix = new DOMMatrix([1, 0, 0, 1, 0, 0]),\n    fontFamily,\n    fontSize,\n    text,\n  } = svgParams;\n  if (text) {\n    svgShape.setAttribute('x', position[0].toString());\n    svgShape.setAttribute('y', position[1].toString());\n    svgShape.setAttribute(\n      'style',\n      'font-family:'.concat(\n        fontFamily ?? 'arial',\n        ';',\n        'font-size:',\n        (fontSize ?? 12).toString(),\n        'px'\n      )\n    );\n    svgShape.innerHTML = text;\n    setSVGStyleParams(\n      svgShape,\n      lineDash,\n      lineCap,\n      fill,\n      stroke,\n      strokeWidth,\n      transformMatrix\n    );\n  }\n};\n\nexport const appendAsSVGShapeGeneratorFunction =\n  (parent?: SVGGraphicsElement, svgNameSpace: string | null = null) =>\n  (shape: ShapeType) => {\n    switch (typeOfShape(shape)) {\n      case 'Rectangle': {\n        const rectangleObject = shape as Rectangle;\n        const rect = document.createElementNS(svgNameSpace, 'rect');\n        setRectSVGParams(rect, rectangleObject.toSvgRectParams());\n        parent?.appendChild(rect);\n        break;\n      }\n      case 'Ellipse': {\n        const ellipseObject = shape as Ellipse;\n        const isCircle = ellipseObject.radiusX === ellipseObject.radiusY;\n        if (isCircle) {\n          const circle = document.createElementNS(svgNameSpace, 'circle');\n          setCircleSVGParams(circle, ellipseObject.toSVGEllipseParams());\n          parent?.appendChild(circle);\n        } else {\n          const ellipse = document.createElementNS(svgNameSpace, 'ellipse');\n          setEllipseSVGParams(ellipse, ellipseObject.toSVGEllipseParams());\n          parent?.appendChild(ellipse);\n        }\n        break;\n      }\n      case 'Line': {\n        const lineObject = shape as Line;\n        const line = document.createElementNS(svgNameSpace, 'line');\n        setLineSVGParams(line, lineObject.toSVGLineParams());\n        parent?.appendChild(line);\n        break;\n      }\n      case 'Freehand': {\n        const freehandObject = shape as Freehand;\n        const freehand = document.createElementNS(svgNameSpace, 'polyline');\n        setFreehandSVGParams(freehand, freehandObject.toSVGFreehandParams());\n        parent?.appendChild(freehand);\n        break;\n      }\n      case 'Path': {\n        const pathObject = shape as Path;\n        const path = document.createElementNS(svgNameSpace, 'path');\n        setPathSVGParams(path, pathObject.toSVGPathParams());\n        parent?.append(path);\n        break;\n      }\n      case 'TextShape': {\n        const textObject = shape as TextShape;\n        const text = document.createElementNS(svgNameSpace, 'text');\n        setTextSVGParams(text, textObject);\n        parent?.append(text);\n        break;\n      }\n    }\n  };\n\nexport const convertMatchesToSVGDrawPath = (\n  match: RegExpMatchArray\n): SVGDrawPath => {\n  const command = match[0].trim();\n  const matchedCoordinates = match.slice(1);\n  if (singleDirectionCommands.includes(command)) {\n    return { command, points: matchedCoordinates.shift() };\n  }\n  const points = matchedCoordinates.reduce(\n    (acc: Coordinates[], point, index) => {\n      if (index % 2 === 0) {\n        return acc;\n      }\n      const coordinates: Coordinates = [\n        parseFloat(matchedCoordinates[index - 1]),\n        parseFloat(point),\n      ];\n      return [...acc, coordinates];\n    },\n    []\n  );\n  return { command, points };\n};\n\nexport const getPathCommands = (d: string): SVGDrawPath[] => {\n  const matches = Array.from(d.matchAll(pathCommandsRegExp)).map(\n    match => match[0]\n  );\n  const indices = matches.reduce((acc: number[], match, index) => {\n    if (pathCommandValues.includes(match)) {\n      return [...acc, index];\n    }\n    return acc;\n  }, []);\n  const segments = indices.reduce(\n    (acc: string[][], commandIndex, currentIndex) => {\n      if (currentIndex === indices.length - 1) {\n        return [...acc, matches.slice(commandIndex)];\n      }\n      return [...acc, matches.slice(commandIndex, indices[currentIndex + 1])];\n    },\n    []\n  );\n  return segments.map(convertMatchesToSVGDrawPath);\n};\n\nexport const generateSVGURLFromShapes = (shapes: ShapeType[]) => {\n  const xmlSerializer = new XMLSerializer();\n  const svgNS = 'http://www.w3.org/2000/svg';\n  const svg = document.createElementNS(svgNS, 'svg');\n  const g = document.createElementNS(svgNS, 'g');\n\n  const [allBoundaryCoordinates, allStrokeWidths] = shapes.reduce(\n    (acc: [Coordinates[], number[]], shape) => [\n      [...acc[0], ...shape.boundaries],\n      [...acc[1], parseInt(shape.getSvgParams().strokeWidth ?? '0')],\n    ],\n    [[], []]\n  );\n  const minMaxCoordinates = getMinMaxValuesOfCoordinates(\n    allBoundaryCoordinates\n  );\n\n  const maxStrokeWidth = Math.max(...allStrokeWidths);\n  const verticalOffset = minMaxCoordinates.yMin - maxStrokeWidth;\n  const horizontalOffset = minMaxCoordinates.xMin - maxStrokeWidth;\n  svg.setAttribute(\n    'height',\n    (minMaxCoordinates.yMax - verticalOffset).toString()\n  );\n  svg.setAttribute(\n    'width',\n    (minMaxCoordinates.xMax - horizontalOffset).toString()\n  );\n  g.setAttribute(\n    'transform',\n    'translate(' + -minMaxCoordinates.xMin + ',' + -minMaxCoordinates.yMin + ')'\n  );\n  svg.appendChild(g);\n\n  const appendAsSVGShape = appendAsSVGShapeGeneratorFunction(g, svgNS);\n  shapes.forEach(appendAsSVGShape);\n\n  let source = xmlSerializer.serializeToString(svg);\n  //add name spaces.\n  //https://stackoverflow.com/questions/23218174/how-do-i-save-export-an-svg-file-after-creating-an-svg-with-d3-js-ie-safari-an\n  if (!source.match(/^<svg[^>]+xmlns=\"http\\:\\/\\/www\\.w3\\.org\\/2000\\/svg\"/)) {\n    source = source.replace(/^<svg/, '<svg xmlns=\"http://www.w3.org/2000/svg\"');\n  }\n  if (!source.match(/^<svg[^>]+\"http\\:\\/\\/www\\.w3\\.org\\/1999\\/xlink\"/)) {\n    source = source.replace(\n      /^<svg/,\n      '<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\"'\n    );\n  }\n  source = '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n' + source;\n  return 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(source);\n};\n\nexport const getSVGParamsFromSVG = (\n  element: SVGGraphicsElement\n): SVGParamsBase => {\n  const fillValues = normalizeColorCode(element.getAttribute('fill'));\n  const strokeValues = normalizeColorCode(element.getAttribute('stroke'));\n  const fill = hexToRGBA(fillValues.colorCode, fillValues.opacity);\n  const stroke = hexToRGBA(strokeValues.colorCode, strokeValues.opacity);\n  const strokeWidth = element.getAttribute('stroke-width') ?? '';\n  const transformMatrix = element.getCTM() ?? undefined;\n  const fontSize = element.style.fontSize;\n  const fontFamily = element.style.fontFamily;\n  const lineDash = element\n    .getAttribute('stroke-dasharray')\n    ?.split(' ')\n    .map(parseInt);\n  const lineCap = element.getAttribute('line-cap') as CanvasLineCap | undefined;\n  const text = element.tagName === 'text' ? element.innerHTML : '';\n  const bBox = element.getBBox();\n  return {\n    fill,\n    stroke,\n    strokeWidth,\n    text,\n    fontSize: fontSize ? parseInt(fontSize) : undefined,\n    fontFamily,\n    transformMatrix,\n    lineDash,\n    lineCap,\n    bBox,\n  };\n};\n\nconst elementWrapper = (element: SVGGraphicsElement) => {\n  return {\n    getFloatAttribute: (value: string) => {\n      const attr = element.getAttribute(value);\n      if (attr) {\n        return parseFloat(attr);\n      } else return -1;\n    },\n    getAttribute: element.getAttribute,\n  };\n};\n\nconst convertToShapeType = (element: SVGGraphicsElement): ShapeType => {\n  const svgParams = getSVGParamsFromSVG(element);\n  const wrappedElement = elementWrapper(element);\n  switch (element.tagName) {\n    case acceptedTags[0]: {\n      const cx = wrappedElement.getFloatAttribute('cx');\n      const cy = wrappedElement.getFloatAttribute('cy');\n      const r = wrappedElement.getFloatAttribute('r');\n      return new Ellipse([cx, cy], r, r, svgParams);\n    }\n    case acceptedTags[1]: {\n      {\n        const cx = wrappedElement.getFloatAttribute('cx');\n        const cy = wrappedElement.getFloatAttribute('cy');\n        const rx = wrappedElement.getFloatAttribute('rx');\n        const ry = wrappedElement.getFloatAttribute('ry');\n        return new Ellipse([cx, cy], rx, ry, svgParams);\n      }\n    }\n    case acceptedTags[2]: {\n      {\n        const x = wrappedElement.getFloatAttribute('x');\n        const y = wrappedElement.getFloatAttribute('y');\n        const width = wrappedElement.getFloatAttribute('width');\n        const height = wrappedElement.getFloatAttribute('height');\n        return new Rectangle([x, y], width, height, svgParams);\n      }\n    }\n    case acceptedTags[3]: {\n      {\n        const points = (wrappedElement.getAttribute('points') ?? '')\n          .split(' ')\n          .map((coordinate): Coordinates => {\n            const [x, y] = coordinate.split(',');\n            return [parseFloat(x), parseFloat(y)];\n          });\n        return new Freehand(points, svgParams);\n      }\n    }\n    case acceptedTags[4]: {\n      {\n        const x1 = wrappedElement.getFloatAttribute('x1');\n        const x2 = wrappedElement.getFloatAttribute('x2');\n        const y1 = wrappedElement.getFloatAttribute('y1');\n        const y2 = wrappedElement.getFloatAttribute('y2');\n        return new Line([x1, y1], [x2, y2], svgParams);\n      }\n    }\n    case acceptedTags[5]: {\n      const x = wrappedElement.getFloatAttribute('x');\n      const y = wrappedElement.getFloatAttribute('y');\n      const { width, height } = element.getBBox();\n      return new TextShape(width, height, [x, y], svgParams);\n    }\n    default: {\n      const pathDString = wrappedElement.getAttribute('d') ?? '';\n      const pathCommands = getPathCommands(pathDString);\n      return new Path(pathCommands, svgParams, true);\n    }\n  }\n};\nexport const convertSVGDocumentToShapes = (id: string): ShapeType[] => {\n  const svg = document.getElementById(id);\n  if (svg) {\n    return acceptedTags\n      .map(tag =>\n        (Array.from(svg.getElementsByTagName(tag)) as SVGGraphicsElement[]).map(\n          convertToShapeType\n        )\n      )\n      .flat();\n  }\n  return [];\n};\n"]}