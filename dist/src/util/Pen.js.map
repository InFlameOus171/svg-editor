{"version":3,"file":"Pen.js","sourceRoot":"","sources":["../../../src/util/Pen.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ShapeType } from '../types/typeGuards.types';\nimport type { SVGParamsBase } from '../types/types';\nimport { typeOfShape } from './helper/typeguards';\nimport { Ellipse } from './shapes/Ellipse/Ellipse';\nimport { Freehand } from './shapes/Freehand/Freehand';\nimport { Line } from './shapes/Line/Line';\nimport { Path } from './shapes/Path/Path';\nimport { Rectangle } from './shapes/Rectangle/Rectangle';\nimport { TextShape } from './shapes/Text/Text';\n\nconst Pen = {\n  draw: (\n    shape: ShapeType,\n    svgParams: Partial<SVGParamsBase> | undefined,\n    context: CanvasRenderingContext2D\n  ) => {\n    const shapeType = typeOfShape(shape);\n    switch (shapeType) {\n      case 'Ellipse':\n        Pen.drawEllipse(shape as Ellipse, context, svgParams);\n        break;\n      case 'Rectangle':\n        Pen.drawRectangle(shape as Rectangle, context, svgParams);\n        break;\n      case 'Line':\n        Pen.drawLine(shape as Line, context, svgParams);\n        break;\n      case 'Freehand':\n        Pen.drawFreehand(shape as Freehand, context, svgParams);\n        break;\n      case 'Path':\n        Pen.drawPath(shape as Path, context, svgParams);\n        break;\n      case 'TextShape':\n        Pen.drawText(shape as TextShape, context, svgParams);\n        break;\n    }\n  },\n\n  setStyles: (\n    pathConstructor: Path2D,\n    styles: SVGParamsBase,\n    context: CanvasRenderingContext2D\n  ) => {\n    const { fill, stroke, strokeWidth, transformMatrix, lineCap, lineDash } =\n      styles;\n    if (transformMatrix) {\n      const newPath = new Path2D();\n      newPath.addPath(pathConstructor, transformMatrix);\n      pathConstructor = newPath;\n    }\n    if (lineDash) {\n      context.setLineDash(lineDash);\n    }\n    if (lineCap) {\n      context.lineCap = lineCap;\n    }\n    if (!stroke && !fill && !strokeWidth) {\n      context.stroke(pathConstructor);\n      context.fill(pathConstructor);\n      return pathConstructor;\n    }\n    if (strokeWidth) {\n      context.lineWidth = parseFloat(strokeWidth);\n    }\n    if (fill && fill !== 'none') {\n      context.fillStyle = fill;\n    }\n    if (stroke && stroke !== 'null') {\n      context.strokeStyle = stroke;\n    }\n    return pathConstructor;\n  },\n\n  drawPath: (\n    path: Path,\n    context?: CanvasRenderingContext2D | null,\n    svgParams?: Partial<SVGParamsBase>\n  ) => {\n    let pathConstructor = new Path2D(path.toString());\n    if (context) {\n      const params = {\n        ...path.getSvgParams(),\n        ...svgParams,\n      };\n      pathConstructor = Pen.setStyles(pathConstructor, params, context);\n      params.stroke && context.stroke(pathConstructor);\n      params.fill && context.fill(pathConstructor);\n      context.closePath();\n    }\n  },\n\n  drawText: (\n    textShape: TextShape,\n    context?: CanvasRenderingContext2D | null,\n    svgParams?: SVGParamsBase\n  ) => {\n    const { position, ...params } = textShape.toSVGTextParams();\n    const { text, fontSize, fontFamily, ...rest } = svgParams ?? params;\n\n    if (context && text) {\n      if (rest.stroke) {\n        context.strokeStyle = rest.stroke;\n      }\n      if (params.lineDash) {\n        context.setLineDash(params.lineDash);\n      }\n      if (params.lineCap) {\n        context.lineCap = params.lineCap;\n      }\n      if (params.strokeWidth) {\n        context.lineWidth = parseInt(params.strokeWidth);\n      }\n      context.fillStyle = rest.fill ?? '#000000';\n      context.font = (fontSize?.toString() ?? '12').concat(\n        'px ',\n        (fontFamily ?? 'Arial').toLowerCase()\n      );\n      context.fillText(text, ...position);\n      context.strokeText(text, ...position);\n      context?.closePath();\n    }\n  },\n\n  drawFreehand: (\n    freehand: Freehand,\n    context?: CanvasRenderingContext2D | null,\n    svgParams?: Partial<SVGParamsBase>\n  ) => {\n    let pathConstructor = new Path2D();\n    const points = freehand.getPoints();\n    const start = points[0];\n    const rest = points.slice(1);\n    const params = svgParams ?? freehand.getSvgParams();\n    if (context) {\n      Pen.setStyles(pathConstructor, params, context);\n      pathConstructor.moveTo(...start);\n      rest.forEach(point => {\n        pathConstructor.lineTo(...point);\n      });\n      context?.stroke(pathConstructor);\n      context?.closePath();\n    }\n  },\n\n  drawLine: (\n    line: Line,\n    context?: CanvasRenderingContext2D | null,\n    svgParams?: Partial<SVGParamsBase>\n  ) => {\n    let pathConstructor = new Path2D();\n    if (context) {\n      const params = svgParams ?? line.getSvgParams();\n      Pen.setStyles(pathConstructor, params, context);\n      const { fill, stroke } = params;\n      pathConstructor.moveTo(...line.points[0]);\n      pathConstructor.lineTo(...line.points[1]);\n      stroke && context.stroke(pathConstructor);\n      fill && context.fill(pathConstructor);\n      context.closePath();\n    }\n  },\n\n  drawRectangle: (\n    rectangle: Rectangle,\n    context?: CanvasRenderingContext2D | null,\n    svgParams?: Partial<SVGParamsBase>\n  ) => {\n    let path = new Path2D();\n    const { x, y, width, height, ...rest } = rectangle.toSvgRectParams();\n    const values = [x, y, width, height].map(parseFloat) as [\n      number,\n      number,\n      number,\n      number\n    ];\n    if (context) {\n      const params = svgParams ?? rest;\n      path = Pen.setStyles(path, params, context);\n      const { fill, stroke } = params;\n      path.rect(...values);\n      stroke && context.stroke(path);\n      fill && context.fill(path);\n      context.closePath();\n    }\n  },\n\n  drawEllipse: (\n    ellipse: Ellipse,\n    context?: CanvasRenderingContext2D | null,\n    svgParams?: Partial<SVGParamsBase>\n  ) => {\n    const path = new Path2D();\n    const { cx, cy, rx, ry, ...rest } = ellipse.toSVGEllipseParams();\n    const values = [cx, cy, rx, ry].map(parseFloat) as [\n      number,\n      number,\n      number,\n      number\n    ];\n    if (context) {\n      const params = svgParams ?? rest;\n      Pen.setStyles(path, params, context);\n      const { fill, stroke } = params;\n\n      path.ellipse(...values, 0, 0, 2 * Math.PI);\n      stroke && context.stroke(path);\n      fill && context.fill(path);\n      context?.closePath;\n    }\n  },\n\n  clearCanvas: (\n    canvas: HTMLCanvasElement,\n    canvasContext?: CanvasRenderingContext2D | null\n  ) => {\n    if (canvas) {\n      let context: CanvasRenderingContext2D | null | undefined = canvasContext;\n      if (!context) {\n        context = canvas.getContext('2d');\n      }\n      context && context.clearRect(0, 0, canvas.width, canvas.height);\n    }\n  },\n} as const;\nObject.freeze(Pen);\nexport { Pen };\n"]}