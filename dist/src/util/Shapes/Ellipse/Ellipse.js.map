{"version":3,"file":"Ellipse.js","sourceRoot":"","sources":["../../../../../src/util/shapes/Ellipse/Ellipse.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AACjC,OAAO,EAAE,mBAAmB,EAAE,MAAM,gBAAgB,CAAC;AAErD,MAAM,OAAO,OAAQ,SAAQ,KAAK;IAGhC,YACE,MAAmB,EACnB,OAAe,EACf,OAAe,EACf,SAAkC,EAClC,iBAA2B,EAC3B,WAAoB,KAAK;QAEzB,KAAK,CACH,mBAAmB,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,EAC7C,SAAS,EACT,iBAAiB,EACjB,QAAQ,CACT,CAAC;QAMJ,cAAS,GAAG,GAAG,EAAE;YACf,OAAO,IAAI,CAAC,iBAAiB,CAAC;QAChC,CAAC,CAAC;QAEF,uBAAkB,GAAG,GAAqB,EAAE,CAAC,iBAC3C,EAAE,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EACxC,EAAE,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EACxC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAC3B,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IACxB,IAAI,CAAC,YAAY,EAAE,EACtB,CAAC;QAEH,8BAAyB,GAAG,GAAG,EAAE,CAAC,CAAC;YACjC,IAAI,EAAE,SAAS;YACf,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE;YAChB,MAAM,EAAE,IAAI,CAAC,iBAAiB;YAC9B,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE;SAC/B,CAAC,CAAC;QAEH,aAAQ,GAAG,GAAG,EAAE;YACd,OAAO,IAAI,CAAC,SAAS,CAAC;gBACpB,MAAM,EAAE,IAAI,CAAC,iBAAiB;gBAC9B,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,OAAO,EAAE,IAAI,CAAC,OAAO;aACtB,CAAC,CAAC;QACL,CAAC,CAAC;QAjCA,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;CA+BF","sourcesContent":["import {\n  Coordinates,\n  SVGParamsBase,\n  EllipseSVGParams,\n} from '../../../types/types';\nimport { Shape } from '../Shape';\nimport { getCircleBoundaries } from './Ellipse.util';\n\nexport class Ellipse extends Shape {\n  radiusX: number;\n  radiusY: number;\n  constructor(\n    center: Coordinates,\n    radiusX: number,\n    radiusY: number,\n    svgParams?: Partial<SVGParamsBase>,\n    countShapeCountUp?: boolean,\n    isLocked: boolean = false\n  ) {\n    super(\n      getCircleBoundaries(center, radiusX, radiusY),\n      svgParams,\n      countShapeCountUp,\n      isLocked\n    );\n    this.calculationCenter = center;\n    this.radiusX = radiusX;\n    this.radiusY = radiusY;\n  }\n\n  getCenter = () => {\n    return this.calculationCenter;\n  };\n\n  toSVGEllipseParams = (): EllipseSVGParams => ({\n    cx: this.calculationCenter[0].toString(),\n    cy: this.calculationCenter[1].toString(),\n    rx: this.radiusX.toString(),\n    ry: this.radiusY.toString(),\n    ...this.getSvgParams(),\n  });\n\n  getDeconstructedShapeData = () => ({\n    type: 'Ellipse',\n    id: this.getId(),\n    center: this.calculationCenter,\n    radiusX: this.radiusX,\n    radiusY: this.radiusY,\n    isLocked: this.isLocked,\n    svgParams: this.getSvgParams(),\n  });\n\n  toString = () => {\n    return JSON.stringify({\n      center: this.calculationCenter,\n      radiusX: this.radiusX,\n      radiusY: this.radiusY,\n    });\n  };\n}\n"]}