{"version":3,"file":"Ellipse.js","sourceRoot":"","sources":["../../../../../src/util/shapes/Ellipse/Ellipse.ts"],"names":[],"mappings":";;AAKA,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AACjC,OAAO,EAAE,mBAAmB,EAAE,MAAM,gBAAgB,CAAC;AAErD,MAAM,OAAO,OAAQ,SAAQ,KAAK;IAIhC,YACE,MAAmB,EACnB,OAAe,EACf,OAAe,EACf,SAAkC,EAClC,iBAA2B,EAC3B,WAAoB,KAAK;QAEzB,KAAK,CACH,mBAAmB,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,EAC7C,SAAS,EACT,iBAAiB,EACjB,QAAQ,CACT,CAAC;QAhBJ,kCAAqB;QAsBrB,WAAM,GAAG,CAAC,WAAwB,EAAE,EAAE;YACpC,MAAM,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,uBAAA,IAAI,uBAAQ,CAAC,CAAC,CAAC,CAAC;YACrD,MAAM,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,uBAAA,IAAI,uBAAQ,CAAC,CAAC,CAAC,CAAC;YACrD,uBAAA,IAAI,mBAAW,WAAW,MAAA,CAAC;YAC3B,IAAI,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC;QAEF,cAAS,GAAG,GAAG,EAAE;YACf,OAAO,uBAAA,IAAI,uBAAQ,CAAC;QACtB,CAAC,CAAC;QAEF,iBAAY,GAAG,GAAG,EAAE,CAAC,CAAC;YACpB,EAAE,EAAE,uBAAA,IAAI,uBAAQ,CAAC,CAAC,CAAC;YACnB,EAAE,EAAE,uBAAA,IAAI,uBAAQ,CAAC,CAAC,CAAC;YACnB,EAAE,EAAE,IAAI,CAAC,OAAO;YAChB,EAAE,EAAE,IAAI,CAAC,OAAO;SACjB,CAAC,CAAC;QAEH,uBAAkB,GAAG,GAAqB,EAAE,CAAC,iBAC3C,EAAE,EAAE,uBAAA,IAAI,uBAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EAC9B,EAAE,EAAE,uBAAA,IAAI,uBAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EAC9B,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAC3B,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IACxB,IAAI,CAAC,YAAY,EAAE,EACtB,CAAC;QAEH,8BAAyB,GAAG,GAAG,EAAE,CAAC,CAAC;YACjC,IAAI,EAAE,SAAS;YACf,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE;YAChB,MAAM,EAAE,uBAAA,IAAI,uBAAQ;YACpB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE;SAC/B,CAAC,CAAC;QAEH,aAAQ,GAAG,GAAG,EAAE;YACd,OAAO,IAAI,CAAC,SAAS,CAAC;gBACpB,MAAM,EAAE,uBAAA,IAAI,uBAAQ;gBACpB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,OAAO,EAAE,IAAI,CAAC,OAAO;aACtB,CAAC,CAAC;QACL,CAAC,CAAC;QA/CA,uBAAA,IAAI,mBAAW,MAAM,MAAA,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;CA6CF","sourcesContent":["import {\n  Coordinates,\n  SVGParamsBase,\n  EllipseSVGParams,\n} from '../../../types/types';\nimport { Shape } from '../Shape';\nimport { getCircleBoundaries } from './Ellipse.util';\n\nexport class Ellipse extends Shape {\n  #center: Coordinates;\n  radiusX: number;\n  radiusY: number;\n  constructor(\n    center: Coordinates,\n    radiusX: number,\n    radiusY: number,\n    svgParams?: Partial<SVGParamsBase>,\n    countShapeCountUp?: boolean,\n    isLocked: boolean = false\n  ) {\n    super(\n      getCircleBoundaries(center, radiusX, radiusY),\n      svgParams,\n      countShapeCountUp,\n      isLocked\n    );\n    this.#center = center;\n    this.radiusX = radiusX;\n    this.radiusY = radiusY;\n  }\n\n  moveTo = (coordinates: Coordinates) => {\n    const xDifference = coordinates[0] - this.#center[0];\n    const yDifference = coordinates[1] - this.#center[1];\n    this.#center = coordinates;\n    this.moveBoundaries([xDifference, yDifference]);\n  };\n\n  getCenter = () => {\n    return this.#center;\n  };\n\n  toPathParams = () => ({\n    cx: this.#center[0],\n    cy: this.#center[1],\n    rx: this.radiusX,\n    ry: this.radiusY,\n  });\n\n  toSVGEllipseParams = (): EllipseSVGParams => ({\n    cx: this.#center[0].toString(),\n    cy: this.#center[1].toString(),\n    rx: this.radiusX.toString(),\n    ry: this.radiusY.toString(),\n    ...this.getSvgParams(),\n  });\n\n  getDeconstructedShapeData = () => ({\n    type: 'Ellipse',\n    id: this.getId(),\n    center: this.#center,\n    radiusX: this.radiusX,\n    radiusY: this.radiusY,\n    isLocked: this.isLocked,\n    svgParams: this.getSvgParams(),\n  });\n\n  toString = () => {\n    return JSON.stringify({\n      center: this.#center,\n      radiusX: this.radiusX,\n      radiusY: this.radiusY,\n    });\n  };\n}\n"]}