{"version":3,"file":"Text.js","sourceRoot":"","sources":["../../../../src/util/Shapes/Text.ts"],"names":[],"mappings":";;AAKA,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAC1D,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,MAAM,OAAO,SAAU,SAAQ,KAAK;IAIlC,YACE,KAAa,EACb,MAAc,EACd,QAAqB,EACrB,SAAwB,EACxB,iBAA2B,EAC3B,WAAoB,KAAK;QAEzB,KAAK,CACH,iBAAiB,CAAC,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC,EAC1C,SAAS,EACT,iBAAiB,EACjB,QAAQ,CACT,CAAC;QAhBJ,sCAAuB;QACvB,oCAAgB;QAChB,mCAAe;QAoBf,YAAO,GAAG,GAAG,EAAE;YACb,OAAO,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC,CAAC;QAEF,cAAS,GAAG,GAAG,EAAE;YACf,OAAO,uBAAA,IAAI,yBAAQ,CAAC;QACtB,CAAC,CAAC;QAEF,aAAQ,GAAG,GAAG,EAAE;YACd,OAAO,uBAAA,IAAI,wBAAO,CAAC;QACrB,CAAC,CAAC;QAEF,WAAM,GAAG,CAAC,WAAwB,EAAE,EAAE;YACpC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG;gBACf,WAAW,CAAC,CAAC,CAAC,GAAG,uBAAA,IAAI,2BAAU,CAAC,CAAC,CAAC;gBAClC,WAAW,CAAC,CAAC,CAAC,GAAG,uBAAA,IAAI,2BAAU,CAAC,CAAC,CAAC;aACnC,CAAC;YACF,uBAAA,IAAI,uBAAa,WAAW,MAAA,CAAC;YAC7B,IAAI,CAAC,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC;QAEF,iBAAY,GAAG,GAAG,EAAE,CAAC,CAAC;YACpB,QAAQ,EAAE,uBAAA,IAAI,2BAAU;SACzB,CAAC,CAAC;QAEH,cAAS,GAAG,GAAgB,EAAE,CAAC,uBAAA,IAAI,2BAAU,CAAC;QAE9C,8BAAyB,GAAG,GAAG,EAAE,CAAC,CAAC;YACjC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE;YAChB,IAAI,EAAE,WAAW;YACjB,KAAK,EAAE,uBAAA,IAAI,wBAAO;YAClB,MAAM,EAAE,uBAAA,IAAI,yBAAQ;YACpB,QAAQ,EAAE,uBAAA,IAAI,2BAAU;YACxB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE;SAC/B,CAAC,CAAC;QAEH,oBAAe,GAAG,GAAkB,EAAE;YACpC,uBACE,QAAQ,EAAE,uBAAA,IAAI,2BAAU,IACrB,IAAI,CAAC,YAAY,EAAE,EACtB;QACJ,CAAC,CAAC;QA/CA,uBAAA,IAAI,oBAAU,KAAK,MAAA,CAAC;QACpB,uBAAA,IAAI,qBAAW,MAAM,MAAA,CAAC;QACtB,uBAAA,IAAI,uBAAa,QAAQ,MAAA,CAAC;IAC5B,CAAC;CA6CF","sourcesContent":["import type {\r\n  Coordinates,\r\n  SVGParamsBase,\r\n  TextSVGParams,\r\n} from '../../types/types';\r\nimport { getTextBoundaries } from '../helper/coordinates';\r\nimport { Shape } from './Shape';\r\n\r\nexport class TextShape extends Shape {\r\n  #position: Coordinates;\r\n  #height: number;\r\n  #width: number;\r\n  constructor(\r\n    width: number,\r\n    height: number,\r\n    position: Coordinates,\r\n    svgParams: SVGParamsBase,\r\n    countShapecountUp?: boolean,\r\n    isLocked: boolean = false\r\n  ) {\r\n    super(\r\n      getTextBoundaries(position, width, height),\r\n      svgParams,\r\n      countShapecountUp,\r\n      isLocked\r\n    );\r\n    this.#width = width;\r\n    this.#height = height;\r\n    this.#position = position;\r\n  }\r\n\r\n  getText = () => {\r\n    return this.text;\r\n  };\r\n\r\n  getHeight = () => {\r\n    return this.#height;\r\n  };\r\n\r\n  getWidth = () => {\r\n    return this.#width;\r\n  };\r\n\r\n  moveTo = (coordinates: Coordinates) => {\r\n    const [dx, dy] = [\r\n      coordinates[0] - this.#position[0],\r\n      coordinates[1] - this.#position[1],\r\n    ];\r\n    this.#position = coordinates;\r\n    this.moveBoundaries([dx, dy]);\r\n  };\r\n\r\n  toPathParams = () => ({\r\n    position: this.#position,\r\n  });\r\n\r\n  getCenter = (): Coordinates => this.#position;\r\n\r\n  getDeconstructedShapeData = () => ({\r\n    id: this.getId(),\r\n    type: 'TextShape',\r\n    width: this.#width,\r\n    height: this.#height,\r\n    position: this.#position,\r\n    isLocked: this.isLocked,\r\n    svgParams: this.getSvgParams(),\r\n  });\r\n\r\n  toSVGTextParams = (): TextSVGParams => {\r\n    return {\r\n      position: this.#position,\r\n      ...this.getSvgParams(),\r\n    };\r\n  };\r\n}\r\n"]}