{"version":3,"file":"Path.util.js","sourceRoot":"","sources":["../../../../../src/util/shapes/Path/Path.util.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  SVGDrawPath,\n  Coordinates,\n  BoundaryCoordinates,\n} from '../../../types/types';\nimport {\n  sumOfCoordinates,\n  getBoundaryFromCoordinates,\n} from '../../helper/coordinates';\nimport { relativeCommands, singleDirectionCommands } from '../../helper/util';\n\nexport const getPointsOfDrawPath = (drawPath: SVGDrawPath[]) => {\n  return drawPath.reduce(\n    (acc: Array<Coordinates>, currentDrawPath: SVGDrawPath) => {\n      if (!currentDrawPath.points) {\n        return acc;\n      }\n      if (Array.isArray(currentDrawPath.points)) {\n        if (singleDirectionCommands.includes(currentDrawPath.command)) {\n          switch (currentDrawPath.command) {\n            case 'H':\n            case 'h': {\n              return [\n                ...acc,\n                [0, parseFloat(currentDrawPath.points[0] as unknown as string)],\n              ] as Coordinates[];\n            }\n            case 'V':\n            case 'v': {\n              return [\n                ...acc,\n                [parseFloat(currentDrawPath.points[0] as unknown as string), 0],\n              ] as Coordinates[];\n            }\n          }\n        }\n      }\n      return [...acc, ...(currentDrawPath.points as Coordinates[])];\n    },\n    []\n  );\n};\n\nexport const relativePathToAbsolutePath = (\n  drawPath: SVGDrawPath[],\n  offset?: Coordinates\n) => {\n  let lastAbsolutePoint: Coordinates = [0, 0];\n  const drawPathWithAbsolutePoints = drawPath.reduce(\n    (acc: SVGDrawPath[], innerDrawPath): SVGDrawPath[] => {\n      if (!Array.isArray(innerDrawPath.points)) {\n        return [\n          ...acc,\n          {\n            command: innerDrawPath.command.toUpperCase(),\n            points: innerDrawPath.points,\n          },\n        ];\n      }\n      if (relativeCommands.includes(innerDrawPath.command)) {\n        const newDrawPathPoints = innerDrawPath.points.reduce(\n          (allNewPoints: Coordinates[], point: Coordinates, index: number) => {\n            if (innerDrawPath.command === 'c') {\n              if (index % 3 === 2) {\n                lastAbsolutePoint = [\n                  lastAbsolutePoint[0] + 1.05 * point[0],\n                  lastAbsolutePoint[1] + 1.05 * point[1],\n                ];\n                return [...allNewPoints, lastAbsolutePoint];\n              }\n              return allNewPoints;\n            }\n            if (index === 0) {\n              lastAbsolutePoint = [\n                lastAbsolutePoint[0] + point[0],\n                lastAbsolutePoint[1] + point[1],\n              ];\n              return [lastAbsolutePoint];\n            } else {\n              lastAbsolutePoint = [\n                lastAbsolutePoint[0] + point[0],\n                lastAbsolutePoint[1] + point[1],\n              ];\n              return [...allNewPoints, lastAbsolutePoint] as Coordinates[];\n            }\n          },\n          []\n        );\n        return [\n          ...acc,\n          {\n            command: innerDrawPath.command.toUpperCase(),\n            points: newDrawPathPoints,\n          },\n        ];\n      } else {\n        return [\n          ...acc,\n          {\n            command: innerDrawPath.command,\n            points: offset\n              ? innerDrawPath.points.map(sumOfCoordinates(offset))\n              : innerDrawPath.points,\n          },\n        ];\n      }\n    },\n    []\n  );\n  return drawPathWithAbsolutePoints;\n};\n\nexport const getPathBoundaries = (\n  drawPath: SVGDrawPath[]\n): BoundaryCoordinates => {\n  const absoluteDrawPath = relativePathToAbsolutePath(drawPath);\n  const absolutePointsOfDrawPath = getPointsOfDrawPath(absoluteDrawPath);\n  return getBoundaryFromCoordinates(absolutePointsOfDrawPath);\n};\n"]}