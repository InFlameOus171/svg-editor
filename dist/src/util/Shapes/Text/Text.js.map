{"version":3,"file":"Text.js","sourceRoot":"","sources":["../../../../../src/util/shapes/Text/Text.ts"],"names":[],"mappings":";;AAKA,OAAO,EAAE,iBAAiB,EAAE,MAAM,0BAA0B,CAAC;AAC7D,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AAEjC,MAAM,OAAO,SAAU,SAAQ,KAAK;IAIlC,YACE,KAAa,EACb,MAAc,EACd,QAAqB,EACrB,SAAwB,EACxB,iBAA2B,EAC3B,WAAoB,KAAK;QAEzB,KAAK,CACH,iBAAiB,CAAC,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC,EAC1C,SAAS,EACT,iBAAiB,EACjB,QAAQ,CACT,CAAC;QAhBJ,sCAAuB;QACvB,oCAAgB;QAChB,mCAAe;QAoBf,YAAO,GAAG,GAAG,EAAE;YACb,OAAO,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC,CAAC;QAEF,cAAS,GAAG,GAAG,EAAE;YACf,OAAO,uBAAA,IAAI,yBAAQ,CAAC;QACtB,CAAC,CAAC;QAEF,aAAQ,GAAG,GAAG,EAAE;YACd,OAAO,uBAAA,IAAI,wBAAO,CAAC;QACrB,CAAC,CAAC;QAEF,WAAM,GAAG,CAAC,WAAwB,EAAE,EAAE;YACpC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG;gBACf,WAAW,CAAC,CAAC,CAAC,GAAG,uBAAA,IAAI,2BAAU,CAAC,CAAC,CAAC;gBAClC,WAAW,CAAC,CAAC,CAAC,GAAG,uBAAA,IAAI,2BAAU,CAAC,CAAC,CAAC;aACnC,CAAC;YACF,uBAAA,IAAI,uBAAa,WAAW,MAAA,CAAC;YAC7B,IAAI,CAAC,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC;QAEF,cAAS,GAAG,GAAgB,EAAE,CAAC,uBAAA,IAAI,2BAAU,CAAC;QAE9C,8BAAyB,GAAG,GAAG,EAAE,CAAC,CAAC;YACjC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE;YAChB,IAAI,EAAE,WAAW;YACjB,KAAK,EAAE,uBAAA,IAAI,wBAAO;YAClB,MAAM,EAAE,uBAAA,IAAI,yBAAQ;YACpB,QAAQ,EAAE,uBAAA,IAAI,2BAAU;YACxB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE;SAC/B,CAAC,CAAC;QAEH,oBAAe,GAAG,GAAkB,EAAE;YACpC,uBACE,QAAQ,EAAE,uBAAA,IAAI,2BAAU,IACrB,IAAI,CAAC,YAAY,EAAE,EACtB;QACJ,CAAC,CAAC;QA3CA,uBAAA,IAAI,oBAAU,KAAK,MAAA,CAAC;QACpB,uBAAA,IAAI,qBAAW,MAAM,MAAA,CAAC;QACtB,uBAAA,IAAI,uBAAa,QAAQ,MAAA,CAAC;IAC5B,CAAC;CAyCF","sourcesContent":["import type {\n  Coordinates,\n  SVGParamsBase,\n  TextSVGParams,\n} from '../../../types/types';\nimport { getTextBoundaries } from '../../helper/coordinates';\nimport { Shape } from '../Shape';\n\nexport class TextShape extends Shape {\n  #position: Coordinates;\n  #height: number;\n  #width: number;\n  constructor(\n    width: number,\n    height: number,\n    position: Coordinates,\n    svgParams: SVGParamsBase,\n    countShapecountUp?: boolean,\n    isLocked: boolean = false\n  ) {\n    super(\n      getTextBoundaries(position, width, height),\n      svgParams,\n      countShapecountUp,\n      isLocked\n    );\n    this.#width = width;\n    this.#height = height;\n    this.#position = position;\n  }\n\n  getText = () => {\n    return this.text;\n  };\n\n  getHeight = () => {\n    return this.#height;\n  };\n\n  getWidth = () => {\n    return this.#width;\n  };\n\n  moveTo = (coordinates: Coordinates) => {\n    const [dx, dy] = [\n      coordinates[0] - this.#position[0],\n      coordinates[1] - this.#position[1],\n    ];\n    this.#position = coordinates;\n    this.moveBoundaries([dx, dy]);\n  };\n\n  getCenter = (): Coordinates => this.#position;\n\n  getDeconstructedShapeData = () => ({\n    id: this.getId(),\n    type: 'TextShape',\n    width: this.#width,\n    height: this.#height,\n    position: this.#position,\n    isLocked: this.isLocked,\n    svgParams: this.getSvgParams(),\n  });\n\n  toSVGTextParams = (): TextSVGParams => {\n    return {\n      position: this.#position,\n      ...this.getSvgParams(),\n    };\n  };\n}\n"]}