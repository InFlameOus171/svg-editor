{"version":3,"file":"Shape.js","sourceRoot":"","sources":["../../../../src/util/shapes/Shape.ts"],"names":[],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid';\nimport type {\n  BoundaryCoordinates,\n  Coordinates,\n  SVGParamsBase,\n} from '../../types/types';\nimport { textPlaceHolder } from '../helper/constants';\nimport { getTextBoundaries } from '../helper/coordinates';\nimport { measureText } from '../helper/shapes';\nimport { isText } from '../helper/typeguards';\n\nexport abstract class Shape {\n  static #counter: number = 0;\n\n  #fill?: string;\n  #id: string;\n  #stroke?: string;\n  #strokeWidth?: string;\n  #lineCap?: CanvasLineCap;\n  #lineDash?: number[];\n  #fontSize?: number;\n  #fontFamily?: string;\n  isLocked: boolean = false;\n  text: string = textPlaceHolder;\n  transformMatrix?: DOMMatrix;\n  boundaries: BoundaryCoordinates;\n  calculationCenter: Coordinates = [-1, -1];\n  index: number = 0;\n\n  constructor(\n    boundaries: BoundaryCoordinates = [\n      [-1, -1],\n      [-1, -1],\n      [-1, -1],\n      [-1, -1],\n    ],\n    svgParams: Partial<SVGParamsBase> = {},\n    countShapecountUp: boolean = true,\n    isLocked: boolean = false\n  ) {\n    if (countShapecountUp) {\n      Shape.#counter++;\n    }\n    this.#id = nanoid();\n    this.#fill = svgParams.fill ?? 'rgba(0,0,0,0)';\n    this.#stroke = svgParams.stroke ?? 'rgba(0,0,0,1)';\n    this.#strokeWidth = svgParams.strokeWidth ?? '1';\n    this.#lineDash = svgParams.lineDash ?? [0];\n    this.#fontSize = svgParams.fontSize ?? 18;\n    this.#fontFamily = svgParams.fontFamily ?? 'Arial';\n    this.text = svgParams.text ?? this.text;\n    this.transformMatrix = svgParams.transformMatrix;\n    this.boundaries = boundaries;\n    this.isLocked = isLocked;\n    this.index = Shape.#counter;\n  }\n\n  moveTransformMatrix = (x: number, y: number) => {\n    const { a, b, c, d, e, f } = this.transformMatrix || new DOMMatrix();\n    this.transformMatrix = new DOMMatrix([a, b, c, d, e + x, f + y]);\n  };\n\n  updateSVGParam = (field: keyof SVGParamsBase, value: any) => {\n    const currentParams = this.getSvgParams();\n    currentParams[field] = value;\n    this.updateSVGParams(currentParams);\n  };\n\n  updateSVGParams = (newParams: SVGParamsBase) => {\n    this.#fill = newParams.fill;\n    this.#stroke = newParams.stroke;\n    this.#strokeWidth = newParams.strokeWidth;\n    this.#lineCap = newParams.lineCap;\n    this.#lineDash = newParams.lineDash;\n    this.#fontFamily = newParams.fontFamily;\n    this.#fontSize = newParams.fontSize;\n    if (isText(this)) {\n      this.text = newParams.text ?? this.text;\n      const measures = measureText(this.text, this.getSvgParams());\n      if (measures) {\n        this.boundaries = getTextBoundaries(\n          this.getCenter(),\n          measures?.width,\n          measures?.height\n        );\n      }\n    }\n  };\n\n  replaceID = (id: string) => {\n    this.#id = id;\n    return this;\n  };\n\n  moveBoundaries = (difference: Coordinates) => {\n    const [xDifference, yDifference] = difference;\n    this.boundaries = this.boundaries?.map(\n      boundary =>\n        [boundary[0] + xDifference, boundary[1] + yDifference] as Coordinates\n    ) as BoundaryCoordinates;\n  };\n\n  getSvgParams = (): SVGParamsBase => {\n    return {\n      fill: this.#fill,\n      stroke: this.#stroke,\n      strokeWidth: this.#strokeWidth,\n      transformMatrix: this.transformMatrix,\n      lineCap: this.#lineCap,\n      lineDash: this.#lineDash,\n      fontSize: this.#fontSize,\n      fontFamily: this.#fontFamily,\n      text: this.text,\n    };\n  };\n\n  getId = () => {\n    return this.#id;\n  };\n\n  getCenter = (): Coordinates => {\n    return this.calculationCenter;\n  };\n\n  moveTo = (coordinates: Coordinates) => {\n    const [dx, dy] = [\n      coordinates[0] - this.calculationCenter[0],\n      coordinates[1] - this.calculationCenter[1],\n    ];\n    this.calculationCenter = coordinates;\n    this.moveBoundaries([dx, dy]);\n  };\n  toString = (): string => {\n    throw new Error('not implemented');\n  };\n\n  getDeconstructedShapeData = (): any => {\n    throw new Error('not implemented');\n  };\n}\n"]}