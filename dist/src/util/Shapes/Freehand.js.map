{"version":3,"file":"Freehand.js","sourceRoot":"","sources":["../../../../src/util/Shapes/Freehand.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\r\n  Coordinates,\r\n  FreehandSVGParams,\r\n  SVGParamsBase,\r\n} from '../../types/types';\r\nimport { getFreehandBoundaries } from './Freehand.util';\r\nimport { Shape } from './Shape';\r\n\r\nexport class Freehand extends Shape {\r\n  #points: Coordinates[];\r\n  #center: Coordinates = [-1, -1];\r\n\r\n  constructor(\r\n    points: Coordinates[],\r\n    svgParams?: Partial<SVGParamsBase>,\r\n    countShapecountUp?: boolean,\r\n    isLocked: boolean = false\r\n  ) {\r\n    super(\r\n      getFreehandBoundaries(points),\r\n      svgParams,\r\n      countShapecountUp,\r\n      isLocked\r\n    );\r\n    this.#points = points;\r\n    this.#updateCenter();\r\n  }\r\n\r\n  #updateCenter = () => {\r\n    const sumOfCoordinates = this.boundaries.reduce(\r\n      (acc, boundaryCoordinate) => [\r\n        acc[0] + boundaryCoordinate[0],\r\n        acc[1] + boundaryCoordinate[1],\r\n      ],\r\n      [0, 0]\r\n    );\r\n    this.#center = [sumOfCoordinates[0] / 4, sumOfCoordinates[1] / 4];\r\n  };\r\n\r\n  getCenter = () => {\r\n    return this.#center;\r\n  };\r\n\r\n  moveTo = (coordinates: Coordinates) => {\r\n    const xDifference = coordinates[0] - this.#center[0];\r\n    const yDifference = coordinates[1] - this.#center[1];\r\n    this.#points = this.#points.map(point => [\r\n      point[0] + xDifference,\r\n      point[1] + yDifference,\r\n    ]);\r\n    this.#updateCenter();\r\n    this.moveBoundaries([xDifference, yDifference]);\r\n  };\r\n\r\n  getPoints = () => {\r\n    return this.#points;\r\n  };\r\n\r\n  toSVGFreehandParams = (): FreehandSVGParams => ({\r\n    points: this.toString(),\r\n    ...this.getSvgParams(),\r\n  });\r\n\r\n  getDeconstructedShapeData = () => ({\r\n    id: this.getId(),\r\n    type: 'Freehand',\r\n    points: this.#points,\r\n    isLocked: this.isLocked,\r\n    svgParams: this.getSvgParams(),\r\n  });\r\n\r\n  toString = () => {\r\n    return this.#points\r\n      .reduce((acc, point) => {\r\n        return acc.concat(`${point[0]}`, ',', `${point[1]}`, ' ');\r\n      }, '')\r\n      .trim();\r\n  };\r\n}\r\n"]}