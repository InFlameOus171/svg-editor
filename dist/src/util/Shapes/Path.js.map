{"version":3,"file":"Path.js","sourceRoot":"","sources":["../../../../src/util/Shapes/Path.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  BoundaryCoordinates,\n  Coordinates,\n  SVGDrawPath,\n  SVGParamsBase,\n} from '../../types/types';\nimport { sumOfCoordinates } from '../helper/coordinates';\nimport { singleDirectionCommands } from '../helper/util';\nimport { getPathBoundaries } from './Path.util';\nimport { Shape } from './Shape';\n\nexport class Path extends Shape {\n  drawPath: SVGDrawPath[];\n  #rawDrawPath: SVGDrawPath[];\n  #center: Coordinates = [-1, -1];\n\n  constructor(\n    drawPath: SVGDrawPath[],\n    svgParams?: Partial<SVGParamsBase>,\n    dontCountUp?: boolean,\n    isLocked: boolean = false\n  ) {\n    super(undefined, svgParams, dontCountUp, isLocked);\n    this.#rawDrawPath = drawPath;\n    this.drawPath = drawPath.map(path => {\n      if (singleDirectionCommands.includes(path.command)) {\n        return { command: path.command, points: path.points };\n      }\n      return {\n        command: path.command,\n        points: path.points,\n      };\n    });\n    if (svgParams?.bBox) {\n      const { x, y, width, height } = svgParams.bBox;\n      const boundaries = [\n        [x, y],\n        [x, y + height],\n        [x + width, y],\n        [x + width, y + height],\n      ];\n      this.boundaries = boundaries.map(boundary => {\n        const point = new DOMPoint(boundary[0], boundary[1]);\n        const transformedPoint = point.matrixTransform(this.transformMatrix);\n        return [transformedPoint.x, transformedPoint.y];\n      }) as BoundaryCoordinates;\n    } else {\n      this.boundaries = getPathBoundaries(this.drawPath);\n    }\n    const sumOfBoundaries = this.boundaries.reduce(\n      (acc, curr) => sumOfCoordinates(acc)(curr),\n      [0, 0]\n    );\n    this.#center = [sumOfBoundaries[0] / 4, sumOfBoundaries[1] / 4];\n  }\n\n  getCenter: () => Coordinates = () => {\n    return this.#center;\n  };\n\n  toSVGPathParams = () => ({\n    d: this.toString(),\n    ...this.getSvgParams(),\n  });\n\n  getDeconstructedShapeData = () => ({\n    id: this.getId(),\n    type: 'Path',\n    drawPath: this.#rawDrawPath,\n    isLocked: this.isLocked,\n    svgParams: this.getSvgParams(),\n  });\n\n  moveTo = (coordinates: Coordinates) => {\n    const [dx, dy] = [\n      coordinates[0] - this.#center[0],\n      coordinates[1] - this.#center[1],\n    ];\n    this.moveTransformMatrix(dx, dy);\n    this.#center = [this.#center[0] + dx, this.#center[1] + dy];\n    this.boundaries = this.boundaries.map(boundary => [\n      boundary[0] + dx,\n      boundary[1] + dy,\n    ]) as BoundaryCoordinates;\n  };\n\n  toString = (): string => {\n    const result = this.drawPath.reduce(\n      (acc: string, pathValue: SVGDrawPath) => {\n        return acc\n          .concat(\n            ' ',\n            pathValue.command,\n            ' ',\n            Array.isArray(pathValue.points)\n              ? pathValue.points.reduce(\n                  (acc: string, point: Coordinates) =>\n                    acc.concat(\n                      [point[0].toString(), point[1].toString()].join(),\n                      ' '\n                    ),\n                  ''\n                )\n              : pathValue.points ?? '',\n            ' '\n          )\n          .trim();\n      },\n      ''\n    );\n    return result;\n  };\n}\n"]}