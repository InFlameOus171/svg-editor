{"version":3,"file":"Editor.js","sourceRoot":"","sources":["../../../src/util/Editor.ts"],"names":[],"mappings":"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","sourcesContent":["import { FooterFields } from '../components/molecules/FooterFields';\nimport { updateStyleInputFields } from '../components/molecules/FooterFields/FooterFields.util';\nimport {\n  setIsButtonDisabled,\n  setIsButtonActive,\n} from '../components/molecules/ToolBox/ToolBox.util';\nimport { SVGEditor } from '../components/organisms/SVGEditor';\nimport type { ShapeType } from '../types/shapes.types';\nimport type { Coordinates, SVGParamsBase } from '../types/types';\nimport {\n  highlightStyle,\n  SVGParamFieldID,\n  textPlaceHolder,\n  Tools_List,\n} from './helper/constants';\nimport { generateSVGURLFromShapes } from './helper/svgUtil';\nimport {\n  isMoveTool,\n  isShapeType,\n  isText,\n  typeOfShape,\n} from './helper/typeguards';\nimport { Connection } from './network';\nimport { Pen } from './Pen';\nimport { Ellipse } from './shapes/Ellipse/Ellipse';\nimport { Freehand } from './shapes/Freehand/Freehand';\nimport { Line } from './shapes/Line/Line';\nimport { Rectangle } from './shapes/Rectangle/Rectangle';\nimport { TextShape } from './shapes/Text/Text';\nimport { DrawTool } from './tools/DrawTool/DrawTool';\nimport { EllipseTool } from './tools/EllipseTool/EllipseTool';\nimport { ImportTool } from './tools/ImportTool/ImportTool';\nimport { LineTool } from './tools/LineTool/LineTool';\nimport { MoveTool } from './tools/MoveTool/MoveTool';\nimport { RectangleTool } from './tools/RectangleTool/RectangleTool';\nimport { SelectTool } from './tools/SelectTool/SelectTool';\nimport { TextTool } from './tools/TextTool/TextTool';\nimport {\n  paramFieldStateHandler,\n  setTextParamsSourceVisibility,\n} from './tools/TextTool/TextTool.util';\nimport { Tool } from './tools/Tool';\n\nexport class Editor {\n  #selectedTool: Tool<ShapeType> | null = null;\n  #drawLayer: HTMLCanvasElement | null = null;\n  #previewLayer: HTMLCanvasElement | null = null;\n  #connection?: Connection;\n  #self: SVGEditor;\n  #footerFieldsRef: FooterFields;\n  #offset: Coordinates;\n  #shapes: ShapeType[] = [];\n  #currentParams: SVGParamsBase = {\n    strokeWidth: '1',\n    stroke: 'rgba(0,0,0,1)',\n    fill: 'rgba(0,0,0,0)',\n    lineDash: [0],\n    text: textPlaceHolder,\n  };\n  #isShapeOnlyBeingSelected: boolean = false;\n  #setAreFieldsEnabled: (\n    fieldName: SVGParamFieldID[],\n    isEnabled?: boolean\n  ) => void;\n  #selectedShape?: ShapeType | null = null;\n  #drawContext: CanvasRenderingContext2D | null;\n  #previewContext: CanvasRenderingContext2D | null;\n  constructor(\n    drawLayer: HTMLCanvasElement,\n    previewLayer: HTMLCanvasElement,\n    offset: Coordinates,\n    self: SVGEditor,\n    footerFieldsRef: FooterFields\n  ) {\n    this.#drawLayer = drawLayer;\n    this.#previewLayer = previewLayer;\n    this.#self = self;\n    this.#offset = offset;\n    this.#footerFieldsRef = footerFieldsRef;\n    this.#currentParams = {\n      text: textPlaceHolder,\n      strokeWidth: '1',\n      stroke: 'rgba(0,0,0,1)',\n      fill: 'rgba(0,0,0,0)',\n    };\n    this.#drawContext = this.#drawLayer?.getContext('2d');\n    this.#previewContext = this.#previewLayer?.getContext('2d');\n    this.#setAreFieldsEnabled = paramFieldStateHandler(\n      this.#footerFieldsRef\n    ).setAreFieldsEnabled;\n    this.#setAreFieldsEnabled(Object.values(SVGParamFieldID), false);\n    updateStyleInputFields(this.#footerFieldsRef, this.#currentParams);\n\n    window.addEventListener('resize', () => {\n      setTimeout(() => this.redrawShapes(), 50);\n    });\n  }\n\n  getSVGParams = () => ({\n    ...this.#currentParams,\n  });\n\n  #createShape = (shapeRecord: Record<string, any>): ShapeType | undefined => {\n    switch (shapeRecord.type) {\n      case 'Ellipse': {\n        const { id, center, radiusX, radiusY, isLocked, svgParams } =\n          shapeRecord;\n        return new Ellipse(\n          center,\n          radiusX,\n          radiusY,\n          svgParams,\n          true,\n          isLocked\n        ).replaceID(id);\n      }\n      case 'Rectangle':\n        const { width, height, id, startingCorner, isLocked, svgParams } =\n          shapeRecord;\n        return new Rectangle(\n          startingCorner,\n          width,\n          height,\n          svgParams,\n          true,\n          isLocked\n        ).replaceID(id);\n      case 'TextShape': {\n        const { id, width, height, position, svgParams, isLocked } =\n          shapeRecord;\n        return new TextShape(\n          width,\n          height,\n          position,\n          svgParams,\n          true,\n          isLocked\n        ).replaceID(id);\n      }\n      case 'Freehand': {\n        const { id, isLocked, svgParams, points } = shapeRecord;\n        return new Freehand(points, svgParams, true, isLocked).replaceID(id);\n      }\n      case 'Line': {\n        const { id, isLocked, startPoint, endPoint, svgParams } = shapeRecord;\n        return new Line(\n          startPoint,\n          endPoint,\n          svgParams,\n          true,\n          isLocked\n        ).replaceID(id);\n      }\n      case 'Path':\n        break;\n    }\n  };\n\n  updateShapes = (shapes: Array<Record<string, any>>) => {\n    if (!shapes.length) {\n      this.#shapes = [];\n      this.#selectedShape = null;\n    } else {\n      shapes.forEach((shape: Record<string, any>) => {\n        let shapeAsShapeType: ShapeType | undefined;\n        if (isShapeType(shape)) {\n          shapeAsShapeType = shape;\n        } else {\n          shapeAsShapeType = this.#createShape(shape);\n        }\n        if (!shapeAsShapeType) return;\n        const index = this.#shapes.findIndex(\n          innerShape => innerShape.getId() === shapeAsShapeType?.getId()\n        );\n        if (index >= 0) {\n          this.#shapes[index] = shapeAsShapeType;\n        } else {\n          this.#shapes.push(shapeAsShapeType);\n        }\n        this.#currentParams = shapeAsShapeType.getSvgParams();\n      });\n      if (this.#selectedTool?.toolName === Tools_List.SELECT) {\n        (this.#selectedTool as SelectTool).updateAllShapes(this.#shapes);\n      }\n    }\n    this.redrawShapes();\n  };\n\n  resetEditor = () => {\n    if (this.#drawLayer) {\n      Pen.clearCanvas(this.#drawLayer);\n    }\n    if (this.#previewLayer) {\n      Pen.clearCanvas(this.#previewLayer);\n    }\n  };\n\n  #handleUpdateShapes = (toBeAppended?: ShapeType | ShapeType[] | null) => {\n    if (toBeAppended === undefined) {\n      return;\n    }\n    if (toBeAppended === null) {\n      this.onUnselectTool();\n      return;\n    }\n    const shapes = Array.isArray(toBeAppended) ? toBeAppended : [toBeAppended];\n    this.updateShapes(shapes);\n    this.#connection?.updateShapes(toBeAppended);\n  };\n\n  #onHandleSelectShape = (selectedShape: ShapeType | ShapeType[] | null) => {\n    setIsButtonDisabled(this.#self, Tools_List.MOVE, !selectedShape);\n    this.#isShapeOnlyBeingSelected = true;\n    if (!selectedShape && this.#selectedShape) {\n      this.#connection?.unlockShapes(this.#selectedShape);\n      const currentlyLockedShape = this.#selectedShape;\n      if (this.#connection?.ws) {\n        this.#connection.ws.onclose = () =>\n          this.#connection?.unlockShapes(currentlyLockedShape);\n      }\n      this.#selectedShape = null;\n    } else {\n      const shape = Array.isArray(selectedShape)\n        ? selectedShape[0]\n        : selectedShape;\n\n      shape && this.#connection?.lockShapes(shape);\n      this.#selectedShape = shape;\n      if (this.#selectedShape) {\n        this.#currentParams = this.#selectedShape.getSvgParams();\n        this.onUpdateStyleInputFields();\n        if (isText(this.#selectedShape)) {\n          setTextParamsSourceVisibility(this.#footerFieldsRef, true);\n        }\n      }\n      this.#isShapeOnlyBeingSelected = false;\n    }\n    if (!!selectedShape) {\n      setIsButtonActive(this.#self, Tools_List.SELECT, false);\n      this.#selectedTool?.destroy();\n      this.#selectedTool = null;\n    }\n  };\n\n  #onMoveShape = (movedShape: ShapeType | ShapeType[] | null) => {\n    if (movedShape === null) {\n      this.onUnselectTool();\n      return;\n    }\n    const shape = Array.isArray(movedShape) ? movedShape[0] : movedShape;\n    const index = this.#shapes.findIndex(\n      innerShape => innerShape.getId() === shape.getId()\n    );\n    if (index >= 0) {\n      this.#shapes[index] = shape;\n    } else {\n      this.#shapes.push(shape);\n    }\n    this.redrawShapes();\n    this.#connection?.updateShapes(movedShape);\n  };\n\n  #openDownloadDialog = (url: string) => {\n    const downloadLink = document.createElement('a');\n    downloadLink.download = 'svg-element.svg';\n    downloadLink.href = url;\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  };\n\n  resetPreview = () => {\n    const renderingContext = this.#previewLayer?.getContext('2d');\n    if (this.#previewLayer && renderingContext) {\n      Pen.clearCanvas(this.#previewLayer, renderingContext);\n    }\n  };\n  redrawShapes = () => {\n    if (\n      this.#drawContext &&\n      this.#drawLayer &&\n      this.#previewLayer &&\n      this.#previewContext\n    ) {\n      Pen.clearCanvas(this.#drawLayer, this.#drawContext);\n      Pen.clearCanvas(this.#previewLayer, this.#previewContext);\n\n      if (this.#selectedShape) {\n        if (typeOfShape(this.#selectedShape) === 'TextShape') {\n          Pen.draw(\n            this.#selectedShape,\n            {\n              ...this.#selectedShape.getSvgParams(),\n              ...this.#currentParams,\n              ...highlightStyle,\n              lineDash: [0],\n            },\n            this.#previewContext\n          );\n        } else {\n          Pen.draw(\n            this.#selectedShape,\n            {\n              ...this.#selectedShape.getSvgParams(),\n              ...this.#currentParams,\n              ...highlightStyle,\n            },\n            this.#previewContext\n          );\n        }\n      }\n      this.#shapes.forEach(shape => {\n        Pen.draw(shape, undefined, this.#drawContext);\n      });\n    }\n  };\n\n  onUpdateStyleInputFields = () => {\n    updateStyleInputFields(\n      this.#footerFieldsRef,\n      this.#selectedShape?.getSvgParams() ?? this.#currentParams\n    );\n  };\n\n  onSave = () => {\n    this.onUnselectTool();\n    this.#openDownloadDialog(generateSVGURLFromShapes(this.#shapes));\n  };\n\n  importSVG = (data: Document) => {\n    if (this.#drawLayer) {\n      const importTool = new ImportTool(\n        this.#drawLayer,\n        this.#self,\n        this.#handleUpdateShapes,\n        this.#offset\n      );\n      importTool.drawSvg(data);\n      importTool.destroy();\n    }\n  };\n\n  getAllShapes = () => this.#shapes;\n\n  #deleteShapeById = (shapeId: string) => {\n    const index = this.#shapes.findIndex(shape => shape.getId() === shapeId);\n    this.#shapes.splice(index, 1);\n    this.#connection?.deleteShapes([shapeId]);\n  };\n\n  deleteFromShapes = (shapeIdData: string | string[]) => {\n    if (Array.isArray(shapeIdData)) {\n      shapeIdData.forEach(this.#deleteShapeById);\n    } else {\n      this.#deleteShapeById(shapeIdData);\n    }\n  };\n\n  onDeleteSelectedShape = () => {\n    if (this.#selectedShape) {\n      this.deleteFromShapes(this.#selectedShape.getId());\n      this.#selectedShape = null;\n    }\n  };\n\n  onSelectTool = (tool: Tools_List | null) => {\n    if (this.#selectedTool?.toolName) {\n      setIsButtonActive(this.#self, this.#selectedTool?.toolName, false);\n    }\n    if (tool) {\n      if (this.#selectedShape && tool !== Tools_List.SELECT) {\n        this.#selectedTool?.destroy();\n        this.onUpdateStyleInputFields();\n      } else {\n        this.onUnselectTool();\n      }\n    }\n    if (this.#drawLayer && this.#previewLayer) {\n      this.#setAreFieldsEnabled(Object.values(SVGParamFieldID), true);\n      switch (tool) {\n        case Tools_List.DRAW: {\n          const fieldsToDisable = [\n            SVGParamFieldID.FILL_COLOR,\n            SVGParamFieldID.FILL_OPACITY,\n          ];\n          this.#setAreFieldsEnabled(fieldsToDisable, false);\n          this.#selectedTool = new DrawTool(\n            this.#drawLayer,\n            this.#previewLayer,\n            this.#self,\n            this.#handleUpdateShapes,\n            this.#currentParams,\n            this.#offset\n          );\n          break;\n        }\n        case Tools_List.LINE: {\n          const fieldsToDisable = [\n            SVGParamFieldID.FILL_COLOR,\n            SVGParamFieldID.FILL_OPACITY,\n          ];\n          this.#setAreFieldsEnabled(fieldsToDisable, false);\n          this.#selectedTool = new LineTool(\n            this.#drawLayer,\n            this.#previewLayer,\n            this.#self,\n            this.#handleUpdateShapes,\n            this.#currentParams,\n            this.#offset\n          );\n          break;\n        }\n        case Tools_List.RECT: {\n          this.#selectedTool = new RectangleTool(\n            this.#drawLayer,\n            this.#previewLayer,\n            this.#self,\n            this.#handleUpdateShapes,\n            this.#currentParams,\n            this.#offset\n          );\n          break;\n        }\n        case Tools_List.ELLIPSE: {\n          this.#selectedTool = new EllipseTool(\n            this.#drawLayer,\n            this.#previewLayer,\n            this.#self,\n            this.#handleUpdateShapes,\n            this.#currentParams,\n            this.#offset\n          );\n          break;\n        }\n        case Tools_List.SELECT: {\n          this.#selectedTool = new SelectTool(\n            this.#drawLayer,\n            this.#previewLayer,\n            this.#self,\n            this.#onHandleSelectShape,\n            this.#shapes,\n            this.#offset,\n            this.#footerFieldsRef\n          );\n          break;\n        }\n        case Tools_List.TEXT: {\n          this.#selectedTool = new TextTool(\n            this.#drawLayer,\n            this.#previewLayer,\n            this.#self,\n            this.#handleUpdateShapes,\n            this.#currentParams,\n            this.#offset,\n            this.#footerFieldsRef\n          );\n          break;\n        }\n        case Tools_List.MOVE: {\n          if (this.#selectedShape) {\n            this.#selectedTool = new MoveTool(\n              this.#drawLayer,\n              this.#previewLayer,\n              this.#self,\n              this.#onMoveShape,\n              this.#offset,\n              this.#selectedShape,\n              this.#footerFieldsRef\n            );\n          } else {\n            return;\n          }\n          break;\n        }\n        case Tools_List.DELETE: {\n          this.onDeleteSelectedShape();\n          this.onUnselectTool();\n          this.#selectedTool = null;\n          break;\n        }\n        case null: {\n          if (this.#selectedTool?.toolName) {\n            setIsButtonActive(this.#self, this.#selectedTool.toolName, false);\n          }\n          this.onUnselectTool();\n          this.#selectedTool = null;\n        }\n      }\n      if (tool) {\n        setIsButtonActive(this.#self, tool, true);\n      }\n      if (!isMoveTool(this.#selectedTool)) {\n        this.#selectedShape = null;\n        this.applyStyles();\n      }\n      this.#self.shadowRoot?.getElementById('');\n      this.#selectedTool?.executeAction();\n    }\n  };\n\n  applyStyles = () => {\n    if (this.#selectedShape && this.#drawLayer) {\n      this.redrawShapes();\n      this.#connection?.updateShapes(this.#shapes);\n    }\n  };\n\n  setShapeParam = (field: keyof SVGParamsBase, value: any) => {\n    this.#currentParams[field] = value;\n    this.#selectedShape?.updateSVGParam(field, value);\n    const changedIndex = this.#shapes.findIndex(\n      shape => this.#selectedShape?.getId() === shape.getId()\n    );\n    if (changedIndex !== undefined && this.#shapes && this.#selectedShape) {\n      this.#shapes[changedIndex] = this.#selectedShape;\n    }\n    this.applyStyles();\n  };\n\n  setShapeParams = (\n    fieldsUpdated: boolean = false,\n    strokeWidth?: string,\n    stroke: string = 'rgba(0,0,0,1)',\n    fill: string = 'rgba(0,0,0,0)',\n    lineCap: CanvasLineCap = 'butt',\n    lineDash: number[] = [],\n    fontFamily: string = 'Arial',\n    fontSize: number = 12,\n    text?: string\n  ) => {\n    if (fieldsUpdated && this.#isShapeOnlyBeingSelected) {\n      return;\n    }\n    this.#currentParams = {\n      fill,\n      stroke,\n      strokeWidth,\n      lineCap,\n      lineDash,\n      fontFamily,\n      fontSize,\n      text,\n    };\n    this.#selectedTool?.setSVGParams(this.#currentParams);\n  };\n\n  setConnection = (newConnection: Connection) => {\n    this.#connection = newConnection;\n  };\n\n  onUnselectTool = () => {\n    if (this.#selectedShape) {\n      this.#connection?.unlockShapes(this.#selectedShape);\n    }\n    setIsButtonDisabled(this.#self, Tools_List.MOVE, true);\n    this.#selectedShape = null;\n    this.#selectedTool?.destroy();\n    this.#setAreFieldsEnabled(Object.values(SVGParamFieldID), false);\n    setTextParamsSourceVisibility(this.#footerFieldsRef, false);\n    this.resetPreview();\n    this.redrawShapes();\n  };\n}\n"]}