{"version":3,"file":"Editor.js","sourceRoot":"","sources":["../../../src/util/Editor.ts"],"names":[],"mappings":"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","sourcesContent":["import { SVGEditor } from '../components/organisms/SVGEditor';\r\nimport type { ShapeType } from '../types/shapes.types';\r\nimport type { Coordinates, SVGParamsBase } from '../types/types';\r\nimport {\r\n  highlightStyle,\r\n  SVGParamFieldID,\r\n  textPlaceHolder,\r\n  Tools_List,\r\n} from './helper/constants';\r\nimport {\r\n  setIsButtonActive,\r\n  setIsButtonDisabled,\r\n  updateStyleInputFields,\r\n} from './helper/domUtil';\r\nimport { generateSVGURLFromShapes } from './helper/shapes';\r\nimport {\r\n  isMoveTool,\r\n  isShapeType,\r\n  isText,\r\n  typeOfShape,\r\n} from './helper/typeguards';\r\nimport { Connection } from './network';\r\nimport { Pen } from './Pen';\r\nimport { Ellipse } from './Shapes/Ellipse';\r\nimport { Freehand } from './Shapes/Freehand';\r\nimport { Line } from './Shapes/Line';\r\nimport { Rectangle } from './Shapes/Rectangle';\r\nimport { TextShape } from './Shapes/Text';\r\nimport { DrawTool } from './Tools/DrawTool';\r\nimport { EllipseTool } from './Tools/EllipseTool';\r\nimport { ImportTool } from './Tools/ImportTool';\r\nimport { LineTool } from './Tools/LineTool';\r\nimport { MoveTool } from './Tools/MoveTool';\r\nimport { RectangleTool } from './Tools/RectangleTool';\r\nimport { SelectTool } from './Tools/SelectTool';\r\nimport { TextTool } from './Tools/TextTool';\r\nimport {\r\n  paramFieldStateHandler,\r\n  setTextParamsSourceVisibility,\r\n} from './Tools/TextTool.util';\r\nimport { Tool } from './Tools/Tool';\r\n\r\nexport class Editor {\r\n  #selectedTool: Tool<ShapeType> | null = null;\r\n  #drawLayer: HTMLCanvasElement | null = null;\r\n  #previewLayer: HTMLCanvasElement | null = null;\r\n  #connection?: Connection;\r\n  #self: SVGEditor;\r\n  #offset: Coordinates;\r\n  #shapes: ShapeType[] = [];\r\n  #currentParams: SVGParamsBase = {\r\n    strokeWidth: '1',\r\n    stroke: 'rgba(0,0,0,1)',\r\n    fill: 'rgba(0,0,0,0)',\r\n    lineDash: [0],\r\n    text: textPlaceHolder,\r\n  };\r\n  #isShapeOnlyBeingSelected: boolean = false;\r\n  #setAreFieldsEnabled: (\r\n    fieldName: SVGParamFieldID[],\r\n    isEnabled?: boolean\r\n  ) => void;\r\n  #selectedShape?: ShapeType | null = null;\r\n  #drawContext: CanvasRenderingContext2D | null;\r\n  #previewContext: CanvasRenderingContext2D | null;\r\n  constructor(\r\n    drawLayer: HTMLCanvasElement,\r\n    previewLayer: HTMLCanvasElement,\r\n    offset: Coordinates,\r\n    self: SVGEditor\r\n  ) {\r\n    this.#drawLayer = drawLayer;\r\n    this.#previewLayer = previewLayer;\r\n    this.#self = self;\r\n    this.#offset = offset;\r\n    this.#currentParams = {\r\n      text: textPlaceHolder,\r\n      strokeWidth: '1',\r\n      stroke: 'rgba(0,0,0,1)',\r\n      fill: 'rgba(0,0,0,0)',\r\n    };\r\n    this.#drawContext = this.#drawLayer?.getContext('2d');\r\n    this.#previewContext = this.#previewLayer?.getContext('2d');\r\n    this.#setAreFieldsEnabled = paramFieldStateHandler(\r\n      this.#self\r\n    ).setAreFieldsEnabled;\r\n    this.#setAreFieldsEnabled(Object.values(SVGParamFieldID), false);\r\n    updateStyleInputFields(this.#self, this.#currentParams);\r\n\r\n    window.addEventListener('resize', () => {\r\n      setTimeout(() => this.redrawShapes(), 50);\r\n    });\r\n  }\r\n\r\n  getSVGParams = () => ({\r\n    ...this.#currentParams,\r\n  });\r\n\r\n  #createShape = (shapeRecord: Record<string, any>): ShapeType | undefined => {\r\n    switch (shapeRecord.type) {\r\n      case 'Ellipse': {\r\n        const { id, center, radiusX, radiusY, isLocked, svgParams } =\r\n          shapeRecord;\r\n        return new Ellipse(\r\n          center,\r\n          radiusX,\r\n          radiusY,\r\n          svgParams,\r\n          true,\r\n          isLocked\r\n        ).replaceID(id);\r\n      }\r\n      case 'Rectangle':\r\n        const { width, height, id, startingCorner, isLocked, svgParams } =\r\n          shapeRecord;\r\n        return new Rectangle(\r\n          startingCorner,\r\n          width,\r\n          height,\r\n          svgParams,\r\n          true,\r\n          isLocked\r\n        ).replaceID(id);\r\n      case 'TextShape': {\r\n        const { id, width, height, position, svgParams, isLocked } =\r\n          shapeRecord;\r\n        return new TextShape(\r\n          width,\r\n          height,\r\n          position,\r\n          svgParams,\r\n          true,\r\n          isLocked\r\n        ).replaceID(id);\r\n      }\r\n      case 'Freehand': {\r\n        const { id, isLocked, svgParams, points } = shapeRecord;\r\n        return new Freehand(points, svgParams, true, isLocked).replaceID(id);\r\n      }\r\n      case 'Line': {\r\n        const { id, isLocked, startPoint, endPoint, svgParams } = shapeRecord;\r\n        return new Line(\r\n          startPoint,\r\n          endPoint,\r\n          svgParams,\r\n          true,\r\n          isLocked\r\n        ).replaceID(id);\r\n      }\r\n      case 'Path':\r\n        break;\r\n    }\r\n  };\r\n\r\n  updateShapes = (shapes: Array<Record<string, any>>) => {\r\n    if (!shapes.length) {\r\n      this.#shapes = [];\r\n      this.#selectedShape = null;\r\n    } else {\r\n      shapes.forEach((shape: Record<string, any>) => {\r\n        let shapeAsShapeType: ShapeType | undefined;\r\n        if (isShapeType(shape)) {\r\n          shapeAsShapeType = shape;\r\n        } else {\r\n          shapeAsShapeType = this.#createShape(shape);\r\n        }\r\n        if (!shapeAsShapeType) return;\r\n        const index = this.#shapes.findIndex(\r\n          innerShape => innerShape.getId() === shapeAsShapeType?.getId()\r\n        );\r\n        if (index >= 0) {\r\n          this.#shapes[index] = shapeAsShapeType;\r\n        } else {\r\n          this.#shapes.push(shapeAsShapeType);\r\n        }\r\n        this.#currentParams = shapeAsShapeType.getSvgParams();\r\n      });\r\n      if (this.#selectedTool?.toolName === Tools_List.SELECT) {\r\n        (this.#selectedTool as SelectTool).updateAllShapes(this.#shapes);\r\n      }\r\n    }\r\n    this.redrawShapes();\r\n  };\r\n\r\n  resetEditor = () => {\r\n    if (this.#drawLayer) {\r\n      Pen.clearCanvas(this.#drawLayer);\r\n    }\r\n    if (this.#previewLayer) {\r\n      Pen.clearCanvas(this.#previewLayer);\r\n    }\r\n  };\r\n\r\n  #handleUpdateShapes = (toBeAppended?: ShapeType | ShapeType[] | null) => {\r\n    if (toBeAppended === undefined) {\r\n      return;\r\n    }\r\n    if (toBeAppended === null) {\r\n      this.onUnselectTool();\r\n      return;\r\n    }\r\n    const shapes = Array.isArray(toBeAppended) ? toBeAppended : [toBeAppended];\r\n    this.updateShapes(shapes);\r\n    this.#connection?.updateShapes(toBeAppended);\r\n  };\r\n\r\n  #onHandleSelectShape = (selectedShape: ShapeType | ShapeType[] | null) => {\r\n    setIsButtonDisabled(this.#self, Tools_List.MOVE, !selectedShape);\r\n    this.#isShapeOnlyBeingSelected = true;\r\n    if (!selectedShape && this.#selectedShape) {\r\n      this.#connection?.unlockShapes(this.#selectedShape);\r\n      const currentlyLockedShape = this.#selectedShape;\r\n      if (this.#connection) {\r\n        this.#connection.ws.onclose = () =>\r\n          this.#connection?.unlockShapes(currentlyLockedShape);\r\n      }\r\n      this.#selectedShape = null;\r\n    } else {\r\n      const shape = Array.isArray(selectedShape)\r\n        ? selectedShape[0]\r\n        : selectedShape;\r\n\r\n      shape && this.#connection?.lockShapes(shape);\r\n      this.#selectedShape = shape;\r\n      if (this.#selectedShape) {\r\n        this.#currentParams = this.#selectedShape.getSvgParams();\r\n        this.onUpdateStyleInputFields();\r\n        if (isText(this.#selectedShape)) {\r\n          setTextParamsSourceVisibility(this.#self, true);\r\n        }\r\n      }\r\n      this.#isShapeOnlyBeingSelected = false;\r\n    }\r\n    if (!!selectedShape) {\r\n      setIsButtonActive(this.#self, Tools_List.SELECT, false);\r\n      this.#selectedTool?.destroy();\r\n      this.#selectedTool = null;\r\n    }\r\n  };\r\n\r\n  #onMoveShape = (movedShape: ShapeType | ShapeType[] | null) => {\r\n    if (movedShape === null) {\r\n      this.onUnselectTool();\r\n      return;\r\n    }\r\n    const shape = Array.isArray(movedShape) ? movedShape[0] : movedShape;\r\n    const index = this.#shapes.findIndex(\r\n      innerShape => innerShape.getId() === shape.getId()\r\n    );\r\n    if (index >= 0) {\r\n      this.#shapes[index] = shape;\r\n    } else {\r\n      this.#shapes.push(shape);\r\n    }\r\n    this.redrawShapes();\r\n    this.#connection?.updateShapes(movedShape);\r\n  };\r\n\r\n  #openDownloadDialog = (url: string) => {\r\n    const downloadLink = document.createElement('a');\r\n    downloadLink.download = 'svg-element.svg';\r\n    downloadLink.href = url;\r\n    document.body.appendChild(downloadLink);\r\n    downloadLink.click();\r\n    document.body.removeChild(downloadLink);\r\n  };\r\n\r\n  resetPreview = () => {\r\n    const renderingContext = this.#previewLayer?.getContext('2d');\r\n    if (this.#previewLayer && renderingContext) {\r\n      Pen.clearCanvas(this.#previewLayer, renderingContext);\r\n    }\r\n  };\r\n  redrawShapes = () => {\r\n    if (\r\n      this.#drawContext &&\r\n      this.#drawLayer &&\r\n      this.#previewLayer &&\r\n      this.#previewContext\r\n    ) {\r\n      Pen.clearCanvas(this.#drawLayer, this.#drawContext);\r\n      Pen.clearCanvas(this.#previewLayer, this.#previewContext);\r\n\r\n      if (this.#selectedShape) {\r\n        if (typeOfShape(this.#selectedShape) === 'TextShape') {\r\n          Pen.draw(\r\n            this.#selectedShape,\r\n            {\r\n              ...this.#selectedShape.getSvgParams(),\r\n              ...this.#currentParams,\r\n              ...highlightStyle,\r\n              lineDash: [0],\r\n            },\r\n            this.#previewContext\r\n          );\r\n        } else {\r\n          Pen.draw(\r\n            this.#selectedShape,\r\n            {\r\n              ...this.#selectedShape.getSvgParams(),\r\n              ...this.#currentParams,\r\n              ...highlightStyle,\r\n            },\r\n            this.#previewContext\r\n          );\r\n        }\r\n      }\r\n      this.#shapes.forEach(shape => {\r\n        Pen.draw(shape, undefined, this.#drawContext);\r\n      });\r\n    }\r\n  };\r\n\r\n  onUpdateStyleInputFields = () => {\r\n    updateStyleInputFields(\r\n      this.#self,\r\n      this.#selectedShape?.getSvgParams() ?? this.#currentParams\r\n    );\r\n  };\r\n\r\n  onSave = () => {\r\n    this.onUnselectTool();\r\n    this.#openDownloadDialog(generateSVGURLFromShapes(this.#shapes));\r\n  };\r\n\r\n  importSVG = (data: Document) => {\r\n    if (this.#drawLayer) {\r\n      const importTool = new ImportTool(\r\n        this.#drawLayer,\r\n        this.#self,\r\n        this.#handleUpdateShapes,\r\n        this.#offset\r\n      );\r\n      importTool.drawSvg(data);\r\n      importTool.destroy();\r\n    }\r\n  };\r\n\r\n  getAllShapes = () => this.#shapes;\r\n\r\n  #deleteShapeById = (shapeId: string) => {\r\n    const index = this.#shapes.findIndex(shape => shape.getId() === shapeId);\r\n    this.#shapes.splice(index, 1);\r\n    this.#connection?.deleteShapes([shapeId]);\r\n  };\r\n\r\n  deleteFromShapes = (shapeIdData: string | string[]) => {\r\n    if (Array.isArray(shapeIdData)) {\r\n      shapeIdData.forEach(this.#deleteShapeById);\r\n    } else {\r\n      this.#deleteShapeById(shapeIdData);\r\n    }\r\n  };\r\n\r\n  onDeleteSelectedShape = () => {\r\n    if (this.#selectedShape) {\r\n      this.deleteFromShapes(this.#selectedShape.getId());\r\n      this.#selectedShape = null;\r\n    }\r\n  };\r\n\r\n  onSelectTool = (tool: Tools_List | null) => {\r\n    if (this.#selectedTool?.toolName) {\r\n      setIsButtonActive(this.#self, this.#selectedTool?.toolName, false);\r\n    }\r\n    if (tool) {\r\n      if (this.#selectedShape && tool !== Tools_List.SELECT) {\r\n        this.#selectedTool?.destroy();\r\n        this.onUpdateStyleInputFields();\r\n      } else {\r\n        this.onUnselectTool();\r\n      }\r\n    }\r\n    if (this.#drawLayer && this.#previewLayer) {\r\n      this.#setAreFieldsEnabled(Object.values(SVGParamFieldID), true);\r\n      switch (tool) {\r\n        case Tools_List.DRAW: {\r\n          const fieldsToDisable = [\r\n            SVGParamFieldID.FILL_COLOR,\r\n            SVGParamFieldID.FILL_OPACITY,\r\n          ];\r\n          this.#setAreFieldsEnabled(fieldsToDisable, false);\r\n          this.#selectedTool = new DrawTool(\r\n            this.#drawLayer,\r\n            this.#previewLayer,\r\n            this.#self,\r\n            this.#handleUpdateShapes,\r\n            this.#currentParams,\r\n            this.#offset\r\n          );\r\n          break;\r\n        }\r\n        case Tools_List.LINE: {\r\n          const fieldsToDisable = [\r\n            SVGParamFieldID.FILL_COLOR,\r\n            SVGParamFieldID.FILL_OPACITY,\r\n          ];\r\n          this.#setAreFieldsEnabled(fieldsToDisable, false);\r\n          this.#selectedTool = new LineTool(\r\n            this.#drawLayer,\r\n            this.#previewLayer,\r\n            this.#self,\r\n            this.#handleUpdateShapes,\r\n            this.#currentParams,\r\n            this.#offset\r\n          );\r\n          break;\r\n        }\r\n        case Tools_List.RECT: {\r\n          this.#selectedTool = new RectangleTool(\r\n            this.#drawLayer,\r\n            this.#previewLayer,\r\n            this.#self,\r\n            this.#handleUpdateShapes,\r\n            this.#currentParams,\r\n            this.#offset\r\n          );\r\n          break;\r\n        }\r\n        case Tools_List.ELLIPSE: {\r\n          this.#selectedTool = new EllipseTool(\r\n            this.#drawLayer,\r\n            this.#previewLayer,\r\n            this.#self,\r\n            this.#handleUpdateShapes,\r\n            this.#currentParams,\r\n            this.#offset\r\n          );\r\n          break;\r\n        }\r\n        case Tools_List.SELECT: {\r\n          this.#selectedTool = new SelectTool(\r\n            this.#drawLayer,\r\n            this.#previewLayer,\r\n            this.#self,\r\n            this.#onHandleSelectShape,\r\n            this.#shapes,\r\n            this.#offset\r\n          );\r\n          break;\r\n        }\r\n        case Tools_List.TEXT: {\r\n          this.#selectedTool = new TextTool(\r\n            this.#drawLayer,\r\n            this.#previewLayer,\r\n            this.#self,\r\n            this.#handleUpdateShapes,\r\n            this.#currentParams\r\n          );\r\n          break;\r\n        }\r\n        case Tools_List.MOVE: {\r\n          if (this.#selectedShape) {\r\n            this.#selectedTool = new MoveTool(\r\n              this.#drawLayer,\r\n              this.#previewLayer,\r\n              this.#self,\r\n              this.#onMoveShape,\r\n              this.#offset,\r\n              this.#selectedShape\r\n            );\r\n          } else {\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n        case Tools_List.DELETE: {\r\n          this.onDeleteSelectedShape();\r\n          this.onUnselectTool();\r\n          this.#selectedTool = null;\r\n          break;\r\n        }\r\n        case null: {\r\n          if (this.#selectedTool?.toolName) {\r\n            setIsButtonActive(this.#self, this.#selectedTool.toolName, false);\r\n          }\r\n          this.onUnselectTool();\r\n          this.#selectedTool = null;\r\n        }\r\n      }\r\n      if (tool) {\r\n        setIsButtonActive(this.#self, tool, true);\r\n      }\r\n      if (!isMoveTool(this.#selectedTool)) {\r\n        this.#selectedShape = null;\r\n        this.applyStyles();\r\n      }\r\n      this.#self.shadowRoot?.getElementById('');\r\n      this.#selectedTool?.executeAction();\r\n    }\r\n  };\r\n\r\n  applyStyles = () => {\r\n    if (this.#selectedShape && this.#drawLayer) {\r\n      this.redrawShapes();\r\n      this.#connection?.updateShapes(this.#shapes);\r\n    }\r\n  };\r\n\r\n  setShapeParam = (field: keyof SVGParamsBase, value: any) => {\r\n    this.#currentParams[field] = value;\r\n    this.#selectedShape?.updateSVGParam(field, value);\r\n    const changedIndex = this.#shapes.findIndex(\r\n      shape => this.#selectedShape?.getId() === shape.getId()\r\n    );\r\n    if (changedIndex !== undefined && this.#shapes && this.#selectedShape) {\r\n      this.#shapes[changedIndex] = this.#selectedShape;\r\n    }\r\n    this.applyStyles();\r\n  };\r\n\r\n  setShapeParams = (\r\n    fieldsUpdated: boolean = false,\r\n    strokeWidth?: string,\r\n    stroke: string = 'rgba(0,0,0,1)',\r\n    fill: string = 'rgba(0,0,0,0)',\r\n    lineCap: CanvasLineCap = 'butt',\r\n    lineDash: number[] = [],\r\n    fontFamily: string = 'Arial',\r\n    fontSize: number = 12,\r\n    text?: string\r\n  ) => {\r\n    if (fieldsUpdated && this.#isShapeOnlyBeingSelected) {\r\n      return;\r\n    }\r\n    this.#currentParams = {\r\n      fill,\r\n      stroke,\r\n      strokeWidth,\r\n      lineCap,\r\n      lineDash,\r\n      fontFamily,\r\n      fontSize,\r\n      text,\r\n    };\r\n    this.#selectedTool?.setSVGParams(this.#currentParams);\r\n  };\r\n\r\n  setConnection = (newConnection: Connection) => {\r\n    this.#connection = newConnection;\r\n  };\r\n\r\n  onUnselectTool = () => {\r\n    if (this.#selectedShape) {\r\n      this.#connection?.unlockShapes(this.#selectedShape);\r\n    }\r\n    setIsButtonDisabled(this.#self, Tools_List.MOVE, true);\r\n    this.#selectedShape = null;\r\n    this.#selectedTool?.destroy();\r\n    this.#setAreFieldsEnabled(Object.values(SVGParamFieldID), false);\r\n    setTextParamsSourceVisibility(this.#self, false);\r\n    this.resetPreview();\r\n    this.redrawShapes();\r\n  };\r\n}\r\n"]}