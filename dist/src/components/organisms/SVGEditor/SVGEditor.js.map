{"version":3,"file":"SVGEditor.js","sourceRoot":"","sources":["../../../../../src/components/organisms/SVGEditor/SVGEditor.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, LitElement } from 'lit';\r\nimport { customElement, state } from 'lit/decorators.js';\r\nimport type { SVGParamsBase } from '../../../types/types';\r\nimport { Editor } from '../../../util/Editor';\r\nimport { getFonts } from '../../../util/helper/availableFonts.js';\r\nimport { SVGParamFieldID, Tools_List } from '../../../util/helper/constants.js';\r\nimport '../../atoms/ToolboxButton';\r\nimport '../../molecules/DialogSection';\r\nimport '../../molecules/ToolBox';\r\nimport {\r\n  hexToRGBA,\r\n  updateNextSiblingValue,\r\n  updatePreviousSiblingValue,\r\n} from '../../../util/helper/util';\r\nimport { Connection } from '../../../util/network';\r\nimport '../../atoms/MenuButton';\r\nimport type { IToolboxButtonProps } from '../../atoms/ToolboxButton/ToolboxButton.types';\r\nimport {\r\n  layoutContentStyle,\r\n  layoutHeaderStyle,\r\n  layoutStyle,\r\n} from './SVGEditor.styles';\r\nimport { getToolboxButtonsProps } from './SVGEditor.util';\r\n\r\n@customElement('svg-editor')\r\nexport class SVGEditor extends LitElement {\r\n  @state()\r\n  width: number = 0;\r\n  @state()\r\n  height: number = 0;\r\n  @state()\r\n  editor: Editor | null = null;\r\n  @state()\r\n  connection?: Connection;\r\n  @state()\r\n  availableFonts?: Set<string>;\r\n\r\n  static styles = [layoutStyle, layoutHeaderStyle, layoutContentStyle];\r\n\r\n  constructor() {\r\n    super();\r\n    getFonts().then(fonts => (this.availableFonts = fonts));\r\n  }\r\n\r\n  async firstUpdated() {\r\n    this.updateResize();\r\n    this.hideRoomInformation();\r\n\r\n    const canvas = this.shadowRoot?.getElementById(\r\n      'drawzone'\r\n    ) as HTMLCanvasElement;\r\n    canvas.addEventListener('mousemove', (event: MouseEvent) => {\r\n      const rect = canvas.getBoundingClientRect();\r\n      const position = this.shadowRoot?.getElementById('position');\r\n      if (position) {\r\n        position.innerHTML = `x:${event.clientX - rect.left} - y:${\r\n          event.clientY - rect.top\r\n        }`;\r\n      }\r\n    });\r\n    canvas.addEventListener('mouseout', (event: MouseEvent) => {\r\n      const position = this.shadowRoot?.getElementById('position');\r\n      if (position) {\r\n        position.innerHTML = '- - -';\r\n      }\r\n    });\r\n\r\n    const previewLayer = this.shadowRoot?.getElementById(\r\n      'preview-layer'\r\n    ) as HTMLCanvasElement;\r\n\r\n    if (canvas) {\r\n      new ResizeObserver(this.updateResize).observe(canvas);\r\n      this.editor = new Editor(\r\n        canvas,\r\n        previewLayer,\r\n        [previewLayer.offsetLeft, previewLayer.offsetTop],\r\n        this\r\n      );\r\n    }\r\n  }\r\n\r\n  handleSelectTool = (tool: Tools_List | null) => {\r\n    this.editor?.onSelectTool(tool);\r\n  };\r\n\r\n  handleJoinRoom = () => {\r\n    if (this.editor) {\r\n      const roomId = (\r\n        this.shadowRoot?.getElementById('room') as HTMLInputElement\r\n      ).value;\r\n      const userName = (\r\n        this.shadowRoot?.getElementById('user') as HTMLInputElement\r\n      ).value;\r\n      this.connection = new Connection(\r\n        roomId,\r\n        !!userName ? userName : undefined,\r\n        this.editor.deleteFromShapes,\r\n        this.editor.updateShapes,\r\n        this.editor.getAllShapes,\r\n        this.editor.resetEditor\r\n      );\r\n      this.connection.setChat(this.shadowRoot?.getElementById('chatbox'));\r\n      this.editor.setConnection(this.connection);\r\n      this.shadowRoot\r\n        ?.getElementById('message-field')\r\n        ?.removeAttribute('disabled');\r\n      this.shadowRoot\r\n        ?.getElementById('send-message-button')\r\n        ?.removeAttribute('disabled');\r\n      document.title = document.title + ' | Room:' + roomId;\r\n      this.hideConnectForm();\r\n    }\r\n  };\r\n\r\n  handleSVGParamChange = (\r\n    field: keyof SVGParamsBase,\r\n    targetId: SVGParamFieldID\r\n  ) => {\r\n    let value;\r\n    const fillFields = [\r\n      SVGParamFieldID.FILL_COLOR,\r\n      SVGParamFieldID.FILL_OPACITY,\r\n    ];\r\n    const strokeFields = [\r\n      SVGParamFieldID.STROKE_COLOR,\r\n      SVGParamFieldID.STROKE_OPACITY,\r\n    ];\r\n    const dualFields = [...fillFields, ...strokeFields];\r\n\r\n    if (dualFields.includes(targetId)) {\r\n      let opacity, color;\r\n      if (strokeFields.includes(targetId)) {\r\n        opacity = (\r\n          this.shadowRoot?.getElementById(\r\n            SVGParamFieldID.STROKE_OPACITY\r\n          ) as HTMLInputElement\r\n        )?.value;\r\n        color = (\r\n          this.shadowRoot?.getElementById(\r\n            SVGParamFieldID.STROKE_COLOR\r\n          ) as HTMLInputElement\r\n        )?.value;\r\n        value = hexToRGBA(color ?? '#000000', opacity);\r\n      } else {\r\n        opacity = (\r\n          this.shadowRoot?.getElementById(\r\n            SVGParamFieldID.FILL_OPACITY\r\n          ) as HTMLInputElement\r\n        )?.value;\r\n        color = (\r\n          this.shadowRoot?.getElementById(\r\n            SVGParamFieldID.FILL_COLOR\r\n          ) as HTMLInputElement\r\n        )?.value;\r\n        value = hexToRGBA(color ?? '#000000', opacity);\r\n      }\r\n    } else {\r\n      if (SVGParamFieldID.LINE_DASH === targetId) {\r\n        value = (\r\n          this.shadowRoot?.getElementById(\r\n            SVGParamFieldID.LINE_DASH\r\n          ) as HTMLInputElement\r\n        )?.value\r\n          .trim()\r\n          .split(/[\\s,]+/)\r\n          .filter(splitValue => !!splitValue)\r\n          .map(lineDashValue => parseInt(lineDashValue));\r\n        if (value.some(innerValue => !isFinite(innerValue))) {\r\n          value = [0];\r\n        }\r\n      } else {\r\n        value = (this.shadowRoot?.getElementById(targetId) as HTMLInputElement)\r\n          ?.value;\r\n      }\r\n    }\r\n    this.editor?.setShapeParam(field, value);\r\n  };\r\n\r\n  hideConnectForm = () => {\r\n    const connectForm = this.shadowRoot?.getElementById('connect-form');\r\n    if (connectForm) {\r\n      connectForm.style.display = 'none';\r\n    }\r\n    const connectionInfo = this.shadowRoot?.getElementById('room-information');\r\n    if (connectionInfo) {\r\n      connectionInfo.style.display = 'flex';\r\n    }\r\n  };\r\n\r\n  hideRoomInformation = () => {\r\n    const connectForm = this.shadowRoot?.getElementById('connect-form');\r\n    if (connectForm) {\r\n      connectForm.style.display = 'flex';\r\n    }\r\n    const connectionInfo = this.shadowRoot?.getElementById('room-information');\r\n    if (connectionInfo) {\r\n      connectionInfo.style.display = 'none';\r\n    }\r\n  };\r\n\r\n  handleLeaveRoom = () => {\r\n    this.connection?.disconnect();\r\n    this.shadowRoot\r\n      ?.getElementById('message-field')\r\n      ?.setAttribute('disabled', '');\r\n    this.shadowRoot\r\n      ?.getElementById('send-message-button')\r\n      ?.setAttribute('disabled', '');\r\n    document.title = 'SVG Editor';\r\n    this.hideRoomInformation();\r\n  };\r\n\r\n  handleSendMessage = () => {\r\n    const chatValue = (\r\n      this.shadowRoot?.getElementById('message-field') as\r\n        | HTMLInputElement\r\n        | undefined\r\n    )?.value;\r\n    this.connection?.sendChatMessage(chatValue);\r\n  };\r\n\r\n  updateResize = () => {\r\n    this.width = window.innerWidth;\r\n    this.height = window.innerHeight;\r\n  };\r\n\r\n  render() {\r\n    const tools: IToolboxButtonProps[] = getToolboxButtonsProps(\r\n      this.handleSelectTool\r\n    );\r\n    return html`\r\n      <div id=\"content\">\r\n        <!-- Mobile view to be implemented  -->\r\n        <!-- <menu-button></menu-button> -->\r\n        <div id=\"draw-container\">\r\n          <canvas\r\n            id=\"drawzone\"\r\n            height=${this.height}\r\n            width=${this.width}\r\n          ></canvas>\r\n          <canvas\r\n            id=\"preview-layer\"\r\n            height=${this.height}\r\n            width=${this.width}\r\n          ></canvas>\r\n        </div>\r\n        <div id=\"right-main-section\">\r\n          <tool-box id=\"tool-box\" .tools=${tools}></tool-box>\r\n          <span id=\"connection-section\" status=\"disconnected\">\r\n            <div id=\"connection-info\">\r\n              <h3>Connection</h3>\r\n              <div id=\"connect-form\">\r\n                <div>\r\n                  <label\r\n                    ><div id=\"username-form-label\">Username:</div>\r\n                    <input\r\n                      id=\"user\"\r\n                      type=\"text\"\r\n                      maxlength=\"10\"\r\n                      placeholder=${Connection.userName ?? ''}\r\n                  /></label>\r\n                  <label\r\n                    ><div id=\"connect-form-label\">Room ID:</div>\r\n                    <input id=\"room\" type=\"text\"\r\n                  /></label>\r\n                </div>\r\n                <div id=\"connect-button-container\">\r\n                  <button @click=${this.handleJoinRoom}>Connect</button>\r\n                </div>\r\n              </div>\r\n              <div id=\"room-information\">\r\n                <div>\r\n                  Connected as ${Connection.userName} <br />\r\n                  Room ID: ${this.connection?.getRoom()}\r\n                </div>\r\n                <div id=\"disconnect-button-container\">\r\n                  <button @click=${this.handleLeaveRoom}>Disconnect</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div id=\"chat\">\r\n              <h3>Chat</h3>\r\n              <div id=\"chatbox\"></div>\r\n              <div id=\"chat-form\">\r\n                <input\r\n                  disabled\r\n                  id=\"message-field\"\r\n                  type=\"text\"\r\n                  placeholder=\"Message...\"\r\n                />\r\n                <button\r\n                  id=\"send-message-button\"\r\n                  disabled\r\n                  @click=${this.handleSendMessage}\r\n                >\r\n                  Send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <dialog-section\r\n        .onSave=${this.editor?.onSave}\r\n        .onSelectSvgFile=${this.editor?.importSVG}\r\n      ></dialog-section>\r\n      <div id=\"footer\">\r\n        <fieldset id=\"footer-fields\">\r\n          <div id=\"footer-input\">\r\n            <div id=\"left-input-section\">\r\n              <div>\r\n                <label>\r\n                  Stroke width:\r\n                  <input\r\n                    type=\"number\"\r\n                    id=\"stroke-width-input\"\r\n                    @input=\"${() =>\r\n                      this.handleSVGParamChange(\r\n                        'strokeWidth',\r\n                        SVGParamFieldID.STROKE_WIDTH\r\n                      )}\"\r\n                  />\r\n                </label>\r\n                <label>\r\n                  Line dash:\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"line-dash-input\"\r\n                    placeholder=\"3,3,3,12...\"\r\n                    @input=\"${() =>\r\n                      this.handleSVGParamChange(\r\n                        'lineDash',\r\n                        SVGParamFieldID.LINE_DASH\r\n                      )}\"\r\n                  />\r\n                </label>\r\n                <label>\r\n                  Linecap:\r\n                  <select\r\n                    @input=\"${() =>\r\n                      this.handleSVGParamChange(\r\n                        'lineCap',\r\n                        SVGParamFieldID.LINE_CAP\r\n                      )}\"\r\n                    id=\"line-cap-input\"\r\n                  >\r\n                    <option value=\"round\">Round edge</option>\r\n                    <option value=\"butt\">Flat edge</option>\r\n                  </select>\r\n                </label>\r\n              </div>\r\n              <div id=\"footer-input-fields\">\r\n                <div>\r\n                  <label>\r\n                    Color:\r\n                    <input\r\n                      type=\"color\"\r\n                      id=\"stroke-color-input\"\r\n                      @change=${() =>\r\n                        this.handleSVGParamChange(\r\n                          'stroke',\r\n                          SVGParamFieldID.STROKE_COLOR\r\n                        )}\r\n                    />\r\n                  </label>\r\n                  <label>\r\n                    Opacity:\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      step=\"0.1\"\r\n                      max=\"1\"\r\n                      @input=${(event: InputEvent) => {\r\n                        updateNextSiblingValue(event);\r\n                        this.handleSVGParamChange(\r\n                          'stroke',\r\n                          SVGParamFieldID.STROKE_OPACITY\r\n                        );\r\n                      }}\r\n                    />\r\n                    <input\r\n                      id=\"stroke-opacity-input\"\r\n                      type=\"number\"\r\n                      @change=${(event: InputEvent) => {\r\n                        updatePreviousSiblingValue(event);\r\n                        this.handleSVGParamChange(\r\n                          'stroke',\r\n                          SVGParamFieldID.STROKE_OPACITY\r\n                        );\r\n                      }}\r\n                    />\r\n                  </label>\r\n                </div>\r\n                <div>\r\n                  <label>\r\n                    Fill:\r\n                    <input\r\n                      type=\"color\"\r\n                      id=\"fill-color-input\"\r\n                      @input=${() =>\r\n                        this.handleSVGParamChange(\r\n                          'fill',\r\n                          SVGParamFieldID.FILL_COLOR\r\n                        )}\r\n                    />\r\n                  </label>\r\n                  <label>\r\n                    Opacity:\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1\"\r\n                      step=\"0.01\"\r\n                      @input=${(event: InputEvent) => {\r\n                        updateNextSiblingValue(event);\r\n                        this.handleSVGParamChange(\r\n                          'fill',\r\n                          SVGParamFieldID.FILL_OPACITY\r\n                        );\r\n                      }}\r\n                    />\r\n                    <input\r\n                      id=\"fill-opacity-input\"\r\n                      type=\"number\"\r\n                      @change=${(event: InputEvent) => {\r\n                        updatePreviousSiblingValue(event);\r\n                        this.handleSVGParamChange(\r\n                          'fill',\r\n                          SVGParamFieldID.FILL_OPACITY\r\n                        );\r\n                      }}\r\n                    />\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <fieldset id=\"right-input-section\">\r\n              <label\r\n                >Font size:<input\r\n                  type=\"number\"\r\n                  id=\"text-font-size-input\"\r\n                  @input=${() =>\r\n                    this.handleSVGParamChange(\r\n                      'fontSize',\r\n                      SVGParamFieldID.TEXT_FONT_SIZE\r\n                    )}\r\n              /></label>\r\n              <label>\r\n                Font family:\r\n                <select\r\n                  id=\"text-font-family-input\"\r\n                  @input=${() =>\r\n                    this.handleSVGParamChange(\r\n                      'fontFamily',\r\n                      SVGParamFieldID.TEXT_FONT_FAMILY\r\n                    )}\r\n                >\r\n                  ${this.availableFonts &&\r\n                  Array.from(this.availableFonts).map(\r\n                    font => html`<option value=${font}>${font}</option>`\r\n                  )}\r\n                </select>\r\n              </label>\r\n              <label>\r\n                Text:\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"text-input\"\r\n                  @input=${() =>\r\n                    this.handleSVGParamChange('text', SVGParamFieldID.TEXT)}\r\n                />\r\n              </label>\r\n            </fieldset>\r\n          </div>\r\n        </fieldset>\r\n        <div id=\"position-container\">\r\n          <span id=\"position\">- - -</span>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n"]}