{"version":3,"file":"ToolboxButton.js","sourceRoot":"","sources":["../../../../../src/components/atoms/ToolboxButton/ToolboxButton.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE5D,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAG7D,IAAa,aAAa,GAA1B,MAAa,aAAc,SAAQ,UAAU;IAA7C;;;QAEE,aAAQ,GAAW,MAAM,CAAC;IAiE5B,CAAC;IA9CO,YAAY;;;YAChB,MAAM,OAAO,GAAG,MAAA,IAAI,CAAC,UAAU,0CAAE,cAAc,CAAC,gBAAgB,CAAC,CAAC;YAElE,IAAI,OAAO,EAAE;gBACX,MAAM,WAAW,GAAG,OAAO,CAAC,aAAa,CACvC,cAAc,CACO,CAAC;gBACxB,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,CAAC,WAAW,EAAE,CAAC,KAAiB,EAAE,EAAE;oBAC3D,IAAI,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;wBAC7B,MAAM,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;wBACxB,MAAM,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;wBACxB,IAAI,WAAW,EAAE;4BACf,WAAW,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;4BACtC,WAAW,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;yBACxC;qBACF;gBACH,CAAC,CAAC,CAAC;aACJ;;KACF;IAQD,MAAM;;QACJ,OAAO,IAAI,CAAA;;aAEF,MAAA,IAAI,CAAC,QAAQ,mCAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;iBAClD,uBAAA,IAAI,4DAAa;oBACd,MAAA,IAAI,CAAC,QAAQ,mCAAI,KAAK;;UAEhC,IAAI,CAAC,IAAI;YACT,CAAC,CAAC,IAAI,CAAA;;gBAEA,IAAI,CAAC,QAAQ;kBACX,CAAC,MAAA,IAAI,CAAC,KAAK,mCAAI,EAAE,CAAC,GAAG,WAAW;oBAC9B,gDAAgD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG;gBACnE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;iBAC1B;YACP,CAAC,CAAC,IAAI,CAAC,QAAQ;;gCAEO,IAAI,CAAC,QAAQ;WAClC,CAAC;IACV,CAAC;CACF,CAAA;;;IAzBG,IAAI,IAAI,CAAC,QAAQ,EAAE;QACjB,MAAA,IAAI,CAAC,OAAO,+CAAZ,IAAI,EAAW,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC/B;AACH,CAAC;AA1BM,oBAAM,GAAG,CAAC,mBAAmB,CAAC,CAAC;AAjBtC;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;+CACD;AAG1B;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;2CACb;AAGd;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;4CACZ;AAGf;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;+CACL;AAGtB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;+CACT;AAGnB;IADC,QAAQ,EAAE;8CACwB;AAjBxB,aAAa;IADzB,aAAa,CAAC,gBAAgB,CAAC;GACnB,aAAa,CAmEzB;SAnEY,aAAa","sourcesContent":["import { html, LitElement } from 'lit';\r\nimport { customElement, property } from 'lit/decorators.js';\r\nimport { Tools_List } from '../../../util/helper/constants';\r\nimport { toolBoxButtonStyles } from './ToolboxButton.styles';\r\n\r\n@customElement('toolbox-button')\r\nexport class ToolboxButton extends LitElement {\r\n  @property({ type: String })\r\n  toolName: string = 'tool';\r\n\r\n  @property({ type: String })\r\n  icon?: string;\r\n\r\n  @property({ type: String })\r\n  class?: string;\r\n\r\n  @property({ type: String })\r\n  buttonId?: Tools_List;\r\n\r\n  @property({ type: Boolean })\r\n  disabled?: boolean;\r\n\r\n  @property()\r\n  onClick?: (id: Tools_List) => void;\r\n\r\n  static styles = [toolBoxButtonStyles];\r\n\r\n  async firstUpdated() {\r\n    const tooltip = this.shadowRoot?.getElementById('button-tooltip');\r\n\r\n    if (tooltip) {\r\n      const toolTipText = tooltip.querySelector(\r\n        '#tooltiptext'\r\n      ) as HTMLElement | null;\r\n      tooltip?.addEventListener('mousemove', (event: MouseEvent) => {\r\n        if (tooltip.matches(':hover')) {\r\n          const x = event.clientX;\r\n          const y = event.clientY;\r\n          if (toolTipText) {\r\n            toolTipText.style.top = y + 20 + 'px';\r\n            toolTipText.style.left = x + 15 + 'px';\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  #handleClick() {\r\n    if (this.buttonId) {\r\n      this.onClick?.(this.buttonId);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return html` <div class=\"tooltip\" id=\"button-tooltip\">\r\n      <button\r\n        id=${this.buttonId ?? this.toolName + Date.now().toString()}\r\n        @click=${this.#handleClick}\r\n        .disabled=${this.disabled ?? false}\r\n      >\r\n        ${this.icon\r\n          ? html`\r\n          <img\r\n          alt=${this.toolName}\r\n          class=${(this.class ?? '') + 'tool-icon'}\r\n          onerror=${`this.onerror = null; this.src=\"public/images/${this.icon[1]}\"`}\r\n          src=${this.icon[0] + this.icon[1]}>\r\n          </img>`\r\n          : this.toolName}\r\n      </button>\r\n      <span id=\"tooltiptext\"> ${this.toolName} </span>\r\n    </div>`;\r\n  }\r\n}\r\n"]}