{"version":3,"file":"ToolboxButton.js","sourceRoot":"","sources":["../../../../../src/components/atoms/ToolboxButton/ToolboxButton.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, LitElement } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { nanoid } from 'nanoid';\nimport { Tools_List } from '../../../util/helper/constants';\nimport { toolBoxButtonStyles } from './ToolboxButton.styles';\nimport {\n  ToolboxButtonClickFunction,\n  ToolboxButtonPropsType,\n} from './ToolboxButton.types';\n@customElement('toolbox-button')\nexport class ToolboxButton extends LitElement {\n  @property({ type: String })\n  buttonId?: Tools_List;\n\n  @property()\n  onClick?: ToolboxButtonClickFunction;\n\n  @property({ type: String })\n  toolName?: string;\n\n  @property({ type: Array })\n  icon?: [string, string];\n\n  @property({ type: Boolean })\n  disabled?: boolean;\n\n  static styles = [toolBoxButtonStyles];\n\n  constructor(props: ToolboxButtonPropsType) {\n    super();\n    if (props) {\n      this.buttonId = props.buttonId;\n      this.onClick = props.onClick;\n      this.toolName = props.toolName;\n      this.icon = props.icon;\n      this.disabled = props.disabled;\n    }\n  }\n\n  firstUpdated() {\n    const tooltip = this.shadowRoot?.getElementById('button-tooltip');\n\n    if (tooltip) {\n      const toolTipText = tooltip.querySelector(\n        '#tooltiptext'\n      ) as HTMLElement | null;\n      tooltip?.addEventListener('mousemove', (event: MouseEvent) => {\n        if (tooltip.matches(':hover')) {\n          const x = event.clientX;\n          const y = event.clientY;\n          if (toolTipText) {\n            toolTipText.style.top = y + 20 + 'px';\n            toolTipText.style.left = x + 15 + 'px';\n          }\n        }\n      });\n    }\n  }\n\n  render() {\n    return html` <div class=\"tooltip\" id=\"button-tooltip\">\n      <button\n        id=${this.buttonId ?? this.toolName + Date.now().toString()}\n        @click=${() => this.buttonId && this.onClick?.(this.buttonId)}\n        .disabled=${this.disabled ?? false}\n      >\n        ${this.icon\n          ? html`\n          <img\n          alt=${this.toolName ?? 'tool'}\n          class=${(this.className ?? '') + 'tool-icon'}\n          onerror=${`this.onerror = null; this.src=\"public/images/${this.icon[1]}\"`}\n          src=${this.icon[0] + this.icon[1]}>\n          </img>`\n          : this.toolName}\n      </button>\n      <span id=\"tooltiptext\"> ${this.toolName} </span>\n    </div>`;\n  }\n}\n"]}