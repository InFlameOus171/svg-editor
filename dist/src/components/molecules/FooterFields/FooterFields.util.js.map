{"version":3,"file":"FooterFields.util.js","sourceRoot":"","sources":["../../../../../src/components/molecules/FooterFields/FooterFields.util.ts"],"names":[],"mappings":"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","sourcesContent":["import { FooterFields } from '.';\r\nimport { SVGParamsBase } from '../../../types/types';\r\nimport {\r\n  SVGParamFieldID,\r\n  textPlaceHolder,\r\n} from '../../../util/helper/constants';\r\nimport { normalizeColorCode } from '../../../util/helper/util';\r\n\r\nexport const updateNextSiblingValue = (event: InputEvent) => {\r\n  if ((event.target as HTMLInputElement)?.nextElementSibling)\r\n    (\r\n      (event.target as HTMLInputElement).nextElementSibling as HTMLInputElement\r\n    ).value = (event.currentTarget as HTMLInputElement)?.value;\r\n};\r\n\r\nexport const updatePreviousSiblingValue = (event: InputEvent) => {\r\n  if ((event.target as HTMLInputElement)?.previousElementSibling)\r\n    (\r\n      (event.target as HTMLInputElement)\r\n        .previousElementSibling as HTMLInputElement\r\n    ).value = (event.currentTarget as HTMLInputElement)?.value;\r\n};\r\n\r\nexport const inputFieldGetterGenerator =\r\n  (fieldRoot?: HTMLElement | null) => (id: SVGParamFieldID) => {\r\n    return fieldRoot?.querySelector('#' + id) as HTMLInputElement | null;\r\n  };\r\n\r\nexport const updateStyleInputFields = (\r\n  inputFieldRef: FooterFields,\r\n  params: SVGParamsBase\r\n) => {\r\n  const getFieldByParamId = inputFieldGetterGenerator(\r\n    inputFieldRef.shadowRoot?.getElementById('footer-input')\r\n  );\r\n  const defaultColor = { colorCode: '#000000', opacity: '1' };\r\n  const strokeColor = params.stroke\r\n    ? normalizeColorCode(params.stroke)\r\n    : defaultColor;\r\n  const fillColor = params.fill\r\n    ? normalizeColorCode(params.fill)\r\n    : defaultColor;\r\n\r\n  const fillColorInput = getFieldByParamId(SVGParamFieldID.FILL_COLOR);\r\n  const fillOpacityInput = getFieldByParamId(SVGParamFieldID.FILL_OPACITY);\r\n  const lineCapInput = getFieldByParamId(SVGParamFieldID.LINE_CAP);\r\n  const lineDashInput = getFieldByParamId(SVGParamFieldID.LINE_DASH);\r\n  const strokeColorInput = getFieldByParamId(SVGParamFieldID.STROKE_COLOR);\r\n  const strokeOpacityInput = getFieldByParamId(SVGParamFieldID.STROKE_OPACITY);\r\n  const strokeWidthInput = getFieldByParamId(SVGParamFieldID.STROKE_WIDTH);\r\n  const textFontFamilyInput = getFieldByParamId(\r\n    SVGParamFieldID.TEXT_FONT_FAMILY\r\n  );\r\n  const textFontSizeInput = getFieldByParamId(SVGParamFieldID.TEXT_FONT_SIZE);\r\n  const textInput = getFieldByParamId(SVGParamFieldID.TEXT);\r\n  if (fillColorInput) {\r\n    fillColorInput.value = fillColor.colorCode;\r\n  }\r\n  if (fillOpacityInput) {\r\n    fillOpacityInput.value = fillColor.opacity;\r\n    fillOpacityInput.dispatchEvent(new Event('change'));\r\n  }\r\n  if (lineCapInput) {\r\n    lineCapInput.value = params.lineCap ?? 'butt';\r\n  }\r\n  if (lineDashInput) {\r\n    lineDashInput.value = params.lineDash?.join(',') ?? '0';\r\n  }\r\n  if (strokeColorInput) {\r\n    strokeColorInput.value = strokeColor.colorCode;\r\n  }\r\n  if (strokeOpacityInput) {\r\n    strokeOpacityInput.value = strokeColor.opacity;\r\n    strokeOpacityInput.dispatchEvent(new Event('change'));\r\n  }\r\n  if (strokeWidthInput) {\r\n    strokeWidthInput.value = params.strokeWidth ?? '0';\r\n  }\r\n  if (textFontFamilyInput) {\r\n    textFontFamilyInput.value = params.fontFamily ?? 'Arial';\r\n  }\r\n  if (textFontSizeInput) {\r\n    textFontSizeInput.value = params.fontSize?.toString() ?? '18';\r\n  }\r\n  if (textInput) {\r\n    textInput.value = params.text ?? textPlaceHolder;\r\n  }\r\n};\r\n"]}