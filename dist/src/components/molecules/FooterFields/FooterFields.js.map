{"version":3,"file":"FooterFields.js","sourceRoot":"","sources":["../../../../../src/components/molecules/FooterFields/FooterFields.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { SVGParamsBase } from '../../../types/types';\nimport { getFonts } from '../../../util/helper/availableFonts';\nimport { SVGParamFieldID } from '../../../util/helper/constants';\nimport { hexToRGBA } from '../../../util/helper/util';\nimport { footerFieldsStyles } from './FooterFields.styles';\nimport {\n  updateNextSiblingValue,\n  updatePreviousSiblingValue,\n} from './FooterFields.util';\n\n@customElement('footer-fields')\nexport class FooterFields extends LitElement {\n  @state()\n  availableFonts?: Set<string>;\n\n  @property()\n  onSVGParamChange?: (field: keyof SVGParamsBase, value: any) => void;\n\n  static styles = [footerFieldsStyles];\n\n  constructor() {\n    super();\n    getFonts().then(fonts => (this.availableFonts = fonts));\n  }\n\n  #handleSVGParamChange = (\n    field: keyof SVGParamsBase,\n    targetId: SVGParamFieldID\n  ) => {\n    let value;\n    const fillFields = [\n      SVGParamFieldID.FILL_COLOR,\n      SVGParamFieldID.FILL_OPACITY,\n    ];\n    const strokeFields = [\n      SVGParamFieldID.STROKE_COLOR,\n      SVGParamFieldID.STROKE_OPACITY,\n    ];\n    const dualFields = [...fillFields, ...strokeFields];\n\n    if (dualFields.includes(targetId)) {\n      let opacity, color;\n      if (strokeFields.includes(targetId)) {\n        opacity = (\n          this.shadowRoot?.getElementById(\n            SVGParamFieldID.STROKE_OPACITY\n          ) as HTMLInputElement\n        )?.value;\n        color = (\n          this.shadowRoot?.getElementById(\n            SVGParamFieldID.STROKE_COLOR\n          ) as HTMLInputElement\n        )?.value;\n        value = hexToRGBA(color ?? '#000000', opacity);\n      } else {\n        opacity = (\n          this.shadowRoot?.getElementById(\n            SVGParamFieldID.FILL_OPACITY\n          ) as HTMLInputElement\n        )?.value;\n        color = (\n          this.shadowRoot?.getElementById(\n            SVGParamFieldID.FILL_COLOR\n          ) as HTMLInputElement\n        )?.value;\n        value = hexToRGBA(color ?? '#000000', opacity);\n      }\n    } else {\n      if (SVGParamFieldID.LINE_DASH === targetId) {\n        value = (\n          this.shadowRoot?.getElementById(\n            SVGParamFieldID.LINE_DASH\n          ) as HTMLInputElement\n        )?.value\n          .trim()\n          .split(/[\\s,]+/)\n          .filter(splitValue => !!splitValue)\n          .map(lineDashValue => parseInt(lineDashValue));\n        if (value.some(innerValue => !isFinite(innerValue))) {\n          value = [0];\n        }\n      } else {\n        value = (this.shadowRoot?.getElementById(targetId) as HTMLInputElement)\n          ?.value;\n      }\n    }\n    this.onSVGParamChange?.(field, value);\n  };\n\n  render() {\n    return html` <fieldset id=\"footer-input\">\n      <div id=\"left-input-section\">\n        <div>\n          <label>\n            Stroke width:\n            <input\n              type=\"number\"\n              id=\"stroke-width-input\"\n              @input=\"${() =>\n                this.#handleSVGParamChange?.(\n                  'strokeWidth',\n                  SVGParamFieldID.STROKE_WIDTH\n                )}\"\n            />\n          </label>\n          <label>\n            Line dash:\n            <input\n              type=\"text\"\n              id=\"line-dash-input\"\n              placeholder=\"3,3,3,12...\"\n              @input=\"${() =>\n                this.#handleSVGParamChange?.(\n                  'lineDash',\n                  SVGParamFieldID.LINE_DASH\n                )}\"\n            />\n          </label>\n          <label>\n            Linecap:\n            <select\n              @input=\"${() =>\n                this.#handleSVGParamChange?.(\n                  'lineCap',\n                  SVGParamFieldID.LINE_CAP\n                )}\"\n              id=\"line-cap-input\"\n            >\n              <option value=\"round\">Round edge</option>\n              <option value=\"butt\">Flat edge</option>\n            </select>\n          </label>\n        </div>\n        <div id=\"footer-input-column\">\n          <div>\n            <label>\n              Color:\n              <input\n                type=\"color\"\n                id=\"stroke-color-input\"\n                @change=${() =>\n                  this.#handleSVGParamChange?.(\n                    'stroke',\n                    SVGParamFieldID.STROKE_COLOR\n                  )}\n              />\n            </label>\n            <label>\n              Opacity:\n              <input\n                type=\"range\"\n                min=\"0\"\n                step=\"0.1\"\n                max=\"1\"\n                @input=${(event: InputEvent) => {\n                  updateNextSiblingValue(event);\n                  this.#handleSVGParamChange?.(\n                    'stroke',\n                    SVGParamFieldID.STROKE_OPACITY\n                  );\n                }}\n              />\n              <input\n                id=\"stroke-opacity-input\"\n                type=\"number\"\n                @change=${(event: InputEvent) => {\n                  updatePreviousSiblingValue(event);\n                  this.#handleSVGParamChange?.(\n                    'stroke',\n                    SVGParamFieldID.STROKE_OPACITY\n                  );\n                }}\n              />\n            </label>\n          </div>\n          <div>\n            <label>\n              Fill:\n              <input\n                type=\"color\"\n                id=\"fill-color-input\"\n                @input=${() =>\n                  this.#handleSVGParamChange?.(\n                    'fill',\n                    SVGParamFieldID.FILL_COLOR\n                  )}\n              />\n            </label>\n            <label>\n              Opacity:\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"1\"\n                step=\"0.01\"\n                @input=${(event: InputEvent) => {\n                  updateNextSiblingValue(event);\n                  this.#handleSVGParamChange?.(\n                    'fill',\n                    SVGParamFieldID.FILL_OPACITY\n                  );\n                }}\n              />\n              <input\n                id=\"fill-opacity-input\"\n                type=\"number\"\n                @change=${(event: InputEvent) => {\n                  updatePreviousSiblingValue(event);\n                  this.#handleSVGParamChange?.(\n                    'fill',\n                    SVGParamFieldID.FILL_OPACITY\n                  );\n                }}\n              />\n            </label>\n          </div>\n        </div>\n      </div>\n      <div id=\"right-input-section\">\n        <label\n          >Font size:<input\n            type=\"number\"\n            id=\"text-font-size-input\"\n            @input=${() =>\n              this.#handleSVGParamChange?.(\n                'fontSize',\n                SVGParamFieldID.TEXT_FONT_SIZE\n              )}\n        /></label>\n        <label>\n          Font family:\n          <select\n            id=\"text-font-family-input\"\n            @input=${() =>\n              this.#handleSVGParamChange?.(\n                'fontFamily',\n                SVGParamFieldID.TEXT_FONT_FAMILY\n              )}\n          >\n            ${this.availableFonts &&\n            Array.from(this.availableFonts).map(\n              font => html`<option value=${font}>${font}</option>`\n            )}\n          </select>\n        </label>\n        <label>\n          Text:\n          <input\n            type=\"text\"\n            id=\"text-input\"\n            @input=${() =>\n              this.#handleSVGParamChange?.('text', SVGParamFieldID.TEXT)}\n          />\n        </label>\n      </div>\n    </fieldset>`;\n  }\n}\n"]}