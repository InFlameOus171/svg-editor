{"version":3,"file":"FooterFields.js","sourceRoot":"","sources":["../../../../../src/components/molecules/FooterFields/FooterFields.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAEnE,OAAO,EAAE,QAAQ,EAAE,MAAM,qCAAqC,CAAC;AAC/D,OAAO,EAAE,eAAe,EAAE,MAAM,gCAAgC,CAAC;AACjE,OAAO,EACL,sBAAsB,EACtB,0BAA0B,GAC3B,MAAM,2BAA2B,CAAC;AACnC,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAG3D,IAAa,YAAY,GAAzB,MAAa,YAAa,SAAQ,UAAU;IAY1C;QACE,KAAK,EAAE,CAAC;QACR,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;;;;;;;;0BASW,GAAG,EAAE;;YACb,OAAA,MAAA,IAAI,CAAC,oBAAoB,+CAAzB,IAAI,EACF,aAAa,EACb,eAAe,CAAC,YAAY,CAC7B,CAAA;SAAA;;;;;;;;;0BASO,GAAG,EAAE;;YACb,OAAA,MAAA,IAAI,CAAC,oBAAoB,+CAAzB,IAAI,EACF,UAAU,EACV,eAAe,CAAC,SAAS,CAC1B,CAAA;SAAA;;;;;;0BAMO,GAAG,EAAE;;YACb,OAAA,MAAA,IAAI,CAAC,oBAAoB,+CAAzB,IAAI,EACF,SAAS,EACT,eAAe,CAAC,QAAQ,CACzB,CAAA;SAAA;;;;;;;;;;;;;;;4BAeS,GAAG,EAAE;;YACb,OAAA,MAAA,IAAI,CAAC,oBAAoB,+CAAzB,IAAI,EACF,QAAQ,EACR,eAAe,CAAC,YAAY,CAC7B,CAAA;SAAA;;;;;;;;;;2BAUM,CAAC,KAAiB,EAAE,EAAE;;YAC7B,sBAAsB,CAAC,KAAK,CAAC,CAAC;YAC9B,MAAA,IAAI,CAAC,oBAAoB,+CAAzB,IAAI,EACF,QAAQ,EACR,eAAe,CAAC,cAAc,CAC/B,CAAC;QACJ,CAAC;;;;;4BAKS,CAAC,KAAiB,EAAE,EAAE;;YAC9B,0BAA0B,CAAC,KAAK,CAAC,CAAC;YAClC,MAAA,IAAI,CAAC,oBAAoB,+CAAzB,IAAI,EACF,QAAQ,EACR,eAAe,CAAC,cAAc,CAC/B,CAAC;QACJ,CAAC;;;;;;;;;;2BAUQ,GAAG,EAAE;;YACZ,OAAA,MAAA,IAAI,CAAC,oBAAoB,+CAAzB,IAAI,EACF,MAAM,EACN,eAAe,CAAC,UAAU,CAC3B,CAAA;SAAA;;;;;;;;;;2BAUM,CAAC,KAAiB,EAAE,EAAE;;YAC7B,sBAAsB,CAAC,KAAK,CAAC,CAAC;YAC9B,MAAA,IAAI,CAAC,oBAAoB,+CAAzB,IAAI,EACF,MAAM,EACN,eAAe,CAAC,YAAY,CAC7B,CAAC;QACJ,CAAC;;;;;4BAKS,CAAC,KAAiB,EAAE,EAAE;;YAC9B,0BAA0B,CAAC,KAAK,CAAC,CAAC;YAClC,MAAA,IAAI,CAAC,oBAAoB,+CAAzB,IAAI,EACF,MAAM,EACN,eAAe,CAAC,YAAY,CAC7B,CAAC;QACJ,CAAC;;;;;;;;;;;uBAWI,GAAG,EAAE;;YACZ,OAAA,MAAA,IAAI,CAAC,oBAAoB,+CAAzB,IAAI,EACF,UAAU,EACV,eAAe,CAAC,cAAc,CAC/B,CAAA;SAAA;;;;;;uBAMM,GAAG,EAAE;;YACZ,OAAA,MAAA,IAAI,CAAC,oBAAoB,+CAAzB,IAAI,EACF,YAAY,EACZ,eAAe,CAAC,gBAAgB,CACjC,CAAA;SAAA;;gBAED,IAAI,CAAC,cAAc;YACrB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,CACjC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAA,iBAAiB,IAAI,IAAI,IAAI,WAAW,CACrD;;;;;;;;uBAQQ,GAAG,EAAE,WACZ,OAAA,MAAA,IAAI,CAAC,oBAAoB,+CAAzB,IAAI,EAAwB,MAAM,EAAE,eAAe,CAAC,IAAI,CAAC,CAAA,EAAA;;;;;gBAKzD,CAAC;IACf,CAAC;CACF,CAAA;AAjLQ,mBAAM,GAAG,CAAC,kBAAkB,CAAC,CAAC;AARrC;IADC,KAAK,EAAE;oDACqB;AAG7B;IADC,QAAQ,EAAE;0DAID;AARC,YAAY;IADxB,aAAa,CAAC,eAAe,CAAC;GAClB,YAAY,CA2LxB;SA3LY,YAAY","sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { SVGParamsBase } from '../../../types/types';\nimport { getFonts } from '../../../util/helper/availableFonts';\nimport { SVGParamFieldID } from '../../../util/helper/constants';\nimport {\n  updateNextSiblingValue,\n  updatePreviousSiblingValue,\n} from '../../../util/helper/util';\nimport { footerFieldsStyles } from './FooterFields.styles';\n\n@customElement('footer-fields')\nexport class FooterFields extends LitElement {\n  @state()\n  availableFonts?: Set<string>;\n\n  @property()\n  handleSVGParamChange?: (\n    field: keyof SVGParamsBase,\n    targetId: SVGParamFieldID\n  ) => void;\n\n  static styles = [footerFieldsStyles];\n\n  constructor() {\n    super();\n    getFonts().then(fonts => (this.availableFonts = fonts));\n  }\n\n  render() {\n    return html` <fieldset id=\"footer-fields\">\n      <div id=\"footer-input\">\n        <div id=\"left-input-section\">\n          <div>\n            <label>\n              Stroke width:\n              <input\n                type=\"number\"\n                id=\"stroke-width-input\"\n                @input=\"${() =>\n                  this.handleSVGParamChange?.(\n                    'strokeWidth',\n                    SVGParamFieldID.STROKE_WIDTH\n                  )}\"\n              />\n            </label>\n            <label>\n              Line dash:\n              <input\n                type=\"text\"\n                id=\"line-dash-input\"\n                placeholder=\"3,3,3,12...\"\n                @input=\"${() =>\n                  this.handleSVGParamChange?.(\n                    'lineDash',\n                    SVGParamFieldID.LINE_DASH\n                  )}\"\n              />\n            </label>\n            <label>\n              Linecap:\n              <select\n                @input=\"${() =>\n                  this.handleSVGParamChange?.(\n                    'lineCap',\n                    SVGParamFieldID.LINE_CAP\n                  )}\"\n                id=\"line-cap-input\"\n              >\n                <option value=\"round\">Round edge</option>\n                <option value=\"butt\">Flat edge</option>\n              </select>\n            </label>\n          </div>\n          <div id=\"footer-input-fields\">\n            <div>\n              <label>\n                Color:\n                <input\n                  type=\"color\"\n                  id=\"stroke-color-input\"\n                  @change=${() =>\n                    this.handleSVGParamChange?.(\n                      'stroke',\n                      SVGParamFieldID.STROKE_COLOR\n                    )}\n                />\n              </label>\n              <label>\n                Opacity:\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  step=\"0.1\"\n                  max=\"1\"\n                  @input=${(event: InputEvent) => {\n                    updateNextSiblingValue(event);\n                    this.handleSVGParamChange?.(\n                      'stroke',\n                      SVGParamFieldID.STROKE_OPACITY\n                    );\n                  }}\n                />\n                <input\n                  id=\"stroke-opacity-input\"\n                  type=\"number\"\n                  @change=${(event: InputEvent) => {\n                    updatePreviousSiblingValue(event);\n                    this.handleSVGParamChange?.(\n                      'stroke',\n                      SVGParamFieldID.STROKE_OPACITY\n                    );\n                  }}\n                />\n              </label>\n            </div>\n            <div>\n              <label>\n                Fill:\n                <input\n                  type=\"color\"\n                  id=\"fill-color-input\"\n                  @input=${() =>\n                    this.handleSVGParamChange?.(\n                      'fill',\n                      SVGParamFieldID.FILL_COLOR\n                    )}\n                />\n              </label>\n              <label>\n                Opacity:\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"1\"\n                  step=\"0.01\"\n                  @input=${(event: InputEvent) => {\n                    updateNextSiblingValue(event);\n                    this.handleSVGParamChange?.(\n                      'fill',\n                      SVGParamFieldID.FILL_OPACITY\n                    );\n                  }}\n                />\n                <input\n                  id=\"fill-opacity-input\"\n                  type=\"number\"\n                  @change=${(event: InputEvent) => {\n                    updatePreviousSiblingValue(event);\n                    this.handleSVGParamChange?.(\n                      'fill',\n                      SVGParamFieldID.FILL_OPACITY\n                    );\n                  }}\n                />\n              </label>\n            </div>\n          </div>\n        </div>\n        <fieldset id=\"right-input-section\">\n          <label\n            >Font size:<input\n              type=\"number\"\n              id=\"text-font-size-input\"\n              @input=${() =>\n                this.handleSVGParamChange?.(\n                  'fontSize',\n                  SVGParamFieldID.TEXT_FONT_SIZE\n                )}\n          /></label>\n          <label>\n            Font family:\n            <select\n              id=\"text-font-family-input\"\n              @input=${() =>\n                this.handleSVGParamChange?.(\n                  'fontFamily',\n                  SVGParamFieldID.TEXT_FONT_FAMILY\n                )}\n            >\n              ${this.availableFonts &&\n              Array.from(this.availableFonts).map(\n                font => html`<option value=${font}>${font}</option>`\n              )}\n            </select>\n          </label>\n          <label>\n            Text:\n            <input\n              type=\"text\"\n              id=\"text-input\"\n              @input=${() =>\n                this.handleSVGParamChange?.('text', SVGParamFieldID.TEXT)}\n            />\n          </label>\n        </fieldset>\n      </div>\n    </fieldset>`;\n  }\n}\n"]}