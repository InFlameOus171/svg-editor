{"version":3,"file":"DialogSection.js","sourceRoot":"","sources":["../../../../../src/components/molecules/DialogSection/DialogSection.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC5D,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAG7D,IAAa,aAAa,GAA1B,MAAa,aAAc,SAAQ,UAAU;IAA7C;;QASE,4CAAsB,CAAC,WAAsC,EAAE,EAAE;;YAC/D,IAAI;gBACF,MAAM,OAAO,GAAG,MAAA,WAAW,CAAC,MAAM,0CAAE,MAAM,CAAC;gBAC3C,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;oBAC/B,MAAM,MAAM,GAAG,IAAI,SAAS,EAAE,CAAC;oBAC/B,MAAA,IAAI,CAAC,eAAe,+CAApB,IAAI,EACF,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE,eAAe,CAAC,CACjD,CAAC;iBACH;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,KAAK,CAAC,mCAAmC,CAAC,CAAC;aAC5C;QACH,CAAC,EAAC;QAEF,qBAAgB,GAAG,CAAC,KAAY,EAAE,EAAE;YAClC,MAAM,KAAK,GAAI,KAAK,CAAC,MAAc,CAAC,KAA6B,CAAC;YAClE,MAAM,IAAI,GAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAG,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,IAAI,EAAE;gBACT,OAAO;aACR;YAED,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;YAChC,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,uBAAA,IAAI,yCAAoB,CAAC,CAAC;YACzD,KAAK,CAAC,MAAc,CAAC,KAAK,GAAG,EAAE,CAAC;YACjC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC,CAAC;IAoBJ,CAAC;IAlBC,MAAM;QACJ,OAAO,IAAI,CAAA;;;;;;;mBAOI,IAAI,CAAC,gBAAgB;;;;;;gDAMQ,IAAI,CAAC,MAAM;;KAEtD,CAAC;IACJ,CAAC;CACF,CAAA;;AArDQ,oBAAM,GAAG,CAAC,mBAAmB,CAAC,CAAC;AAGtC;IADC,QAAQ,EAAE;sDACgC;AAG3C;IADC,QAAQ,EAAE;6CAC0B;AAP1B,aAAa;IADzB,aAAa,CAAC,gBAAgB,CAAC;GACnB,aAAa,CAsDzB;SAtDY,aAAa","sourcesContent":["import { html, LitElement } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { dialogSectionStyles } from './DialogSection.styles';\n\n@customElement('dialog-section')\nexport class DialogSection extends LitElement {\n  static styles = [dialogSectionStyles];\n\n  @property()\n  onSelectSvgFile?: (data: Document) => void;\n\n  @property()\n  onSave?: (event: MouseEvent) => void;\n\n  #readerEventHandler = (readerEvent: ProgressEvent<FileReader>) => {\n    try {\n      const content = readerEvent.target?.result;\n      if (typeof content === 'string') {\n        const parser = new DOMParser();\n        this.onSelectSvgFile?.(\n          parser.parseFromString(content, 'image/svg+xml')\n        );\n      }\n    } catch (error) {\n      alert('SVG Element count not be imported');\n    }\n  };\n\n  handleSelectFile = (event: Event) => {\n    const files = (event.target as any).files as FileList | undefined;\n    const file = files?.[0];\n    if (!file) {\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.addEventListener('load', this.#readerEventHandler);\n    (event.target as any).value = '';\n    reader.readAsText(file);\n  };\n\n  render() {\n    return html`\n      <label id=\"open-svg-button\">\n        Open\n        <input\n          id=\"open-file\"\n          type=\"file\"\n          hidden\n          @input=${this.handleSelectFile}\n          accept=\"image/svg+xml\"\n        />\n      </label>\n      <label id=\"on-save-button\">\n        Save\n        <input type=\"button\" id=\"save\" @click=${this.onSave}></div>\n      </label>\n    `;\n  }\n}\n"]}